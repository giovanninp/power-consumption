
UART_SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a744  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d8  0800a9d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e0  0800a9e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e4  0800a9e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000119c  20000070  0800aa58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000120c  0800aa58  0002120c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cde  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004675  00000000  00000000  00043d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  000483f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  0004a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfcf  00000000  00000000  0004bed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f141  00000000  00000000  00079e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ca22  00000000  00000000  00098fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b5a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008438  00000000  00000000  001b5a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8bc 	.word	0x0800a8bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a8bc 	.word	0x0800a8bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c
 8000598:	200000e0 	.word	0x200000e0

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f043 0201 	orr.w	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	609a      	str	r2, [r3, #8]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	2b20      	cmp	r3, #32
 800070c:	d101      	bne.n	8000712 <LL_USART_IsActiveFlag_RXNE+0x18>
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000730:	2b80      	cmp	r3, #128	; 0x80
 8000732:	d101      	bne.n	8000738 <LL_USART_IsActiveFlag_TXE+0x18>
 8000734:	2301      	movs	r3, #1
 8000736:	e000      	b.n	800073a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f043 0220 	orr.w	r2, r3, #32
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4013      	ands	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <LL_APB1_GRP1_EnableClock+0x2c>)
 800081e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <LL_APB1_GRP1_EnableClock+0x2c>)
 800082a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4013      	ands	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	4413      	add	r3, r2
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000868:	f023 0310 	bic.w	r3, r3, #16
 800086c:	4908      	ldr	r1, [pc, #32]	; (8000890 <LL_DMA_SetDataTransferDirection+0x4c>)
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	440a      	add	r2, r1
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	4611      	mov	r1, r2
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	440a      	add	r2, r1
 800087a:	4611      	mov	r1, r2
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4313      	orrs	r3, r2
 8000880:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000882:	bf00      	nop
 8000884:	371c      	adds	r7, #28
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	0800a954 	.word	0x0800a954

08000894 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LL_DMA_SetMode+0x48>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f023 0220 	bic.w	r2, r3, #32
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <LL_DMA_SetMode+0x48>)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	440b      	add	r3, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	440b      	add	r3, r1
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80008ce:	bf00      	nop
 80008d0:	371c      	adds	r7, #28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	0800a954 	.word	0x0800a954

080008e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LL_DMA_SetPeriphIncMode+0x48>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000904:	4908      	ldr	r1, [pc, #32]	; (8000928 <LL_DMA_SetPeriphIncMode+0x48>)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	440b      	add	r3, r1
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	0800a954 	.word	0x0800a954

0800092c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LL_DMA_SetMemoryIncMode+0x48>)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	4413      	add	r3, r2
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000950:	4908      	ldr	r1, [pc, #32]	; (8000974 <LL_DMA_SetMemoryIncMode+0x48>)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	440b      	add	r3, r1
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	440b      	add	r3, r1
 800095e:	4619      	mov	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4313      	orrs	r3, r2
 8000964:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000966:	bf00      	nop
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	0800a954 	.word	0x0800a954

08000978 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LL_DMA_SetPeriphSize+0x48>)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	4413      	add	r3, r2
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800099c:	4908      	ldr	r1, [pc, #32]	; (80009c0 <LL_DMA_SetPeriphSize+0x48>)
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	440b      	add	r3, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	440b      	add	r3, r1
 80009aa:	4619      	mov	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80009b2:	bf00      	nop
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	0800a954 	.word	0x0800a954

080009c4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <LL_DMA_SetMemorySize+0x48>)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	4413      	add	r3, r2
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80009e8:	4908      	ldr	r1, [pc, #32]	; (8000a0c <LL_DMA_SetMemorySize+0x48>)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	440b      	add	r3, r1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	440b      	add	r3, r1
 80009f6:	4619      	mov	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80009fe:	bf00      	nop
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	0800a954 	.word	0x0800a954

08000a10 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	440b      	add	r3, r1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	440b      	add	r3, r1
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	0800a954 	.word	0x0800a954

08000a5c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	33a8      	adds	r3, #168	; 0xa8
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	210f      	movs	r1, #15
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	210f      	movs	r1, #15
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	e003      	b.n	8000aa6 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	fab3 f383 	clz	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	408b      	lsls	r3, r1
 8000aac:	68f9      	ldr	r1, [r7, #12]
 8000aae:	31a8      	adds	r1, #168	; 0xa8
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8000ab4:	bf00      	nop
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <sendchar>:
uint16_t temp;

int power = 0;
int generator = 0;

void sendchar(char c, char usart){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460a      	mov	r2, r1
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	4613      	mov	r3, r2
 8000ace:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d10b      	bne.n	8000aee <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <sendchar+0x54>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	1df9      	adds	r1, r7, #7
 8000adc:	2300      	movs	r3, #0
 8000ade:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae2:	f007 fb7b 	bl	80081dc <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <sendchar+0x58>)
 8000ae8:	f7ff fe3d 	bl	8000766 <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 8000aec:	e00d      	b.n	8000b0a <sendchar+0x4a>
	else if( usart == USART_2){
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d10a      	bne.n	8000b0a <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <sendchar+0x5c>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	1df9      	adds	r1, r7, #7
 8000afa:	2300      	movs	r3, #0
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	f007 fb6c 	bl	80081dc <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <sendchar+0x60>)
 8000b06:	f7ff fe2e 	bl	8000766 <LL_USART_EnableIT_TXE>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200011a8 	.word	0x200011a8
 8000b18:	40013800 	.word	0x40013800
 8000b1c:	20001154 	.word	0x20001154
 8000b20:	40004400 	.word	0x40004400

08000b24 <sendString>:

void sendString(char * str, char usart){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 8000b30:	e009      	b.n	8000b46 <sendString+0x22>
		sendchar(*str, usart);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ffc0 	bl	8000ac0 <sendchar>
		str++;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f1      	bne.n	8000b32 <sendString+0xe>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <read_voltage>:

uint16_t read_voltage(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <read_voltage+0x2c>)
 8000b60:	f001 fba2 	bl	80022a8 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <read_voltage+0x2c>)
 8000b6a:	f001 fc57 	bl	800241c <HAL_ADC_PollForConversion>

	uint16_t input = HAL_ADC_GetValue(&hadc1);
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <read_voltage+0x2c>)
 8000b70:	f001 fd2c 	bl	80025cc <HAL_ADC_GetValue>
 8000b74:	4603      	mov	r3, r0
 8000b76:	80fb      	strh	r3, [r7, #6]

	return input;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000106c 	.word	0x2000106c

08000b88 <semEnergia>:


void semEnergia(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim3);
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <semEnergia+0x14>)
 8000b8e:	f004 f9b5 	bl	8004efc <HAL_TIM_Base_Stop_IT>
    power = FALSE;
 8000b92:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <semEnergia+0x18>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20001020 	.word	0x20001020
 8000ba0:	200002ec 	.word	0x200002ec

08000ba4 <comEnergia>:

void comEnergia(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim3);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <comEnergia+0x14>)
 8000baa:	f004 f937 	bl	8004e1c <HAL_TIM_Base_Start_IT>
    power = TRUE;
 8000bae:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <comEnergia+0x18>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20001020 	.word	0x20001020
 8000bbc:	200002ec 	.word	0x200002ec

08000bc0 <ledOff>:

void ledOff(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f002 fd58 	bl	8003680 <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <ledOn>:

void ledOn(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f002 fd4e 	bl	8003680 <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <geradorOn>:

void geradorOn(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	generator = TRUE;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <geradorOn+0x60>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4815      	ldr	r0, [pc, #84]	; (8000c4c <geradorOn+0x64>)
 8000bf6:	f004 fa07 	bl	8005008 <HAL_TIM_PWM_Start>
	sendString("gerador ligado\r\n", USART_2);
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <geradorOn+0x68>)
 8000bfe:	f7ff ff91 	bl	8000b24 <sendString>
	temp = read_voltage();
 8000c02:	f7ff ffa9 	bl	8000b58 <read_voltage>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <geradorOn+0x6c>)
 8000c0c:	801a      	strh	r2, [r3, #0]
	pwm_value += temp;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <geradorOn+0x6c>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <geradorOn+0x70>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <geradorOn+0x70>)
 8000c1c:	6013      	str	r3, [r2, #0]
	if(pwm_value < 65535){
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <geradorOn+0x70>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c26:	4293      	cmp	r3, r2
 8000c28:	dc04      	bgt.n	8000c34 <geradorOn+0x4c>
		TIM2->CCR2 = pwm_value;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <geradorOn+0x70>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(pwm_value > 65535 ){
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <geradorOn+0x70>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	db02      	blt.n	8000c44 <geradorOn+0x5c>
		pwm_value = 0;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <geradorOn+0x70>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
	}
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200002f0 	.word	0x200002f0
 8000c4c:	2000115c 	.word	0x2000115c
 8000c50:	0800a8e0 	.word	0x0800a8e0
 8000c54:	2000101c 	.word	0x2000101c
 8000c58:	200002e8 	.word	0x200002e8

08000c5c <geradorOff>:

void geradorOff(){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	generator = FALSE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <geradorOff+0x20>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
    sendString("gerador desligado\r\n", USART_2);
 8000c66:	2102      	movs	r1, #2
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <geradorOff+0x24>)
 8000c6a:	f7ff ff5b 	bl	8000b24 <sendString>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000c6e:	2104      	movs	r1, #4
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <geradorOff+0x28>)
 8000c72:	f004 facf 	bl	8005214 <HAL_TIM_PWM_Stop>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002f0 	.word	0x200002f0
 8000c80:	0800a8f4 	.word	0x0800a8f4
 8000c84:	2000115c 	.word	0x2000115c

08000c88 <readchar>:

char readchar(char usart){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d109      	bne.n	8000cb0 <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <readchar+0x4c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f107 010f 	add.w	r1, r7, #15
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 fc31 	bl	8008510 <xQueueReceive>
 8000cae:	e00b      	b.n	8000cc8 <readchar+0x40>
	else if(usart == USART_2)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d108      	bne.n	8000cc8 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <readchar+0x50>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f107 010f 	add.w	r1, r7, #15
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f007 fc24 	bl	8008510 <xQueueReceive>
	return caracter;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20001014 	.word	0x20001014
 8000cd8:	20001158 	.word	0x20001158

08000cdc <voltage_scanner>:

void voltage_scanner(void * vParam) {
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
	uint16_t potentiometer_buff;
	char potentiometer_result_buff[13];

	int countdown = 1000;
 8000ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce8:	61fb      	str	r3, [r7, #28]

	while(TRUE) {
		potentiometer_buff = read_voltage();
 8000cea:	f7ff ff35 	bl	8000b58 <read_voltage>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	837b      	strh	r3, [r7, #26]
		uint16_t led = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f002 fcaa 	bl	8003650 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	833b      	strh	r3, [r7, #24]

		if(!countdown) {
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d120      	bne.n	8000d48 <voltage_scanner+0x6c>
			sprintf(potentiometer_result_buff, "%d,%d,%d,%d", potentiometer_buff, led, power, generator);
 8000d06:	8b79      	ldrh	r1, [r7, #26]
 8000d08:	8b3c      	ldrh	r4, [r7, #24]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <voltage_scanner+0x74>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <voltage_scanner+0x78>)
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	f107 0008 	add.w	r0, r7, #8
 8000d16:	9201      	str	r2, [sp, #4]
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <voltage_scanner+0x7c>)
 8000d20:	f009 f9ac 	bl	800a07c <siprintf>
			sendString("[", USART_1);
 8000d24:	2101      	movs	r1, #1
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <voltage_scanner+0x80>)
 8000d28:	f7ff fefc 	bl	8000b24 <sendString>
			sendString(potentiometer_result_buff, USART_1);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2101      	movs	r1, #1
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fef6 	bl	8000b24 <sendString>
			sendString("]\r", USART_1);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <voltage_scanner+0x84>)
 8000d3c:	f7ff fef2 	bl	8000b24 <sendString>
			countdown = 1000;
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e7d0      	b.n	8000cea <voltage_scanner+0xe>
		} else {
			countdown--;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
	while(TRUE) {
 8000d4e:	e7cc      	b.n	8000cea <voltage_scanner+0xe>
 8000d50:	200002ec 	.word	0x200002ec
 8000d54:	200002f0 	.word	0x200002f0
 8000d58:	0800a908 	.word	0x0800a908
 8000d5c:	0800a914 	.word	0x0800a914
 8000d60:	0800a918 	.word	0x0800a918

08000d64 <cli>:
		}
	}
}

void cli(void * vParam)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    uint8_t caracter;
        while(1)
        {
            caracter = readchar(USART_1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff ff8b 	bl	8000c88 <readchar>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
            switch(caracter){
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	3b61      	subs	r3, #97	; 0x61
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d8f6      	bhi.n	8000d6c <cli+0x8>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <cli+0x20>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000de9 	.word	0x08000de9
 8000d88:	08000def 	.word	0x08000def
 8000d8c:	08000dd7 	.word	0x08000dd7
 8000d90:	08000d6d 	.word	0x08000d6d
 8000d94:	08000d6d 	.word	0x08000d6d
 8000d98:	08000de3 	.word	0x08000de3
 8000d9c:	08000d6d 	.word	0x08000d6d
 8000da0:	08000d6d 	.word	0x08000d6d
 8000da4:	08000d6d 	.word	0x08000d6d
 8000da8:	08000d6d 	.word	0x08000d6d
 8000dac:	08000d6d 	.word	0x08000d6d
 8000db0:	08000ddd 	.word	0x08000ddd
 8000db4:	08000d6d 	.word	0x08000d6d
 8000db8:	08000d6d 	.word	0x08000d6d
 8000dbc:	08000d6d 	.word	0x08000d6d
 8000dc0:	08000d6d 	.word	0x08000d6d
 8000dc4:	08000d6d 	.word	0x08000d6d
 8000dc8:	08000d6d 	.word	0x08000d6d
 8000dcc:	08000dd1 	.word	0x08000dd1
            case 's':
                semEnergia();
 8000dd0:	f7ff feda 	bl	8000b88 <semEnergia>
                break;
 8000dd4:	e00e      	b.n	8000df4 <cli+0x90>
            case 'c':
                comEnergia();
 8000dd6:	f7ff fee5 	bl	8000ba4 <comEnergia>
                break;
 8000dda:	e00b      	b.n	8000df4 <cli+0x90>
            case 'l':
                ledOff();
 8000ddc:	f7ff fef0 	bl	8000bc0 <ledOff>
                break;
 8000de0:	e008      	b.n	8000df4 <cli+0x90>
            case 'f':
                ledOn();
 8000de2:	f7ff fef7 	bl	8000bd4 <ledOn>
                break;
 8000de6:	e005      	b.n	8000df4 <cli+0x90>
            case 'a' :
                geradorOn();
 8000de8:	f7ff fefe 	bl	8000be8 <geradorOn>
                break;
 8000dec:	e002      	b.n	8000df4 <cli+0x90>
            case 'b':
                geradorOff();
 8000dee:	f7ff ff35 	bl	8000c5c <geradorOff>
                break;
 8000df2:	bf00      	nop
            caracter = readchar(USART_1);
 8000df4:	e7ba      	b.n	8000d6c <cli+0x8>
 8000df6:	bf00      	nop

08000df8 <USART_2_IRQHandler>:
    }
	caracter = '\0';
}

void USART_2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000dfe:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e00:	f7ff fc8e 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d026      	beq.n	8000e58 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000e0a:	e014      	b.n	8000e36 <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000e0c:	4b27      	ldr	r3, [pc, #156]	; (8000eac <USART_2_IRQHandler+0xb4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	f107 010b 	add.w	r1, r7, #11
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 fc59 	bl	80086d0 <xQueueReceiveFromISR>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 8000e24:	4820      	ldr	r0, [pc, #128]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e26:	f7ff fcae 	bl	8000786 <LL_USART_DisableIT_TXE>
 8000e2a:	e00a      	b.n	8000e42 <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481d      	ldr	r0, [pc, #116]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e32:	f7ff fcc6 	bl	80007c2 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000e36:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e38:	f7ff fc72 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1e4      	bne.n	8000e0c <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d007      	beq.n	8000e58 <USART_2_IRQHandler+0x60>
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <USART_2_IRQHandler+0xb8>)
 8000e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e5a:	f7ff fc4e 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d01d      	beq.n	8000ea0 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000e64:	e00b      	b.n	8000e7e <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 8000e66:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e68:	f7ff fc9d 	bl	80007a6 <LL_USART_ReceiveData8>
 8000e6c:	4603      	mov	r3, r0
        	uint8_t byte =
 8000e6e:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <USART_2_IRQHandler+0xbc>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	1d3a      	adds	r2, r7, #4
 8000e76:	1cf9      	adds	r1, r7, #3
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f007 faad 	bl	80083d8 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <USART_2_IRQHandler+0xb0>)
 8000e80:	f7ff fc3b 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1ed      	bne.n	8000e66 <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <USART_2_IRQHandler+0xa8>
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <USART_2_IRQHandler+0xb8>)
 8000e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	f3bf 8f4f 	dsb	sy
 8000e9c:	f3bf 8f6f 	isb	sy
    }
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	20001154 	.word	0x20001154
 8000eb0:	e000ed04 	.word	0xe000ed04
 8000eb4:	20001158 	.word	0x20001158

08000eb8 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000ebe:	482a      	ldr	r0, [pc, #168]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000ec0:	f7ff fc2e 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d026      	beq.n	8000f18 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000eca:	e014      	b.n	8000ef6 <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <USART_1_IRQHandler+0xb4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	f107 010b 	add.w	r1, r7, #11
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f007 fbf9 	bl	80086d0 <xQueueReceiveFromISR>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d103      	bne.n	8000eec <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 8000ee4:	4820      	ldr	r0, [pc, #128]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000ee6:	f7ff fc4e 	bl	8000786 <LL_USART_DisableIT_TXE>
 8000eea:	e00a      	b.n	8000f02 <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481d      	ldr	r0, [pc, #116]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000ef2:	f7ff fc66 	bl	80007c2 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000ef6:	481c      	ldr	r0, [pc, #112]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000ef8:	f7ff fc12 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1e4      	bne.n	8000ecc <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <USART_1_IRQHandler+0x60>
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <USART_1_IRQHandler+0xb8>)
 8000f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000f1a:	f7ff fbee 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d01d      	beq.n	8000f60 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000f24:	e00b      	b.n	8000f3e <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000f28:	f7ff fc3d 	bl	80007a6 <LL_USART_ReceiveData8>
 8000f2c:	4603      	mov	r3, r0
        	uint8_t byte =
 8000f2e:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <USART_1_IRQHandler+0xbc>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	1d3a      	adds	r2, r7, #4
 8000f36:	1cf9      	adds	r1, r7, #3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f007 fa4d 	bl	80083d8 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <USART_1_IRQHandler+0xb0>)
 8000f40:	f7ff fbdb 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1ed      	bne.n	8000f26 <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <USART_1_IRQHandler+0xa8>
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <USART_1_IRQHandler+0xb8>)
 8000f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	f3bf 8f4f 	dsb	sy
 8000f5c:	f3bf 8f6f 	isb	sy
    }
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	200011a8 	.word	0x200011a8
 8000f70:	e000ed04 	.word	0xe000ed04
 8000f74:	20001014 	.word	0x20001014

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fe34 	bl	8001bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f853 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 faf7 	bl	8001578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8a:	f000 f9f5 	bl	8001378 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f8e:	f000 facd 	bl	800152c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f92:	f000 f9c1 	bl	8001318 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f96:	f000 f89f 	bl	80010d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f9a:	f000 f913 	bl	80011c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f9e:	f000 f96b 	bl	8001278 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f007 f901 	bl	80081aa <xQueueCreateMutex>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <main+0x94>)
 8000fac:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f007 f8fb 	bl	80081aa <xQueueCreateMutex>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <main+0x98>)
 8000fb8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <main+0x9c>)
 8000fbc:	1d3c      	adds	r4, r7, #4
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fefa 	bl	8007dca <osThreadCreate>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <main+0xa0>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <main+0xa4>)
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <main+0xa8>)
 8000fec:	f007 fd5d 	bl	8008aaa <xTaskCreate>
 			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
 			  NULL,       /* parametro para a task */
 			  2,          /* nivel de prioridade */
 			  NULL);      /* ponteiro para o handle da task */

  xTaskCreate(voltage_scanner,    /* Nome da funcao que contem a task */
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	4909      	ldr	r1, [pc, #36]	; (8001024 <main+0xac>)
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <main+0xb0>)
 8001000:	f007 fd53 	bl	8008aaa <xTaskCreate>
 			  NULL);      /* ponteiro para o handle da task */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001004:	f006 feda 	bl	8007dbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001008:	e7fe      	b.n	8001008 <main+0x90>
 800100a:	bf00      	nop
 800100c:	200002e0 	.word	0x200002e0
 8001010:	200002e4 	.word	0x200002e4
 8001014:	0800a930 	.word	0x0800a930
 8001018:	20001010 	.word	0x20001010
 800101c:	0800a91c 	.word	0x0800a91c
 8001020:	08000d65 	.word	0x08000d65
 8001024:	0800a920 	.word	0x0800a920
 8001028:	08000cdd 	.word	0x08000cdd

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	; 0x58
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2244      	movs	r2, #68	; 0x44
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f009 f816 	bl	800a06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800104e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001052:	f002 fb4b 	bl	80036ec <HAL_PWREx_ControlVoltageScaling>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800105c:	f000 fb26 	bl	80016ac <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001060:	f002 fb26 	bl	80036b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <SystemClock_Config+0xa8>)
 8001066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <SystemClock_Config+0xa8>)
 800106c:	f023 0318 	bic.w	r3, r3, #24
 8001070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001074:	2314      	movs	r3, #20
 8001076:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001084:	2360      	movs	r3, #96	; 0x60
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fb81 	bl	8003798 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800109c:	f000 fb06 	bl	80016ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 ff53 	bl	8003f64 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010c4:	f000 faf2 	bl	80016ac <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010c8:	f003 fc6e 	bl	80049a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010cc:	bf00      	nop
 80010ce:	3758      	adds	r7, #88	; 0x58
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000

080010d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <MX_ADC1_Init+0xe0>)
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <MX_ADC1_Init+0xe4>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <MX_ADC1_Init+0xe0>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <MX_ADC1_Init+0xe0>)
 800111a:	2204      	movs	r2, #4
 800111c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001120:	2200      	movs	r2, #0
 8001122:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001126:	2200      	movs	r2, #0
 8001128:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_ADC1_Init+0xe0>)
 800112c:	2201      	movs	r2, #1
 800112e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC1_Init+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ADC1_Init+0xe0>)
 800114e:	2200      	movs	r2, #0
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115a:	4817      	ldr	r0, [pc, #92]	; (80011b8 <MX_ADC1_Init+0xe0>)
 800115c:	f000 ff4e 	bl	8001ffc <HAL_ADC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001166:	f000 faa1 	bl	80016ac <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <MX_ADC1_Init+0xe0>)
 8001176:	f001 feaf 	bl	8002ed8 <HAL_ADCEx_MultiModeConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001180:	f000 fa94 	bl	80016ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_ADC1_Init+0xe8>)
 8001186:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001188:	2306      	movs	r3, #6
 800118a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001190:	237f      	movs	r3, #127	; 0x7f
 8001192:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001194:	2304      	movs	r3, #4
 8001196:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC1_Init+0xe0>)
 80011a2:	f001 fa21 	bl	80025e8 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011ac:	f000 fa7e 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000106c 	.word	0x2000106c
 80011bc:	50040000 	.word	0x50040000
 80011c0:	14f00020 	.word	0x14f00020

080011c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011f2:	227f      	movs	r2, #127	; 0x7f
 80011f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_TIM2_Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001210:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001212:	f003 fea2 	bl	8004f5a <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 fa46 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001230:	f004 ffd4 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800123a:	f000 fa37 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123e:	2360      	movs	r3, #96	; 0x60
 8001240:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	2204      	movs	r2, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001256:	f004 f993 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001260:	f000 fa24 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001266:	f000 fafb 	bl	8001860 <HAL_TIM_MspPostInit>

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000115c 	.word	0x2000115c

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM3_Init+0x98>)
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_TIM3_Init+0x9c>)
 800129a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM3_Init+0x98>)
 800129e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM3_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM3_Init+0x98>)
 80012ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM3_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM3_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM3_Init+0x98>)
 80012c0:	f003 fd54 	bl	8004d6c <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80012ca:	f000 f9ef 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM3_Init+0x98>)
 80012dc:	f004 fa60 	bl	80057a0 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80012e6:	f000 f9e1 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM3_Init+0x98>)
 80012f8:	f004 ff70 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001302:	f000 f9d3 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20001020 	.word	0x20001020
 8001314:	40000400 	.word	0x40000400

08001318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <MX_USART1_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800135c:	f004 ffe4 	bl	8006328 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 f9a1 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200010d0 	.word	0x200010d0
 8001374:	40013800 	.word	0x40013800

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0b0      	sub	sp, #192	; 0xc0
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	tx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 800137e:	2200      	movs	r2, #0
 8001380:	2101      	movs	r1, #1
 8001382:	200a      	movs	r0, #10
 8001384:	f006 fe9e 	bl	80080c4 <xQueueGenericCreate>
 8001388:	4603      	mov	r3, r0
 800138a:	4a62      	ldr	r2, [pc, #392]	; (8001514 <MX_USART2_UART_Init+0x19c>)
 800138c:	6013      	str	r3, [r2, #0]
	rx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 800138e:	2200      	movs	r2, #0
 8001390:	2101      	movs	r1, #1
 8001392:	200a      	movs	r0, #10
 8001394:	f006 fe96 	bl	80080c4 <xQueueGenericCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a5f      	ldr	r2, [pc, #380]	; (8001518 <MX_USART2_UART_Init+0x1a0>)
 800139c:	6013      	str	r3, [r2, #0]
	LL_USART_EnableIT_RXNE(USART2);
 800139e:	485f      	ldr	r0, [pc, #380]	; (800151c <MX_USART2_UART_Init+0x1a4>)
 80013a0:	f7ff f9d1 	bl	8000746 <LL_USART_EnableIT_RXNE>


  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2288      	movs	r2, #136	; 0x88
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f008 fe4b 	bl	800a06c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013da:	2300      	movs	r3, #0
 80013dc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fff7 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 80013ec:	f000 f95e 	bl	80016ac <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013f4:	f7ff fa0e 	bl	8000814 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff f9f3 	bl	80007e4 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013fe:	230c      	movs	r3, #12
 8001400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800141c:	2307      	movs	r3, #7
 800141e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f005 ff90 	bl	8007350 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001430:	2202      	movs	r2, #2
 8001432:	2105      	movs	r1, #5
 8001434:	483a      	ldr	r0, [pc, #232]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 8001436:	f7ff fb11 	bl	8000a5c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	4838      	ldr	r0, [pc, #224]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 8001440:	f7ff fa00 	bl	8000844 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001444:	2200      	movs	r2, #0
 8001446:	2105      	movs	r1, #5
 8001448:	4835      	ldr	r0, [pc, #212]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 800144a:	f7ff fae1 	bl	8000a10 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 800144e:	2220      	movs	r2, #32
 8001450:	2105      	movs	r1, #5
 8001452:	4833      	ldr	r0, [pc, #204]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 8001454:	f7ff fa1e 	bl	8000894 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001458:	2200      	movs	r2, #0
 800145a:	2105      	movs	r1, #5
 800145c:	4830      	ldr	r0, [pc, #192]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 800145e:	f7ff fa3f 	bl	80008e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	2105      	movs	r1, #5
 8001466:	482e      	ldr	r0, [pc, #184]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 8001468:	f7ff fa60 	bl	800092c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	482b      	ldr	r0, [pc, #172]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 8001472:	f7ff fa81 	bl	8000978 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	4829      	ldr	r0, [pc, #164]	; (8001520 <MX_USART2_UART_Init+0x1a8>)
 800147c:	f7ff faa2 	bl	80009c4 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001480:	f7ff f88c 	bl	800059c <__NVIC_GetPriorityGrouping>
 8001484:	4603      	mov	r3, r0
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f8dc 	bl	8000648 <NVIC_EncodePriority>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	2026      	movs	r0, #38	; 0x26
 8001496:	f7ff f8ad 	bl	80005f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800149a:	2026      	movs	r0, #38	; 0x26
 800149c:	f7ff f88c 	bl	80005b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80014a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014ba:	230c      	movs	r3, #12
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 80014cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_USART2_UART_Init+0x1a4>)
 80014d4:	f006 fbde 	bl	8007c94 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <MX_USART2_UART_Init+0x1a4>)
 80014da:	f7ff f8f8 	bl	80006ce <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80014de:	480f      	ldr	r0, [pc, #60]	; (800151c <MX_USART2_UART_Init+0x1a4>)
 80014e0:	f7ff f8e5 	bl	80006ae <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 80014e4:	2200      	movs	r2, #0
 80014e6:	2101      	movs	r1, #1
 80014e8:	2080      	movs	r0, #128	; 0x80
 80014ea:	f006 fdeb 	bl	80080c4 <xQueueGenericCreate>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <MX_USART2_UART_Init+0x1ac>)
 80014f2:	6013      	str	r3, [r2, #0]
  rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	2005      	movs	r0, #5
 80014fa:	f006 fde3 	bl	80080c4 <xQueueGenericCreate>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x1b0>)
 8001502:	6013      	str	r3, [r2, #0]

  LL_USART_EnableIT_RXNE(USART2);
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x1a4>)
 8001506:	f7ff f91e 	bl	8000746 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	37c0      	adds	r7, #192	; 0xc0
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200011a8 	.word	0x200011a8
 8001518:	20001014 	.word	0x20001014
 800151c:	40004400 	.word	0x40004400
 8001520:	40020000 	.word	0x40020000
 8001524:	20001154 	.word	0x20001154
 8001528:	20001158 	.word	0x20001158

0800152c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_DMA_Init+0x48>)
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <MX_DMA_Init+0x48>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6493      	str	r3, [r2, #72]	; 0x48
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <MX_DMA_Init+0x48>)
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800154a:	f7ff f827 	bl	800059c <__NVIC_GetPriorityGrouping>
 800154e:	4603      	mov	r3, r0
 8001550:	2200      	movs	r2, #0
 8001552:	2105      	movs	r1, #5
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f877 	bl	8000648 <NVIC_EncodePriority>
 800155a:	4603      	mov	r3, r0
 800155c:	4619      	mov	r1, r3
 800155e:	2010      	movs	r0, #16
 8001560:	f7ff f848 	bl	80005f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001564:	2010      	movs	r0, #16
 8001566:	f7ff f827 	bl	80005b8 <__NVIC_EnableIRQ>

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <MX_GPIO_Init+0xac>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <MX_GPIO_Init+0xac>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_GPIO_Init+0xac>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_GPIO_Init+0xac>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <MX_GPIO_Init+0xac>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_GPIO_Init+0xac>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_GPIO_Init+0xac>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <MX_GPIO_Init+0xac>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_GPIO_Init+0xac>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2130      	movs	r1, #48	; 0x30
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f002 f84f 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <MX_GPIO_Init+0xb0>)
 80015f8:	f001 fe80 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015fc:	2330      	movs	r3, #48	; 0x30
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f001 fe71 	bl	80032fc <HAL_GPIO_Init>

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	48000800 	.word	0x48000800

0800162c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f006 fc14 	bl	8007e62 <osDelay>
 800163a:	e7fb      	b.n	8001634 <StartDefaultTask+0x8>

0800163c <HAL_TIM_PeriodElapsedCallback>:
  */
int count = 0;
int tempo;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    tempo = 2;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001646:	2202      	movs	r2, #2
 8001648:	601a      	str	r2, [r3, #0]
    if (htim->Instance == htim3.Instance){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d120      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x5c>
        //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
        count++;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800165e:	6013      	str	r3, [r2, #0]
        if(count == tempo){
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d105      	bne.n	8001678 <HAL_TIM_PeriodElapsedCallback+0x3c>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2110      	movs	r1, #16
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f002 f804 	bl	8003680 <HAL_GPIO_WritePin>
        }
        if(count == tempo*2){
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	005a      	lsls	r2, r3, #1
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d108      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x5c>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2110      	movs	r1, #16
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f001 fff7 	bl	8003680 <HAL_GPIO_WritePin>
      count = 0;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20001018 	.word	0x20001018
 80016a4:	20001020 	.word	0x20001020
 80016a8:	200002f4 	.word	0x200002f4

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_MspInit+0x4c>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_MspInit+0x4c>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_MspInit+0x4c>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_MspInit+0x4c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	f06f 0001 	mvn.w	r0, #1
 80016f6:	f001 fd57 	bl	80031a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0ac      	sub	sp, #176	; 0xb0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2288      	movs	r2, #136	; 0x88
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f008 fc9f 	bl	800a06c <memset>
  if(hadc->Instance==ADC1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <HAL_ADC_MspInit+0xc8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d147      	bne.n	80017c8 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800173e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800174a:	2301      	movs	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800174e:	2310      	movs	r3, #16
 8001750:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001752:	2307      	movs	r3, #7
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800175a:	2302      	movs	r3, #2
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800175e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fe33 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001774:	f7ff ff9a 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_ADC_MspInit+0xcc>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0xcc>)
 800177e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_ADC_MspInit+0xcc>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_MspInit+0xcc>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0xcc>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_ADC_MspInit+0xcc>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017ae:	230b      	movs	r3, #11
 80017b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f001 fd9a 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	37b0      	adds	r7, #176	; 0xb0
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	50040000 	.word	0x50040000
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d10b      	bne.n	8001802 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_TIM_PWM_MspInit+0x38>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_TIM_PWM_MspInit+0x38>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_TIM_PWM_MspInit+0x38>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_TIM_Base_MspInit+0x44>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d113      	bne.n	800184e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_Base_MspInit+0x48>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_TIM_Base_MspInit+0x48>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_Base_MspInit+0x48>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2105      	movs	r1, #5
 8001842:	201d      	movs	r0, #29
 8001844:	f001 fcb0 	bl	80031a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001848:	201d      	movs	r0, #29
 800184a:	f001 fcc9 	bl	80031e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40000400 	.word	0x40000400
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d11c      	bne.n	80018bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_TIM_MspPostInit+0x64>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_TIM_MspPostInit+0x64>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_TIM_MspPostInit+0x64>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800189a:	2302      	movs	r3, #2
 800189c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f001 fd20 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0ac      	sub	sp, #176	; 0xb0
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2288      	movs	r2, #136	; 0x88
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f008 fbbf 	bl	800a06c <memset>
  if(huart->Instance==USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_UART_MspInit+0xc4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d144      	bne.n	8001982 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018fc:	2300      	movs	r3, #0
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fd65 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001910:	f7ff fecc 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_UART_MspInit+0xc8>)
 8001916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_UART_MspInit+0xc8>)
 800191a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191e:	6613      	str	r3, [r2, #96]	; 0x60
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_UART_MspInit+0xc8>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_UART_MspInit+0xc8>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_UART_MspInit+0xc8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_UART_MspInit+0xc8>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001944:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800195e:	2307      	movs	r3, #7
 8001960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f001 fcc5 	bl	80032fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2105      	movs	r1, #5
 8001976:	2025      	movs	r0, #37	; 0x25
 8001978:	f001 fc16 	bl	80031a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800197c:	2025      	movs	r0, #37	; 0x25
 800197e:	f001 fc2f 	bl	80031e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	37b0      	adds	r7, #176	; 0xb0
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40013800 	.word	0x40013800
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	2019      	movs	r0, #25
 80019aa:	f001 fbfd 	bl	80031a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019ae:	2019      	movs	r0, #25
 80019b0:	f001 fc16 	bl	80031e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_InitTick+0x9c>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_InitTick+0x9c>)
 80019ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019be:	6613      	str	r3, [r2, #96]	; 0x60
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_InitTick+0x9c>)
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019cc:	f107 0210 	add.w	r2, r7, #16
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fc6a 	bl	80042b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019dc:	f002 fc52 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 80019e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <HAL_InitTick+0xa0>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	3b01      	subs	r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_InitTick+0xa4>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <HAL_InitTick+0xa8>)
 80019f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_InitTick+0xa4>)
 80019f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_InitTick+0xa4>)
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_InitTick+0xa4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_InitTick+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_InitTick+0xa4>)
 8001a12:	f003 f9ab 	bl	8004d6c <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <HAL_InitTick+0xa4>)
 8001a1e:	f003 f9fd 	bl	8004e1c <HAL_TIM_Base_Start_IT>
 8001a22:	4603      	mov	r3, r0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3730      	adds	r7, #48	; 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	200011ac 	.word	0x200011ac
 8001a3c:	40012c00 	.word	0x40012c00

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a82:	f003 fc5d 	bl	8005340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200011ac 	.word	0x200011ac

08001a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM3_IRQHandler+0x10>)
 8001a96:	f003 fc53 	bl	8005340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20001020 	.word	0x20001020

08001aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001aa8:	f7ff fa06 	bl	8000eb8 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USART1_IRQHandler+0x14>)
 8001aae:	f004 fc89 	bl	80063c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200010d0 	.word	0x200010d0

08001abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8001ac0:	f7ff f99a 	bl	8000df8 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f008 fa80 	bl	8009ffc <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20018000 	.word	0x20018000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	200002f8 	.word	0x200002f8
 8001b30:	20001210 	.word	0x20001210

08001b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <SystemInit+0x5c>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <SystemInit+0x5c>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SystemInit+0x60>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <SystemInit+0x60>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <SystemInit+0x60>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <SystemInit+0x60>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <SystemInit+0x60>)
 8001b60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <SystemInit+0x60>)
 8001b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <SystemInit+0x60>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <SystemInit+0x60>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SystemInit+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00
 8001b94:	40021000 	.word	0x40021000

08001b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b9c:	f7ff ffca 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ba0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ba2:	e003      	b.n	8001bac <LoopCopyDataInit>

08001ba4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ba6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ba8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001baa:	3104      	adds	r1, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bac:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bb4:	d3f6      	bcc.n	8001ba4 <CopyDataInit>
	ldr	r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bb8:	e002      	b.n	8001bc0 <LoopFillZerobss>

08001bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bbc:	f842 3b04 	str.w	r3, [r2], #4

08001bc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <LoopForever+0x16>)
	cmp	r2, r3
 8001bc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bc4:	d3f9      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f008 fa1f 	bl	800a008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bca:	f7ff f9d5 	bl	8000f78 <main>

08001bce <LoopForever>:

LoopForever:
    b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001bd4:	0800a9e8 	.word	0x0800a9e8
	ldr	r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bdc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001be0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001be4:	2000120c 	.word	0x2000120c

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>

08001bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f001 facc 	bl	8003192 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f7ff feca 	bl	8001994 <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	e001      	b.n	8001c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c0c:	f7ff fd54 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200011f8 	.word	0x200011f8

08001c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3360      	adds	r3, #96	; 0x60
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <LL_ADC_SetOffset+0x44>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	03fff000 	.word	0x03fff000

08001ce4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3360      	adds	r3, #96	; 0x60
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3360      	adds	r3, #96	; 0x60
 8001d20:	461a      	mov	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3330      	adds	r3, #48	; 0x30
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	4413      	add	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	211f      	movs	r1, #31
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	f003 011f 	and.w	r1, r3, #31
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3314      	adds	r3, #20
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0e5b      	lsrs	r3, r3, #25
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0d1b      	lsrs	r3, r3, #20
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2107      	movs	r1, #7
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	401a      	ands	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0d1b      	lsrs	r3, r3, #20
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0318 	and.w	r3, r3, #24
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e40:	40d9      	lsrs	r1, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	400b      	ands	r3, r1
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	0007ffff 	.word	0x0007ffff

08001e64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 031f 	and.w	r3, r3, #31
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6093      	str	r3, [r2, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_IsEnabled+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_IsEnabled+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f9a:	f043 0204 	orr.w	r2, r3, #4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d101      	bne.n	8001fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e136      	b.n	8002284 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fb6f 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff3f 	bl	8001ec0 <LL_ADC_IsDeepPowerDownEnabled>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff25 	bl	8001e9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff5a 	bl	8001f10 <LL_ADC_IsInternalRegulatorEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff3e 	bl	8001ee8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800206c:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_ADC_Init+0x290>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	4a87      	ldr	r2, [pc, #540]	; (8002290 <HAL_ADC_Init+0x294>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	3301      	adds	r3, #1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002080:	e002      	b.n	8002088 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3b01      	subs	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff3c 	bl	8001f10 <LL_ADC_IsInternalRegulatorEnabled>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff75 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 80020c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 80cf 	bne.w	8002272 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 80cb 	bne.w	8002272 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020e4:	f043 0202 	orr.w	r2, r3, #2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff35 	bl	8001f60 <LL_ADC_IsEnabled>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020fc:	4865      	ldr	r0, [pc, #404]	; (8002294 <HAL_ADC_Init+0x298>)
 80020fe:	f7ff ff2f 	bl	8001f60 <LL_ADC_IsEnabled>
 8002102:	4604      	mov	r4, r0
 8002104:	4864      	ldr	r0, [pc, #400]	; (8002298 <HAL_ADC_Init+0x29c>)
 8002106:	f7ff ff2b 	bl	8001f60 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	431c      	orrs	r4, r3
 800210e:	4863      	ldr	r0, [pc, #396]	; (800229c <HAL_ADC_Init+0x2a0>)
 8002110:	f7ff ff26 	bl	8001f60 <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	4323      	orrs	r3, r4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4619      	mov	r1, r3
 8002122:	485f      	ldr	r0, [pc, #380]	; (80022a0 <HAL_ADC_Init+0x2a4>)
 8002124:	f7ff fd86 	bl	8001c34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e5b      	ldrb	r3, [r3, #25]
 800212c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002132:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002138:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800213e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002146:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d106      	bne.n	8002164 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	3b01      	subs	r3, #1
 800215c:	045b      	lsls	r3, r3, #17
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_ADC_Init+0x2a8>)
 8002188:	4013      	ands	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	430b      	orrs	r3, r1
 8002192:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff08 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 800219e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff15 	bl	8001fd4 <LL_ADC_INJ_IsConversionOngoing>
 80021aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d13d      	bne.n	800222e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d13a      	bne.n	800222e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021d4:	f023 0302 	bic.w	r3, r3, #2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	430b      	orrs	r3, r1
 80021e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d118      	bne.n	800221e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800220e:	430a      	orrs	r2, r1
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	e007      	b.n	800222e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10c      	bne.n	8002250 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f023 010f 	bic.w	r1, r3, #15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
 800224e:	e007      	b.n	8002260 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 020f 	bic.w	r2, r2, #15
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f023 0303 	bic.w	r3, r3, #3
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
 8002270:	e007      	b.n	8002282 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002282:	7ffb      	ldrb	r3, [r7, #31]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3724      	adds	r7, #36	; 0x24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	053e2d63 	.word	0x053e2d63
 8002294:	50040000 	.word	0x50040000
 8002298:	50040100 	.word	0x50040100
 800229c:	50040200 	.word	0x50040200
 80022a0:	50040300 	.word	0x50040300
 80022a4:	fff0c007 	.word	0xfff0c007

080022a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b0:	4857      	ldr	r0, [pc, #348]	; (8002410 <HAL_ADC_Start+0x168>)
 80022b2:	f7ff fdd7 	bl	8001e64 <LL_ADC_GetMultimode>
 80022b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fe76 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 809c 	bne.w	8002402 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_Start+0x30>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e097      	b.n	8002408 <HAL_ADC_Start+0x160>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fd71 	bl	8002dc8 <ADC_Enable>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 8083 	bne.w	80023f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a42      	ldr	r2, [pc, #264]	; (8002414 <HAL_ADC_Start+0x16c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d002      	beq.n	8002316 <HAL_ADC_Start+0x6e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	e000      	b.n	8002318 <HAL_ADC_Start+0x70>
 8002316:	4b40      	ldr	r3, [pc, #256]	; (8002418 <HAL_ADC_Start+0x170>)
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4293      	cmp	r3, r2
 800231e:	d002      	beq.n	8002326 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	d106      	bne.n	800234e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	f023 0206 	bic.w	r2, r3, #6
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	; 0x58
 800234c:	e002      	b.n	8002354 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	221c      	movs	r2, #28
 800235a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2a      	ldr	r2, [pc, #168]	; (8002414 <HAL_ADC_Start+0x16c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d002      	beq.n	8002374 <HAL_ADC_Start+0xcc>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e000      	b.n	8002376 <HAL_ADC_Start+0xce>
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_ADC_Start+0x170>)
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	4293      	cmp	r3, r2
 800237c:	d008      	beq.n	8002390 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d002      	beq.n	8002390 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d114      	bne.n	80023ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fde7 	bl	8001f86 <LL_ADC_REG_StartConversion>
 80023b8:	e025      	b.n	8002406 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_ADC_Start+0x16c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d002      	beq.n	80023d6 <HAL_ADC_Start+0x12e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	e000      	b.n	80023d8 <HAL_ADC_Start+0x130>
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_ADC_Start+0x170>)
 80023d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00f      	beq.n	8002406 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
 80023f6:	e006      	b.n	8002406 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002400:	e001      	b.n	8002406 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002406:	7dfb      	ldrb	r3, [r7, #23]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	50040300 	.word	0x50040300
 8002414:	50040100 	.word	0x50040100
 8002418:	50040000 	.word	0x50040000

0800241c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002426:	4866      	ldr	r0, [pc, #408]	; (80025c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002428:	f7ff fd1c 	bl	8001e64 <LL_ADC_GetMultimode>
 800242c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d102      	bne.n	800243c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002436:	2308      	movs	r3, #8
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e02a      	b.n	8002492 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d002      	beq.n	800244e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b09      	cmp	r3, #9
 800244c:	d111      	bne.n	8002472 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0a4      	b.n	80025b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800246c:	2304      	movs	r3, #4
 800246e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002470:	e00f      	b.n	8002492 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002472:	4853      	ldr	r0, [pc, #332]	; (80025c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002474:	f7ff fd04 	bl	8001e80 <LL_ADC_GetMultiDMATransfer>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0220 	orr.w	r2, r3, #32
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e093      	b.n	80025b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800248e:	2304      	movs	r3, #4
 8002490:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002492:	f7ff fbc3 	bl	8001c1c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002498:	e021      	b.n	80024de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d01d      	beq.n	80024de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024a2:	f7ff fbbb 	bl	8001c1c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <HAL_ADC_PollForConversion+0x9c>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d112      	bne.n	80024de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0204 	orr.w	r2, r3, #4
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e06b      	b.n	80025b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0d6      	beq.n	800249a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fc22 	bl	8001d46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01c      	beq.n	8002542 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e5b      	ldrb	r3, [r3, #25]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d118      	bne.n	8002542 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b08      	cmp	r3, #8
 800251c:	d111      	bne.n	8002542 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_ADC_PollForConversion+0x1a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d002      	beq.n	8002552 <HAL_ADC_PollForConversion+0x136>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e000      	b.n	8002554 <HAL_ADC_PollForConversion+0x138>
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_ADC_PollForConversion+0x1ac>)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4293      	cmp	r3, r2
 800255a:	d008      	beq.n	800256e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d002      	beq.n	800256e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b09      	cmp	r3, #9
 800256c:	d104      	bne.n	8002578 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e00c      	b.n	8002592 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_ADC_PollForConversion+0x1a8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d002      	beq.n	8002588 <HAL_ADC_PollForConversion+0x16c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e000      	b.n	800258a <HAL_ADC_PollForConversion+0x16e>
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_ADC_PollForConversion+0x1ac>)
 800258a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d104      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2208      	movs	r2, #8
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e008      	b.n	80025b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	220c      	movs	r2, #12
 80025b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	50040300 	.word	0x50040300
 80025c4:	50040100 	.word	0x50040100
 80025c8:	50040000 	.word	0x50040000

080025cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0b6      	sub	sp, #216	; 0xd8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_ADC_ConfigChannel+0x22>
 8002606:	2302      	movs	r3, #2
 8002608:	e3c7      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x7b2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fcc9 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 83a8 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b05      	cmp	r3, #5
 800262a:	d824      	bhi.n	8002676 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	3b02      	subs	r3, #2
 8002632:	2b03      	cmp	r3, #3
 8002634:	d81b      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x86>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <HAL_ADC_ConfigChannel+0x54>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800264d 	.word	0x0800264d
 8002640:	08002655 	.word	0x08002655
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002665 	.word	0x08002665
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	220c      	movs	r2, #12
 8002650:	605a      	str	r2, [r3, #4]
          break;
 8002652:	e011      	b.n	8002678 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2212      	movs	r2, #18
 8002658:	605a      	str	r2, [r3, #4]
          break;
 800265a:	e00d      	b.n	8002678 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2218      	movs	r2, #24
 8002660:	605a      	str	r2, [r3, #4]
          break;
 8002662:	e009      	b.n	8002678 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266a:	605a      	str	r2, [r3, #4]
          break;
 800266c:	e004      	b.n	8002678 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2206      	movs	r2, #6
 8002672:	605a      	str	r2, [r3, #4]
          break;
 8002674:	e000      	b.n	8002678 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002676:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	f7ff fb71 	bl	8001d6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fc8d 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 8002694:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fc99 	bl	8001fd4 <LL_ADC_INJ_IsConversionOngoing>
 80026a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 81a6 	bne.w	80029fc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 81a1 	bne.w	80029fc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f7ff fb7c 	bl	8001dc4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d00a      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026fe:	f7ff facd 	bl	8001c9c <LL_ADC_SetOffset>
 8002702:	e17b      	b.n	80029fc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff faea 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x148>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fadf 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	e01e      	b.n	800276e <HAL_ADC_ConfigChannel+0x186>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fad4 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800274e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e004      	b.n	800276c <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8002762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x19e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	e018      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1d0>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800279a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800279e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80027ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff faa3 	bl	8001d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2101      	movs	r1, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fa87 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fa7c 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	e01e      	b.n	8002834 <HAL_ADC_ConfigChannel+0x24c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fa71 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002814:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800281c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_ConfigChannel+0x264>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	e018      	b.n	800287e <HAL_ADC_ConfigChannel+0x296>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002860:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e004      	b.n	800287e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800287e:	429a      	cmp	r2, r3
 8002880:	d106      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fa40 	bl	8001d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2102      	movs	r1, #2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fa24 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x2d4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2102      	movs	r1, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fa19 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	e01e      	b.n	80028fa <HAL_ADC_ConfigChannel+0x312>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2102      	movs	r1, #2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fa0e 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x32a>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	e016      	b.n	8002940 <HAL_ADC_ConfigChannel+0x358>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800292a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002932:	2320      	movs	r3, #32
 8002934:	e004      	b.n	8002940 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002940:	429a      	cmp	r2, r3
 8002942:	d106      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f9df 	bl	8001d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2103      	movs	r1, #3
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f9c3 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_ADC_ConfigChannel+0x396>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2103      	movs	r1, #3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f9b8 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	0e9b      	lsrs	r3, r3, #26
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	e017      	b.n	80029ae <HAL_ADC_ConfigChannel+0x3c6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2103      	movs	r1, #3
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff f9ad 	bl	8001ce4 <LL_ADC_GetOffsetChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002998:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800299a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x3de>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	e011      	b.n	80029ea <HAL_ADC_ConfigChannel+0x402>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029de:	2320      	movs	r3, #32
 80029e0:	e003      	b.n	80029ea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d106      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2103      	movs	r1, #3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f98a 	bl	8001d10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff faad 	bl	8001f60 <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 813f 	bne.w	8002c8c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f7ff f9fe 	bl	8001e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a8e      	ldr	r2, [pc, #568]	; (8002c60 <HAL_ADC_ConfigChannel+0x678>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	f040 8130 	bne.w	8002c8c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x46c>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	bf94      	ite	ls
 8002a4c:	2301      	movls	r3, #1
 8002a4e:	2300      	movhi	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e019      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x4a0>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	bf94      	ite	ls
 8002a82:	2301      	movls	r3, #1
 8002a84:	2300      	movhi	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d079      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x4c0>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	069b      	lsls	r3, r3, #26
 8002aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa6:	e015      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4ec>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	069b      	lsls	r3, r3, #26
 8002ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x50c>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	e017      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x53c>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x562>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	051b      	lsls	r3, r3, #20
 8002b48:	e018      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x594>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e003      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	e080      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x5b4>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	3301      	adds	r3, #1
 8002b94:	069b      	lsls	r3, r3, #26
 8002b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b9a:	e015      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x5e0>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e003      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	069b      	lsls	r3, r3, #26
 8002bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x600>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	e017      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x630>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	ea42 0103 	orr.w	r1, r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x65c>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b1e      	subs	r3, #30
 8002c3c:	051b      	lsls	r3, r3, #20
 8002c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c42:	e01d      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x698>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	613b      	str	r3, [r7, #16]
  return result;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e005      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x684>
 8002c60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 021f 	and.w	r2, r3, #31
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	3b1e      	subs	r3, #30
 8002c7a:	051b      	lsls	r3, r3, #20
 8002c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c80:	430b      	orrs	r3, r1
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	6892      	ldr	r2, [r2, #8]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7ff f89c 	bl	8001dc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d07a      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c98:	4843      	ldr	r0, [pc, #268]	; (8002da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c9a:	f7fe fff1 	bl	8001c80 <LL_ADC_GetCommonPathInternalCh>
 8002c9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_ADC_ConfigChannel+0x7c4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d12c      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d126      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x6e4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d15d      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4834      	ldr	r0, [pc, #208]	; (8002da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cd8:	f7fe ffbf 	bl	8001c5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cdc:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	4a36      	ldr	r2, [pc, #216]	; (8002dbc <HAL_ADC_ConfigChannel+0x7d4>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cf6:	e002      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f9      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d04:	e040      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d118      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x75a>
 8002d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d112      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0x748>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d12d      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d38:	4619      	mov	r1, r3
 8002d3a:	481b      	ldr	r0, [pc, #108]	; (8002da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d3c:	f7fe ff8d 	bl	8001c5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d40:	e024      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d120      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11a      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d115      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480e      	ldr	r0, [pc, #56]	; (8002da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d6e:	f7fe ff74 	bl	8001c5a <LL_ADC_SetCommonPathInternalCh>
 8002d72:	e00c      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d86:	e002      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	37d8      	adds	r7, #216	; 0xd8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	80080000 	.word	0x80080000
 8002da8:	50040300 	.word	0x50040300
 8002dac:	c7520000 	.word	0xc7520000
 8002db0:	50040000 	.word	0x50040000
 8002db4:	50040200 	.word	0x50040200
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	053e2d63 	.word	0x053e2d63
 8002dc0:	cb840000 	.word	0xcb840000
 8002dc4:	80000001 	.word	0x80000001

08002dc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f8c3 	bl	8001f60 <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d14d      	bne.n	8002e7c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <ADC_Enable+0xc0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e039      	b.n	8002e7e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f892 	bl	8001f38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e14:	f7fe ff02 	bl	8001c1c <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1a:	e028      	b.n	8002e6e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f89d 	bl	8001f60 <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f881 	bl	8001f38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e36:	f7fe fef1 	bl	8001c1c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d914      	bls.n	8002e6e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00d      	beq.n	8002e6e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d1cf      	bne.n	8002e1c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	8000003f 	.word	0x8000003f

08002e8c <LL_ADC_IsEnabled>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_IsEnabled+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_IsEnabled+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d101      	bne.n	8002eca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b09f      	sub	sp, #124	; 0x7c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e093      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002efe:	2300      	movs	r3, #0
 8002f00:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f02:	2300      	movs	r3, #0
 8002f04:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d102      	bne.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f10:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	e001      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e072      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ffb9 	bl	8002eb2 <LL_ADC_REG_IsConversionOngoing>
 8002f40:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ffb3 	bl	8002eb2 <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d154      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d151      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02c      	beq.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f76:	035b      	lsls	r3, r3, #13
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f80:	4829      	ldr	r0, [pc, #164]	; (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f82:	f7ff ff83 	bl	8002e8c <LL_ADC_IsEnabled>
 8002f86:	4604      	mov	r4, r0
 8002f88:	4828      	ldr	r0, [pc, #160]	; (800302c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f8a:	f7ff ff7f 	bl	8002e8c <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	431c      	orrs	r4, r3
 8002f92:	4828      	ldr	r0, [pc, #160]	; (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f94:	f7ff ff7a 	bl	8002e8c <LL_ADC_IsEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4323      	orrs	r3, r4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d137      	bne.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fa8:	f023 030f 	bic.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6811      	ldr	r1, [r2, #0]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fbc:	e028      	b.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fca:	4817      	ldr	r0, [pc, #92]	; (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fcc:	f7ff ff5e 	bl	8002e8c <LL_ADC_IsEnabled>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	4816      	ldr	r0, [pc, #88]	; (800302c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fd4:	f7ff ff5a 	bl	8002e8c <LL_ADC_IsEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	431c      	orrs	r4, r3
 8002fdc:	4815      	ldr	r0, [pc, #84]	; (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fde:	f7ff ff55 	bl	8002e8c <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4323      	orrs	r3, r4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d112      	bne.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ff2:	f023 030f 	bic.w	r3, r3, #15
 8002ff6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ff8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffa:	e009      	b.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800300e:	e000      	b.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800301a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800301e:	4618      	mov	r0, r3
 8003020:	377c      	adds	r7, #124	; 0x7c
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	50040000 	.word	0x50040000
 800302c:	50040100 	.word	0x50040100
 8003030:	50040300 	.word	0x50040300
 8003034:	50040200 	.word	0x50040200

08003038 <__NVIC_SetPriorityGrouping>:
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ff4c 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ba:	f7ff ff61 	bl	8003080 <__NVIC_GetPriorityGrouping>
 80031be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	6978      	ldr	r0, [r7, #20]
 80031c6:	f7ff ffb1 	bl	800312c <NVIC_EncodePriority>
 80031ca:	4602      	mov	r2, r0
 80031cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff80 	bl	80030d8 <__NVIC_SetPriority>
}
 80031d8:	bf00      	nop
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ff54 	bl	800309c <__NVIC_EnableIRQ>
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d008      	beq.n	8003226 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2204      	movs	r2, #4
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 020e 	bic.w	r2, r2, #14
 8003234:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 021c 	and.w	r2, r3, #28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d005      	beq.n	800329c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2204      	movs	r2, #4
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	e029      	b.n	80032f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 020e 	bic.w	r2, r2, #14
 80032aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f003 021c 	and.w	r2, r3, #28
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    }
  }
  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e17f      	b.n	800360c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8171 	beq.w	8003606 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d00b      	beq.n	8003344 <HAL_GPIO_Init+0x48>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d007      	beq.n	8003344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003338:	2b11      	cmp	r3, #17
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b12      	cmp	r3, #18
 8003342:	d130      	bne.n	80033a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800337a:	2201      	movs	r2, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 0201 	and.w	r2, r3, #1
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d118      	bne.n	80033e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033b8:	2201      	movs	r2, #1
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	f003 0201 	and.w	r2, r3, #1
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x128>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b12      	cmp	r3, #18
 8003422:	d123      	bne.n	800346c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	08da      	lsrs	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3208      	adds	r2, #8
 800342c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220f      	movs	r2, #15
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	08da      	lsrs	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3208      	adds	r2, #8
 8003466:	6939      	ldr	r1, [r7, #16]
 8003468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	2203      	movs	r2, #3
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0203 	and.w	r2, r3, #3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80ac 	beq.w	8003606 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_GPIO_Init+0x330>)
 80034b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b2:	4a5e      	ldr	r2, [pc, #376]	; (800362c <HAL_GPIO_Init+0x330>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6613      	str	r3, [r2, #96]	; 0x60
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <HAL_GPIO_Init+0x330>)
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034c6:	4a5a      	ldr	r2, [pc, #360]	; (8003630 <HAL_GPIO_Init+0x334>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034f0:	d025      	beq.n	800353e <HAL_GPIO_Init+0x242>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4f      	ldr	r2, [pc, #316]	; (8003634 <HAL_GPIO_Init+0x338>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <HAL_GPIO_Init+0x23e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4e      	ldr	r2, [pc, #312]	; (8003638 <HAL_GPIO_Init+0x33c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d019      	beq.n	8003536 <HAL_GPIO_Init+0x23a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4d      	ldr	r2, [pc, #308]	; (800363c <HAL_GPIO_Init+0x340>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x236>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <HAL_GPIO_Init+0x344>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00d      	beq.n	800352e <HAL_GPIO_Init+0x232>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_GPIO_Init+0x348>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <HAL_GPIO_Init+0x22e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_GPIO_Init+0x34c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_GPIO_Init+0x22a>
 8003522:	2306      	movs	r3, #6
 8003524:	e00c      	b.n	8003540 <HAL_GPIO_Init+0x244>
 8003526:	2307      	movs	r3, #7
 8003528:	e00a      	b.n	8003540 <HAL_GPIO_Init+0x244>
 800352a:	2305      	movs	r3, #5
 800352c:	e008      	b.n	8003540 <HAL_GPIO_Init+0x244>
 800352e:	2304      	movs	r3, #4
 8003530:	e006      	b.n	8003540 <HAL_GPIO_Init+0x244>
 8003532:	2303      	movs	r3, #3
 8003534:	e004      	b.n	8003540 <HAL_GPIO_Init+0x244>
 8003536:	2302      	movs	r3, #2
 8003538:	e002      	b.n	8003540 <HAL_GPIO_Init+0x244>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_GPIO_Init+0x244>
 800353e:	2300      	movs	r3, #0
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	f002 0203 	and.w	r2, r2, #3
 8003546:	0092      	lsls	r2, r2, #2
 8003548:	4093      	lsls	r3, r2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003550:	4937      	ldr	r1, [pc, #220]	; (8003630 <HAL_GPIO_Init+0x334>)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	3302      	adds	r3, #2
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_GPIO_Init+0x350>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43db      	mvns	r3, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003582:	4a32      	ldr	r2, [pc, #200]	; (800364c <HAL_GPIO_Init+0x350>)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003588:	4b30      	ldr	r3, [pc, #192]	; (800364c <HAL_GPIO_Init+0x350>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ac:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_GPIO_Init+0x350>)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <HAL_GPIO_Init+0x350>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_GPIO_Init+0x350>)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_GPIO_Init+0x350>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003600:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_GPIO_Init+0x350>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa22 f303 	lsr.w	r3, r2, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	f47f ae78 	bne.w	800330c <HAL_GPIO_Init+0x10>
  }
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40010000 	.word	0x40010000
 8003634:	48000400 	.word	0x48000400
 8003638:	48000800 	.word	0x48000800
 800363c:	48000c00 	.word	0x48000c00
 8003640:	48001000 	.word	0x48001000
 8003644:	48001400 	.word	0x48001400
 8003648:	48001800 	.word	0x48001800
 800364c:	40010400 	.word	0x40010400

08003650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e001      	b.n	8003672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40007000 	.word	0x40007000

080036d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40007000 	.word	0x40007000

080036ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fa:	d130      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d038      	beq.n	800377c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2232      	movs	r2, #50	; 0x32
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9b      	lsrs	r3, r3, #18
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003730:	e002      	b.n	8003738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3b01      	subs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003744:	d102      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f2      	bne.n	8003732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003758:	d110      	bne.n	800377c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00f      	b.n	800377e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376a:	d007      	beq.n	800377c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003774:	4a05      	ldr	r2, [pc, #20]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800377a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000
 8003790:	20000000 	.word	0x20000000
 8003794:	431bde83 	.word	0x431bde83

08003798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e3d4      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037aa:	4ba1      	ldr	r3, [pc, #644]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b4:	4b9e      	ldr	r3, [pc, #632]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80e4 	beq.w	8003994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_RCC_OscConfig+0x4a>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	f040 808b 	bne.w	80038f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 8087 	bne.w	80038f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e2:	4b93      	ldr	r3, [pc, #588]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x62>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e3ac      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	4b8c      	ldr	r3, [pc, #560]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_RCC_OscConfig+0x7c>
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003812:	e005      	b.n	8003820 <HAL_RCC_OscConfig+0x88>
 8003814:	4b86      	ldr	r3, [pc, #536]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003820:	4293      	cmp	r3, r2
 8003822:	d223      	bcs.n	800386c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fd73 	bl	8004314 <RCC_SetFlashLatencyFromMSIRange>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e38d      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003838:	4b7d      	ldr	r3, [pc, #500]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a7c      	ldr	r2, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b7a      	ldr	r3, [pc, #488]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4977      	ldr	r1, [pc, #476]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	4972      	ldr	r1, [pc, #456]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 800386a:	e025      	b.n	80038b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800386c:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6f      	ldr	r2, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003872:	f043 0308 	orr.w	r3, r3, #8
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	496a      	ldr	r1, [pc, #424]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388a:	4b69      	ldr	r3, [pc, #420]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	4965      	ldr	r1, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fd33 	bl	8004314 <RCC_SetFlashLatencyFromMSIRange>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e34d      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038b8:	f000 fc36 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b5c      	ldr	r3, [pc, #368]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	495a      	ldr	r1, [pc, #360]	; (8003a34 <HAL_RCC_OscConfig+0x29c>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_OscConfig+0x2a0>)
 80038d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038d8:	4b58      	ldr	r3, [pc, #352]	; (8003a3c <HAL_RCC_OscConfig+0x2a4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe f859 	bl	8001994 <HAL_InitTick>
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d052      	beq.n	8003992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	e331      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d032      	beq.n	800395e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a4c      	ldr	r2, [pc, #304]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003904:	f7fe f98a 	bl	8001c1c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390c:	f7fe f986 	bl	8001c1c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e31a      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800391e:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	493b      	ldr	r1, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003948:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	4936      	ldr	r1, [pc, #216]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e01a      	b.n	8003994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a33      	ldr	r2, [pc, #204]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800396a:	f7fe f957 	bl	8001c1c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003972:	f7fe f953 	bl	8001c1c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e2e7      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x1da>
 8003990:	e000      	b.n	8003994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d074      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x21a>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d10e      	bne.n	80039ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d10b      	bne.n	80039ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d064      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d160      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e2c4      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x24a>
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e01d      	b.n	8003a1e <HAL_RCC_OscConfig+0x286>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x26e>
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e00b      	b.n	8003a1e <HAL_RCC_OscConfig+0x286>
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a06      	ldr	r2, [pc, #24]	; (8003a30 <HAL_RCC_OscConfig+0x298>)
 8003a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe f8f9 	bl	8001c1c <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2c:	e011      	b.n	8003a52 <HAL_RCC_OscConfig+0x2ba>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	0800a95c 	.word	0x0800a95c
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe f8ec 	bl	8001c1c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e280      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	4baf      	ldr	r3, [pc, #700]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x2a8>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe f8dc 	bl	8001c1c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe f8d8 	bl	8001c1c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e26c      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	4ba5      	ldr	r3, [pc, #660]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2d0>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d060      	beq.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x310>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d119      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	4b99      	ldr	r3, [pc, #612]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x328>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e249      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b93      	ldr	r3, [pc, #588]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	4990      	ldr	r1, [pc, #576]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad4:	e040      	b.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d023      	beq.n	8003b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a8b      	ldr	r2, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fe f897 	bl	8001c1c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fe f893 	bl	8001c1c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e227      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b04:	4b82      	ldr	r3, [pc, #520]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b7f      	ldr	r3, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	497c      	ldr	r1, [pc, #496]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	e018      	b.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b7a      	ldr	r3, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a79      	ldr	r2, [pc, #484]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fe f873 	bl	8001c1c <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe f86f 	bl	8001c1c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e203      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b4c:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d03c      	beq.n	8003bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b72:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fe f84e 	bl	8001c1c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fe f84a 	bl	8001c1c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1de      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b96:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3ec>
 8003ba4:	e01b      	b.n	8003bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b5a      	ldr	r3, [pc, #360]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb6:	f7fe f831 	bl	8001c1c <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fe f82d 	bl	8001c1c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e1c1      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd0:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ef      	bne.n	8003bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a6 	beq.w	8003d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4a43      	ldr	r2, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c18:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCC_OscConfig+0x57c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d118      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCC_OscConfig+0x57c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a3a      	ldr	r2, [pc, #232]	; (8003d14 <HAL_RCC_OscConfig+0x57c>)
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c30:	f7fd fff4 	bl	8001c1c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c38:	f7fd fff0 	bl	8001c1c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e184      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4a:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_RCC_OscConfig+0x57c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d108      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4d8>
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6e:	e024      	b.n	8003cba <HAL_RCC_OscConfig+0x522>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d110      	bne.n	8003c9a <HAL_RCC_OscConfig+0x502>
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c98:	e00f      	b.n	8003cba <HAL_RCC_OscConfig+0x522>
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fd ffab 	bl	8001c1c <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd ffa7 	bl	8001c1c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e139      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x578>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ed      	beq.n	8003cca <HAL_RCC_OscConfig+0x532>
 8003cee:	e01a      	b.n	8003d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd ff94 	bl	8001c1c <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf6:	e00f      	b.n	8003d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fd ff90 	bl	8001c1c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d906      	bls.n	8003d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e122      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d18:	4b90      	ldr	r3, [pc, #576]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e8      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b8b      	ldr	r3, [pc, #556]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	4a8a      	ldr	r2, [pc, #552]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8108 	beq.w	8003f52 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	f040 80d0 	bne.w	8003eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d4c:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d130      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d127      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d11f      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d8c:	2a07      	cmp	r2, #7
 8003d8e:	bf14      	ite	ne
 8003d90:	2201      	movne	r2, #1
 8003d92:	2200      	moveq	r2, #0
 8003d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d113      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d109      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d06e      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d069      	beq.n	8003e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0b7      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003de4:	4b5d      	ldr	r3, [pc, #372]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5c      	ldr	r2, [pc, #368]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df0:	f7fd ff14 	bl	8001c1c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd ff10 	bl	8001c1c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0a4      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0a:	4b54      	ldr	r3, [pc, #336]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e16:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	4b51      	ldr	r3, [pc, #324]	; (8003f60 <HAL_RCC_OscConfig+0x7c8>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e26:	3a01      	subs	r2, #1
 8003e28:	0112      	lsls	r2, r2, #4
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e30:	0212      	lsls	r2, r2, #8
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0552      	lsls	r2, r2, #21
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e44:	0852      	lsrs	r2, r2, #1
 8003e46:	3a01      	subs	r2, #1
 8003e48:	0652      	lsls	r2, r2, #25
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e50:	0912      	lsrs	r2, r2, #4
 8003e52:	0452      	lsls	r2, r2, #17
 8003e54:	430a      	orrs	r2, r1
 8003e56:	4941      	ldr	r1, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e68:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a3b      	ldr	r2, [pc, #236]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e74:	f7fd fed2 	bl	8001c1c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd fece 	bl	8001c1c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e062      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e9a:	e05a      	b.n	8003f52 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e059      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d152      	bne.n	8003f52 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ec4:	f7fd feaa 	bl	8001c1c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd fea6 	bl	8001c1c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e03a      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x734>
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d02d      	beq.n	8003f4e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003f10:	f023 0303 	bic.w	r3, r3, #3
 8003f14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003f1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd fe79 	bl	8001c1c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fd fe75 	bl	8001c1c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e009      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_OscConfig+0x7c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x796>
 8003f4c:	e001      	b.n	8003f52 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	f99d808c 	.word	0xf99d808c

08003f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0c8      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b66      	ldr	r3, [pc, #408]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d910      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b63      	ldr	r3, [pc, #396]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 0207 	bic.w	r2, r3, #7
 8003f8e:	4961      	ldr	r1, [pc, #388]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b0      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d04c      	beq.n	800404e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbc:	4b56      	ldr	r3, [pc, #344]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d121      	bne.n	800400c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e09e      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd4:	4b50      	ldr	r3, [pc, #320]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d115      	bne.n	800400c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e092      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fec:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e086      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e07e      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400c:	4b42      	ldr	r3, [pc, #264]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 0203 	bic.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	493f      	ldr	r1, [pc, #252]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401e:	f7fd fdfd 	bl	8001c1c <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004024:	e00a      	b.n	800403c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004026:	f7fd fdf9 	bl	8001c1c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e066      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403c:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 020c 	and.w	r2, r3, #12
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	429a      	cmp	r2, r3
 800404c:	d1eb      	bne.n	8004026 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	492c      	ldr	r1, [pc, #176]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800406c:	4b29      	ldr	r3, [pc, #164]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d210      	bcs.n	800409c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 0207 	bic.w	r2, r3, #7
 8004082:	4924      	ldr	r1, [pc, #144]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e036      	b.n	800410a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4918      	ldr	r1, [pc, #96]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4910      	ldr	r1, [pc, #64]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040da:	f000 f825 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_ClockConfig+0x1b4>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	490c      	ldr	r1, [pc, #48]	; (800411c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fc48 	bl	8001994 <HAL_InitTick>
 8004104:	4603      	mov	r3, r0
 8004106:	72fb      	strb	r3, [r7, #11]

  return status;
 8004108:	7afb      	ldrb	r3, [r7, #11]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000
 8004118:	40021000 	.word	0x40021000
 800411c:	0800a95c 	.word	0x0800a95c
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004140:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x34>
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d121      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d11e      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800415c:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004168:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e005      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004184:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d102      	bne.n	80041a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_GetSysClockFreq+0x110>)
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e004      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCC_GetSysClockFreq+0x114>)
 80041ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d134      	bne.n	8004220 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041b6:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0xa6>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d003      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0xac>
 80041cc:	e005      	b.n	80041da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <HAL_RCC_GetSysClockFreq+0x110>)
 80041d0:	617b      	str	r3, [r7, #20]
      break;
 80041d2:	e005      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_GetSysClockFreq+0x114>)
 80041d6:	617b      	str	r3, [r7, #20]
      break;
 80041d8:	e002      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	617b      	str	r3, [r7, #20]
      break;
 80041de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	3301      	adds	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	fb02 f203 	mul.w	r2, r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	0e5b      	lsrs	r3, r3, #25
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	3301      	adds	r3, #1
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004220:	69bb      	ldr	r3, [r7, #24]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3724      	adds	r7, #36	; 0x24
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	0800a974 	.word	0x0800a974
 8004238:	00f42400 	.word	0x00f42400
 800423c:	007a1200 	.word	0x007a1200

08004240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_GetHCLKFreq+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000000 	.word	0x20000000

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800425c:	f7ff fff0 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4904      	ldr	r1, [pc, #16]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	0800a96c 	.word	0x0800a96c

08004284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004288:	f7ff ffda 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0adb      	lsrs	r3, r3, #11
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	0800a96c 	.word	0x0800a96c

080042b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	220f      	movs	r2, #15
 80042be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0203 	and.w	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <HAL_RCC_GetClockConfig+0x60>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0207 	and.w	r2, r3, #7
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	40022000 	.word	0x40022000

08004314 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800432c:	f7ff f9d0 	bl	80036d0 <HAL_PWREx_GetVoltageRange>
 8004330:	6178      	str	r0, [r7, #20]
 8004332:	e014      	b.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433e:	6593      	str	r3, [r2, #88]	; 0x58
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800434c:	f7ff f9c0 	bl	80036d0 <HAL_PWREx_GetVoltageRange>
 8004350:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004364:	d10b      	bne.n	800437e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d919      	bls.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2ba0      	cmp	r3, #160	; 0xa0
 8004370:	d902      	bls.n	8004378 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004372:	2302      	movs	r3, #2
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e013      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004378:	2301      	movs	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	e010      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d902      	bls.n	800438a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004384:	2303      	movs	r3, #3
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e00a      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d102      	bne.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004390:	2302      	movs	r3, #2
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e004      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b70      	cmp	r3, #112	; 0x70
 800439a:	d101      	bne.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800439c:	2301      	movs	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 0207 	bic.w	r2, r3, #7
 80043a8:	4909      	ldr	r1, [pc, #36]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40022000 	.word	0x40022000

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043dc:	2300      	movs	r3, #0
 80043de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d041      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f8:	d02a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043fe:	d824      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800440a:	d81e      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d010      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004416:	e018      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004418:	4b86      	ldr	r3, [pc, #536]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a85      	ldr	r2, [pc, #532]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004422:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004424:	e015      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f000 facb 	bl	80049c8 <RCCEx_PLLSAI1_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004436:	e00c      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3320      	adds	r3, #32
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fbb6 	bl	8004bb0 <RCCEx_PLLSAI2_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004448:	e003      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	74fb      	strb	r3, [r7, #19]
      break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004458:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004466:	4973      	ldr	r1, [pc, #460]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800446e:	e001      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d041      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004488:	d02a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800448a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800448e:	d824      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004494:	d008      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800449a:	d81e      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a4:	d010      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044a6:	e018      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044a8:	4b62      	ldr	r3, [pc, #392]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a61      	ldr	r2, [pc, #388]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044b4:	e015      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fa83 	bl	80049c8 <RCCEx_PLLSAI1_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044c6:	e00c      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3320      	adds	r3, #32
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fb6e 	bl	8004bb0 <RCCEx_PLLSAI2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044d8:	e003      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	74fb      	strb	r3, [r7, #19]
      break;
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e8:	4b52      	ldr	r3, [pc, #328]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f6:	494f      	ldr	r1, [pc, #316]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044fe:	e001      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a0 	beq.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a40      	ldr	r2, [pc, #256]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
 8004538:	4b3e      	ldr	r3, [pc, #248]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004544:	2301      	movs	r3, #1
 8004546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800454e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004554:	f7fd fb62 	bl	8001c1c <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800455a:	e009      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fd fb5e 	bl	8001c1c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d902      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	74fb      	strb	r3, [r7, #19]
        break;
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004570:	4b31      	ldr	r3, [pc, #196]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d15c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004582:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01f      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	d019      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045a0:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fd fb1d 	bl	8001c1c <HAL_GetTick>
 80045e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e4:	e00b      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd fb19 	bl	8001c1c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d902      	bls.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	74fb      	strb	r3, [r7, #19]
            break;
 80045fc:	e006      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ec      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800462a:	e009      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	74bb      	strb	r3, [r7, #18]
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004640:	7c7b      	ldrb	r3, [r7, #17]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d105      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004646:	4b9e      	ldr	r3, [pc, #632]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	4a9d      	ldr	r2, [pc, #628]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465e:	4b98      	ldr	r3, [pc, #608]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f023 0203 	bic.w	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	4994      	ldr	r1, [pc, #592]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004680:	4b8f      	ldr	r3, [pc, #572]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f023 020c 	bic.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	498c      	ldr	r1, [pc, #560]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046a2:	4b87      	ldr	r3, [pc, #540]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	4983      	ldr	r1, [pc, #524]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046c4:	4b7e      	ldr	r3, [pc, #504]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	497b      	ldr	r1, [pc, #492]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046e6:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	4972      	ldr	r1, [pc, #456]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004708:	4b6d      	ldr	r3, [pc, #436]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	496a      	ldr	r1, [pc, #424]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	4961      	ldr	r1, [pc, #388]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800474c:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	4959      	ldr	r1, [pc, #356]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476e:	4b54      	ldr	r3, [pc, #336]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	4950      	ldr	r1, [pc, #320]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004790:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	4948      	ldr	r1, [pc, #288]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047b2:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	493f      	ldr	r1, [pc, #252]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d028      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d4:	4b3a      	ldr	r3, [pc, #232]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e2:	4937      	ldr	r1, [pc, #220]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f2:	d106      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]
 8004800:	e011      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480a:	d10c      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f8d8 	bl	80049c8 <RCCEx_PLLSAI1_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d028      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	491f      	ldr	r1, [pc, #124]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004850:	d106      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4a1a      	ldr	r2, [pc, #104]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485c:	60d3      	str	r3, [r2, #12]
 800485e:	e011      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004868:	d10c      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2101      	movs	r1, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f8a9 	bl	80049c8 <RCCEx_PLLSAI1_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489e:	4908      	ldr	r1, [pc, #32]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ae:	d109      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a02      	ldr	r2, [pc, #8]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ba:	60d3      	str	r3, [r2, #12]
 80048bc:	e014      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f877 	bl	80049c8 <RCCEx_PLLSAI1_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02f      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004902:	4928      	ldr	r1, [pc, #160]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800490e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004912:	d10d      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2102      	movs	r1, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f854 	bl	80049c8 <RCCEx_PLLSAI1_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d014      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
 800492e:	e011      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004938:	d10c      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3320      	adds	r3, #32
 800493e:	2102      	movs	r1, #2
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f935 	bl	8004bb0 <RCCEx_PLLSAI2_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004960:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496e:	490d      	ldr	r1, [pc, #52]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004992:	4904      	ldr	r1, [pc, #16]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800499a:	7cbb      	ldrb	r3, [r7, #18]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000

080049c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049d6:	4b75      	ldr	r3, [pc, #468]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d018      	beq.n	8004a14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0203 	and.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d10d      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
       ||
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
       ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d047      	beq.n	8004a9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	e044      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d018      	beq.n	8004a4e <RCCEx_PLLSAI1_Config+0x86>
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d825      	bhi.n	8004a6c <RCCEx_PLLSAI1_Config+0xa4>
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d002      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x62>
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d009      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x74>
 8004a28:	e020      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a2a:	4b60      	ldr	r3, [pc, #384]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11d      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a3a:	e01a      	b.n	8004a72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a3c:	4b5b      	ldr	r3, [pc, #364]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d116      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a4c:	e013      	b.n	8004a76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a4e:	4b57      	ldr	r3, [pc, #348]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a5a:	4b54      	ldr	r3, [pc, #336]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a6a:	e006      	b.n	8004a7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a70:	e004      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a72:	bf00      	nop
 8004a74:	e002      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	430b      	orrs	r3, r1
 8004a98:	4944      	ldr	r1, [pc, #272]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d17d      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004aa4:	4b41      	ldr	r3, [pc, #260]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a40      	ldr	r2, [pc, #256]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab0:	f7fd f8b4 	bl	8001c1c <HAL_GetTick>
 8004ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ab6:	e009      	b.n	8004acc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab8:	f7fd f8b0 	bl	8001c1c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d902      	bls.n	8004acc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8004aca:	e005      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004acc:	4b37      	ldr	r3, [pc, #220]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ef      	bne.n	8004ab8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d160      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d111      	bne.n	8004b08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6892      	ldr	r2, [r2, #8]
 8004af4:	0211      	lsls	r1, r2, #8
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	0912      	lsrs	r2, r2, #4
 8004afc:	0452      	lsls	r2, r2, #17
 8004afe:	430a      	orrs	r2, r1
 8004b00:	492a      	ldr	r1, [pc, #168]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	610b      	str	r3, [r1, #16]
 8004b06:	e027      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d112      	bne.n	8004b34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b0e:	4b27      	ldr	r3, [pc, #156]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6892      	ldr	r2, [r2, #8]
 8004b1e:	0211      	lsls	r1, r2, #8
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6912      	ldr	r2, [r2, #16]
 8004b24:	0852      	lsrs	r2, r2, #1
 8004b26:	3a01      	subs	r2, #1
 8004b28:	0552      	lsls	r2, r2, #21
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	491f      	ldr	r1, [pc, #124]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	610b      	str	r3, [r1, #16]
 8004b32:	e011      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6952      	ldr	r2, [r2, #20]
 8004b4a:	0852      	lsrs	r2, r2, #1
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0652      	lsls	r2, r2, #25
 8004b50:	430a      	orrs	r2, r1
 8004b52:	4916      	ldr	r1, [pc, #88]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7fd f85a 	bl	8001c1c <HAL_GetTick>
 8004b68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b6a:	e009      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b6c:	f7fd f856 	bl	8001c1c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d902      	bls.n	8004b80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b7e:	e005      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ef      	beq.n	8004b6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	4904      	ldr	r1, [pc, #16]	; (8004bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000

08004bb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d018      	beq.n	8004bfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bca:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d10d      	bne.n	8004bf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004be2:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d047      	beq.n	8004c86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e044      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d018      	beq.n	8004c36 <RCCEx_PLLSAI2_Config+0x86>
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d825      	bhi.n	8004c54 <RCCEx_PLLSAI2_Config+0xa4>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d002      	beq.n	8004c12 <RCCEx_PLLSAI2_Config+0x62>
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d009      	beq.n	8004c24 <RCCEx_PLLSAI2_Config+0x74>
 8004c10:	e020      	b.n	8004c54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c12:	4b55      	ldr	r3, [pc, #340]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e01a      	b.n	8004c5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c24:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e013      	b.n	8004c5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c36:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c42:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c52:	e006      	b.n	8004c62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e004      	b.n	8004c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c6a:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	4939      	ldr	r1, [pc, #228]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d167      	bne.n	8004d5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c8c:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a35      	ldr	r2, [pc, #212]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc ffc0 	bl	8001c1c <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c9e:	e009      	b.n	8004cb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ca0:	f7fc ffbc 	bl	8001c1c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d902      	bls.n	8004cb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cb2:	e005      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ef      	bne.n	8004ca0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d14a      	bne.n	8004d5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ccc:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	0912      	lsrs	r2, r2, #4
 8004ce4:	0452      	lsls	r2, r2, #17
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	491f      	ldr	r1, [pc, #124]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	614b      	str	r3, [r1, #20]
 8004cee:	e011      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	0211      	lsls	r1, r2, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6912      	ldr	r2, [r2, #16]
 8004d06:	0852      	lsrs	r2, r2, #1
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	0652      	lsls	r2, r2, #25
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	4916      	ldr	r1, [pc, #88]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fc ff7c 	bl	8001c1c <HAL_GetTick>
 8004d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d26:	e009      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d28:	f7fc ff78 	bl	8001c1c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	73fb      	strb	r3, [r7, #15]
          break;
 8004d3a:	e005      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	4904      	ldr	r1, [pc, #16]	; (8004d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000

08004d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e049      	b.n	8004e12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc fd3e 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 fde6 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d001      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e04f      	b.n	8004ed4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a23      	ldr	r2, [pc, #140]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01d      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x76>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5e:	d018      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x76>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x76>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00e      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x76>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <HAL_TIM_Base_Start_IT+0xd0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x76>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x76>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d115      	bne.n	8004ebe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b06      	cmp	r3, #6
 8004ea2:	d015      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0xb4>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eaa:	d011      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	e008      	b.n	8004ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e000      	b.n	8004ed2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	00010007 	.word	0x00010007

08004efc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a1a      	ldr	r2, [r3, #32]
 8004f1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10f      	bne.n	8004f44 <HAL_TIM_Base_Stop_IT+0x48>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	f240 4344 	movw	r3, #1092	; 0x444
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_Base_Stop_IT+0x48>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e049      	b.n	8005000 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fc fc29 	bl	80017d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f000 fcef 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_TIM_PWM_Start+0x24>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e03c      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d109      	bne.n	8005046 <HAL_TIM_PWM_Start+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e02f      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d109      	bne.n	8005060 <HAL_TIM_PWM_Start+0x58>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e022      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d109      	bne.n	800507a <HAL_TIM_PWM_Start+0x72>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e015      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d109      	bne.n	8005094 <HAL_TIM_PWM_Start+0x8c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e008      	b.n	80050a6 <HAL_TIM_PWM_Start+0x9e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e09c      	b.n	80051e8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Start+0xb6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050bc:	e023      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0xc6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050cc:	e01b      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0xd6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050dc:	e013      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0xe6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ec:	e00b      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0xf6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fc:	e003      	b.n	8005106 <HAL_TIM_PWM_Start+0xfe>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f001 f83e 	bl	8006190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a35      	ldr	r2, [pc, #212]	; (80051f0 <HAL_TIM_PWM_Start+0x1e8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <HAL_TIM_PWM_Start+0x1ec>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a32      	ldr	r2, [pc, #200]	; (80051f8 <HAL_TIM_PWM_Start+0x1f0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a31      	ldr	r2, [pc, #196]	; (80051fc <HAL_TIM_PWM_Start+0x1f4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIM_PWM_Start+0x13e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2f      	ldr	r2, [pc, #188]	; (8005200 <HAL_TIM_PWM_Start+0x1f8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_TIM_PWM_Start+0x142>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_TIM_PWM_Start+0x144>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <HAL_TIM_PWM_Start+0x1e8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01d      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x19e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d018      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x19e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a22      	ldr	r2, [pc, #136]	; (8005204 <HAL_TIM_PWM_Start+0x1fc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x19e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	; (8005208 <HAL_TIM_PWM_Start+0x200>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x19e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	; (800520c <HAL_TIM_PWM_Start+0x204>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x19e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <HAL_TIM_PWM_Start+0x1ec>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x19e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <HAL_TIM_PWM_Start+0x1f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d115      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	4b18      	ldr	r3, [pc, #96]	; (8005210 <HAL_TIM_PWM_Start+0x208>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d015      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x1dc>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051be:	d011      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	e008      	b.n	80051e4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e000      	b.n	80051e6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40014400 	.word	0x40014400
 8005200:	40014800 	.word	0x40014800
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	00010007 	.word	0x00010007

08005214 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 ffb2 	bl	8006190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3e      	ldr	r2, [pc, #248]	; (800532c <HAL_TIM_PWM_Stop+0x118>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_PWM_Stop+0x4a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3d      	ldr	r2, [pc, #244]	; (8005330 <HAL_TIM_PWM_Stop+0x11c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Stop+0x4a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3b      	ldr	r2, [pc, #236]	; (8005334 <HAL_TIM_PWM_Stop+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Stop+0x4a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3a      	ldr	r2, [pc, #232]	; (8005338 <HAL_TIM_PWM_Stop+0x124>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Stop+0x4a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a38      	ldr	r2, [pc, #224]	; (800533c <HAL_TIM_PWM_Stop+0x128>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_TIM_PWM_Stop+0x4e>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_TIM_PWM_Stop+0x50>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <HAL_TIM_PWM_Stop+0x84>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	f240 4344 	movw	r3, #1092	; 0x444
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d107      	bne.n	8005298 <HAL_TIM_PWM_Stop+0x84>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	f241 1311 	movw	r3, #4369	; 0x1111
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10f      	bne.n	80052c8 <HAL_TIM_PWM_Stop+0xb4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	f240 4344 	movw	r3, #1092	; 0x444
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_PWM_Stop+0xb4>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_PWM_Stop+0xc4>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d6:	e023      	b.n	8005320 <HAL_TIM_PWM_Stop+0x10c>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_PWM_Stop+0xd4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e6:	e01b      	b.n	8005320 <HAL_TIM_PWM_Stop+0x10c>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d104      	bne.n	80052f8 <HAL_TIM_PWM_Stop+0xe4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f6:	e013      	b.n	8005320 <HAL_TIM_PWM_Stop+0x10c>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d104      	bne.n	8005308 <HAL_TIM_PWM_Stop+0xf4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005306:	e00b      	b.n	8005320 <HAL_TIM_PWM_Stop+0x10c>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b10      	cmp	r3, #16
 800530c:	d104      	bne.n	8005318 <HAL_TIM_PWM_Stop+0x104>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005316:	e003      	b.n	8005320 <HAL_TIM_PWM_Stop+0x10c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0202 	mvn.w	r2, #2
 800536c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fadc 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 face 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fadf 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0204 	mvn.w	r2, #4
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fab2 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 faa4 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fab5 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0208 	mvn.w	r2, #8
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2204      	movs	r2, #4
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa88 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa7a 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa8b 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b10      	cmp	r3, #16
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b10      	cmp	r3, #16
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0210 	mvn.w	r2, #16
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2208      	movs	r2, #8
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa5e 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa50 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa61 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0201 	mvn.w	r2, #1
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fc f8bc 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b80      	cmp	r3, #128	; 0x80
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 ff08 	bl	8006300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fefb 	bl	8006314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d10e      	bne.n	800554a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	d107      	bne.n	800554a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa0f 	bl	8005968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d10e      	bne.n	8005576 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d107      	bne.n	8005576 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0220 	mvn.w	r2, #32
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 febb 	bl	80062ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005596:	2302      	movs	r3, #2
 8005598:	e0fd      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x216>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b14      	cmp	r3, #20
 80055a6:	f200 80f0 	bhi.w	800578a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	08005605 	.word	0x08005605
 80055b4:	0800578b 	.word	0x0800578b
 80055b8:	0800578b 	.word	0x0800578b
 80055bc:	0800578b 	.word	0x0800578b
 80055c0:	08005645 	.word	0x08005645
 80055c4:	0800578b 	.word	0x0800578b
 80055c8:	0800578b 	.word	0x0800578b
 80055cc:	0800578b 	.word	0x0800578b
 80055d0:	08005687 	.word	0x08005687
 80055d4:	0800578b 	.word	0x0800578b
 80055d8:	0800578b 	.word	0x0800578b
 80055dc:	0800578b 	.word	0x0800578b
 80055e0:	080056c7 	.word	0x080056c7
 80055e4:	0800578b 	.word	0x0800578b
 80055e8:	0800578b 	.word	0x0800578b
 80055ec:	0800578b 	.word	0x0800578b
 80055f0:	08005709 	.word	0x08005709
 80055f4:	0800578b 	.word	0x0800578b
 80055f8:	0800578b 	.word	0x0800578b
 80055fc:	0800578b 	.word	0x0800578b
 8005600:	08005749 	.word	0x08005749
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fa50 	bl	8005ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0204 	bic.w	r2, r2, #4
 800562e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6999      	ldr	r1, [r3, #24]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	619a      	str	r2, [r3, #24]
      break;
 8005642:	e0a3      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fac0 	bl	8005bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	021a      	lsls	r2, r3, #8
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	619a      	str	r2, [r3, #24]
      break;
 8005684:	e082      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fb29 	bl	8005ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0208 	orr.w	r2, r2, #8
 80056a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0204 	bic.w	r2, r2, #4
 80056b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69d9      	ldr	r1, [r3, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	61da      	str	r2, [r3, #28]
      break;
 80056c4:	e062      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fb91 	bl	8005df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	021a      	lsls	r2, r3, #8
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	61da      	str	r2, [r3, #28]
      break;
 8005706:	e041      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fbda 	bl	8005ec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005746:	e021      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fc1e 	bl	8005f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005788:	e000      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800578a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop

080057a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_ConfigClockSource+0x18>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0b5      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d03e      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0xd4>
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fa:	f200 8087 	bhi.w	800590c <HAL_TIM_ConfigClockSource+0x16c>
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	f000 8085 	beq.w	8005910 <HAL_TIM_ConfigClockSource+0x170>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	d87f      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b70      	cmp	r3, #112	; 0x70
 800580e:	d01a      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xa6>
 8005810:	2b70      	cmp	r3, #112	; 0x70
 8005812:	d87b      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b60      	cmp	r3, #96	; 0x60
 8005816:	d050      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x11a>
 8005818:	2b60      	cmp	r3, #96	; 0x60
 800581a:	d877      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b50      	cmp	r3, #80	; 0x50
 800581e:	d03c      	beq.n	800589a <HAL_TIM_ConfigClockSource+0xfa>
 8005820:	2b50      	cmp	r3, #80	; 0x50
 8005822:	d873      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d058      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x13a>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d86f      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b30      	cmp	r3, #48	; 0x30
 800582e:	d064      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d86b      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d060      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d867      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b00      	cmp	r3, #0
 800583e:	d05c      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	2b10      	cmp	r3, #16
 8005842:	d05a      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005844:	e062      	b.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6899      	ldr	r1, [r3, #8]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f000 fc7b 	bl	8006150 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005868:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	609a      	str	r2, [r3, #8]
      break;
 8005872:	e04e      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f000 fc64 	bl	8006150 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005896:	609a      	str	r2, [r3, #8]
      break;
 8005898:	e03b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f000 fbd8 	bl	800605c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2150      	movs	r1, #80	; 0x50
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fc31 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 80058b8:	e02b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 fbf7 	bl	80060ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2160      	movs	r1, #96	; 0x60
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fc21 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 80058d8:	e01b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 fbb8 	bl	800605c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fc11 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 80058f8:	e00b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 fc08 	bl	800611a <TIM_ITRx_SetConfig>
        break;
 800590a:	e002      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a40      	ldr	r2, [pc, #256]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d00f      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3d      	ldr	r2, [pc, #244]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <TIM_Base_SetConfig+0x120>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3a      	ldr	r2, [pc, #232]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d108      	bne.n	80059ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01f      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d01b      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d017      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <TIM_Base_SetConfig+0x120>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00f      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a28      	ldr	r2, [pc, #160]	; (8005aa4 <TIM_Base_SetConfig+0x128>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_Base_SetConfig+0x9a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <TIM_Base_SetConfig+0x130>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d108      	bne.n	8005a28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00f      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a11      	ldr	r2, [pc, #68]	; (8005aa4 <TIM_Base_SetConfig+0x128>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a10      	ldr	r2, [pc, #64]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0f      	ldr	r2, [pc, #60]	; (8005aac <TIM_Base_SetConfig+0x130>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d103      	bne.n	8005a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 0302 	bic.w	r3, r3, #2
 8005afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <TIM_OC1_SetConfig+0x10c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_OC1_SetConfig+0x80>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <TIM_OC1_SetConfig+0x110>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_OC1_SetConfig+0x80>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <TIM_OC1_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_OC1_SetConfig+0x80>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <TIM_OC1_SetConfig+0x118>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_OC1_SetConfig+0x80>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <TIM_OC1_SetConfig+0x11c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10c      	bne.n	8005b4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0308 	bic.w	r3, r3, #8
 8005b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <TIM_OC1_SetConfig+0x10c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_OC1_SetConfig+0xc2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <TIM_OC1_SetConfig+0x110>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_OC1_SetConfig+0xc2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <TIM_OC1_SetConfig+0x114>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_OC1_SetConfig+0xc2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <TIM_OC1_SetConfig+0x118>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC1_SetConfig+0xc2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <TIM_OC1_SetConfig+0x11c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0210 	bic.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0320 	bic.w	r3, r3, #32
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <TIM_OC2_SetConfig+0x100>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC2_SetConfig+0x6c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <TIM_OC2_SetConfig+0x104>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10d      	bne.n	8005c58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <TIM_OC2_SetConfig+0x100>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00f      	beq.n	8005c80 <TIM_OC2_SetConfig+0xb0>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <TIM_OC2_SetConfig+0x104>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_OC2_SetConfig+0xb0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <TIM_OC2_SetConfig+0x108>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_OC2_SetConfig+0xb0>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <TIM_OC2_SetConfig+0x10c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC2_SetConfig+0xb0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <TIM_OC2_SetConfig+0x110>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d113      	bne.n	8005ca8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40013400 	.word	0x40013400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <TIM_OC3_SetConfig+0xfc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC3_SetConfig+0x6a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <TIM_OC3_SetConfig+0x100>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10d      	bne.n	8005d6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <TIM_OC3_SetConfig+0xfc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00f      	beq.n	8005d92 <TIM_OC3_SetConfig+0xae>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <TIM_OC3_SetConfig+0x100>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <TIM_OC3_SetConfig+0xae>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <TIM_OC3_SetConfig+0x104>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <TIM_OC3_SetConfig+0xae>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a19      	ldr	r2, [pc, #100]	; (8005dec <TIM_OC3_SetConfig+0x108>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC3_SetConfig+0xae>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <TIM_OC3_SetConfig+0x10c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d113      	bne.n	8005dba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	031b      	lsls	r3, r3, #12
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <TIM_OC4_SetConfig+0xc0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00f      	beq.n	8005e78 <TIM_OC4_SetConfig+0x84>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <TIM_OC4_SetConfig+0xc4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_OC4_SetConfig+0x84>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <TIM_OC4_SetConfig+0xc8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_OC4_SetConfig+0x84>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <TIM_OC4_SetConfig+0xcc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC4_SetConfig+0x84>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <TIM_OC4_SetConfig+0xd0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d109      	bne.n	8005e8c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800

08005ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <TIM_OC5_SetConfig+0xb4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00f      	beq.n	8005f42 <TIM_OC5_SetConfig+0x7a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <TIM_OC5_SetConfig+0xb8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <TIM_OC5_SetConfig+0x7a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <TIM_OC5_SetConfig+0xbc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <TIM_OC5_SetConfig+0x7a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <TIM_OC5_SetConfig+0xc0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC5_SetConfig+0x7a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <TIM_OC5_SetConfig+0xc4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d109      	bne.n	8005f56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	621a      	str	r2, [r3, #32]
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40014400 	.word	0x40014400
 8005f8c:	40014800 	.word	0x40014800

08005f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <TIM_OC6_SetConfig+0xb8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00f      	beq.n	800600c <TIM_OC6_SetConfig+0x7c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <TIM_OC6_SetConfig+0xbc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00b      	beq.n	800600c <TIM_OC6_SetConfig+0x7c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <TIM_OC6_SetConfig+0xc0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d007      	beq.n	800600c <TIM_OC6_SetConfig+0x7c>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a15      	ldr	r2, [pc, #84]	; (8006054 <TIM_OC6_SetConfig+0xc4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC6_SetConfig+0x7c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a14      	ldr	r2, [pc, #80]	; (8006058 <TIM_OC6_SetConfig+0xc8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40013400 	.word	0x40013400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 030a 	bic.w	r3, r3, #10
 8006098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0210 	bic.w	r2, r3, #16
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	f043 0307 	orr.w	r3, r3, #7
 800613c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2201      	movs	r2, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e068      	b.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2e      	ldr	r2, [pc, #184]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2d      	ldr	r2, [pc, #180]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800622e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006240:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006266:	d018      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1b      	ldr	r2, [pc, #108]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10c      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40014000 	.word	0x40014000

080062ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e040      	b.n	80063bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fb fabc 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa4e 	bl	8006808 <UART_SetConfig>
 800636c:	4603      	mov	r3, r0
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e022      	b.n	80063bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fccc 	bl	8006d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fd53 	bl	8006e60 <UART_CheckIdleState>
 80063ba:	4603      	mov	r3, r0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80063ea:	4013      	ands	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d113      	bne.n	800641c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 81ce 	beq.w	80067ae <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      }
      return;
 800641a:	e1c8      	b.n	80067ae <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80e3 	beq.w	80065ea <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d105      	bne.n	800643a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4ba6      	ldr	r3, [pc, #664]	; (80066cc <HAL_UART_IRQHandler+0x308>)
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80d8 	beq.w	80065ea <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <HAL_UART_IRQHandler+0xa2>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_UART_IRQHandler+0xce>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2202      	movs	r2, #2
 8006480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006488:	f043 0204 	orr.w	r2, r3, #4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <HAL_UART_IRQHandler+0xfa>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2204      	movs	r2, #4
 80064ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b4:	f043 0202 	orr.w	r2, r3, #2
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2208      	movs	r2, #8
 80064e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ea:	f043 0208 	orr.w	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_UART_IRQHandler+0x15e>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8142 	beq.w	80067b2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00c      	beq.n	8006552 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006558:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	d004      	beq.n	8006572 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800656e:	2b00      	cmp	r3, #0
 8006570:	d031      	beq.n	80065d6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fd39 	bl	8006fea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d123      	bne.n	80065ce <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006594:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	2b00      	cmp	r3, #0
 800659c:	d013      	beq.n	80065c6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a4b      	ldr	r2, [pc, #300]	; (80066d0 <HAL_UART_IRQHandler+0x30c>)
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fc fe64 	bl	8003278 <HAL_DMA_Abort_IT>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d017      	beq.n	80065e6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c4:	e00f      	b.n	80065e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f908 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	e00b      	b.n	80065e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f904 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	e007      	b.n	80065e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f900 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065e4:	e0e5      	b.n	80067b2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e6:	bf00      	nop
    return;
 80065e8:	e0e3      	b.n	80067b2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	f040 80a9 	bne.w	8006746 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0310 	and.w	r3, r3, #16
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a3 	beq.w	8006746 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809d 	beq.w	8006746 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2210      	movs	r2, #16
 8006612:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d158      	bne.n	80066d4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800662c:	893b      	ldrh	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80c1 	beq.w	80067b6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800663a:	893a      	ldrh	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	f080 80ba 	bcs.w	80067b6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	893a      	ldrh	r2, [r7, #8]
 8006646:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d12a      	bne.n	80066b0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006668:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0201 	bic.w	r2, r2, #1
 8006678:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006688:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0210 	bic.w	r2, r2, #16
 80066a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fc fda6 	bl	80031fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f893 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066ca:	e074      	b.n	80067b6 <HAL_UART_IRQHandler+0x3f2>
 80066cc:	04000120 	.word	0x04000120
 80066d0:	08007049 	.word	0x08007049
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d063      	beq.n	80067ba <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d060      	beq.n	80067ba <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006706:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0210 	bic.w	r2, r2, #16
 8006738:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f856 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006744:	e039      	b.n	80067ba <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <HAL_UART_IRQHandler+0x3a8>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006762:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc9e 	bl	80070a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800676a:	e029      	b.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01a      	beq.n	80067be <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
    }
    return;
 8006790:	e015      	b.n	80067be <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d011      	beq.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00c      	beq.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fc64 	bl	8007074 <UART_EndTransmit_IT>
    return;
 80067ac:	e008      	b.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80067ae:	bf00      	nop
 80067b0:	e006      	b.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80067b2:	bf00      	nop
 80067b4:	e004      	b.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80067b6:	bf00      	nop
 80067b8:	e002      	b.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80067be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop

080067c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	b5b0      	push	{r4, r5, r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	4313      	orrs	r3, r2
 800682a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4bad      	ldr	r3, [pc, #692]	; (8006ae8 <UART_SetConfig+0x2e0>)
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	69f9      	ldr	r1, [r7, #28]
 800683c:	430b      	orrs	r3, r1
 800683e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4aa2      	ldr	r2, [pc, #648]	; (8006aec <UART_SetConfig+0x2e4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	4313      	orrs	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a99      	ldr	r2, [pc, #612]	; (8006af0 <UART_SetConfig+0x2e8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d121      	bne.n	80068d2 <UART_SetConfig+0xca>
 800688e:	4b99      	ldr	r3, [pc, #612]	; (8006af4 <UART_SetConfig+0x2ec>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b03      	cmp	r3, #3
 800689a:	d817      	bhi.n	80068cc <UART_SetConfig+0xc4>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0x9c>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068bb 	.word	0x080068bb
 80068b0:	080068c7 	.word	0x080068c7
 80068b4:	2301      	movs	r3, #1
 80068b6:	76fb      	strb	r3, [r7, #27]
 80068b8:	e0e7      	b.n	8006a8a <UART_SetConfig+0x282>
 80068ba:	2302      	movs	r3, #2
 80068bc:	76fb      	strb	r3, [r7, #27]
 80068be:	e0e4      	b.n	8006a8a <UART_SetConfig+0x282>
 80068c0:	2304      	movs	r3, #4
 80068c2:	76fb      	strb	r3, [r7, #27]
 80068c4:	e0e1      	b.n	8006a8a <UART_SetConfig+0x282>
 80068c6:	2308      	movs	r3, #8
 80068c8:	76fb      	strb	r3, [r7, #27]
 80068ca:	e0de      	b.n	8006a8a <UART_SetConfig+0x282>
 80068cc:	2310      	movs	r3, #16
 80068ce:	76fb      	strb	r3, [r7, #27]
 80068d0:	e0db      	b.n	8006a8a <UART_SetConfig+0x282>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a88      	ldr	r2, [pc, #544]	; (8006af8 <UART_SetConfig+0x2f0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d132      	bne.n	8006942 <UART_SetConfig+0x13a>
 80068dc:	4b85      	ldr	r3, [pc, #532]	; (8006af4 <UART_SetConfig+0x2ec>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b0c      	cmp	r3, #12
 80068e8:	d828      	bhi.n	800693c <UART_SetConfig+0x134>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0xe8>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006925 	.word	0x08006925
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	0800693d 	.word	0x0800693d
 80068fc:	0800693d 	.word	0x0800693d
 8006900:	08006931 	.word	0x08006931
 8006904:	0800693d 	.word	0x0800693d
 8006908:	0800693d 	.word	0x0800693d
 800690c:	0800693d 	.word	0x0800693d
 8006910:	0800692b 	.word	0x0800692b
 8006914:	0800693d 	.word	0x0800693d
 8006918:	0800693d 	.word	0x0800693d
 800691c:	0800693d 	.word	0x0800693d
 8006920:	08006937 	.word	0x08006937
 8006924:	2300      	movs	r3, #0
 8006926:	76fb      	strb	r3, [r7, #27]
 8006928:	e0af      	b.n	8006a8a <UART_SetConfig+0x282>
 800692a:	2302      	movs	r3, #2
 800692c:	76fb      	strb	r3, [r7, #27]
 800692e:	e0ac      	b.n	8006a8a <UART_SetConfig+0x282>
 8006930:	2304      	movs	r3, #4
 8006932:	76fb      	strb	r3, [r7, #27]
 8006934:	e0a9      	b.n	8006a8a <UART_SetConfig+0x282>
 8006936:	2308      	movs	r3, #8
 8006938:	76fb      	strb	r3, [r7, #27]
 800693a:	e0a6      	b.n	8006a8a <UART_SetConfig+0x282>
 800693c:	2310      	movs	r3, #16
 800693e:	76fb      	strb	r3, [r7, #27]
 8006940:	e0a3      	b.n	8006a8a <UART_SetConfig+0x282>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a6d      	ldr	r2, [pc, #436]	; (8006afc <UART_SetConfig+0x2f4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d120      	bne.n	800698e <UART_SetConfig+0x186>
 800694c:	4b69      	ldr	r3, [pc, #420]	; (8006af4 <UART_SetConfig+0x2ec>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d013      	beq.n	8006982 <UART_SetConfig+0x17a>
 800695a:	2b30      	cmp	r3, #48	; 0x30
 800695c:	d814      	bhi.n	8006988 <UART_SetConfig+0x180>
 800695e:	2b20      	cmp	r3, #32
 8006960:	d009      	beq.n	8006976 <UART_SetConfig+0x16e>
 8006962:	2b20      	cmp	r3, #32
 8006964:	d810      	bhi.n	8006988 <UART_SetConfig+0x180>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <UART_SetConfig+0x168>
 800696a:	2b10      	cmp	r3, #16
 800696c:	d006      	beq.n	800697c <UART_SetConfig+0x174>
 800696e:	e00b      	b.n	8006988 <UART_SetConfig+0x180>
 8006970:	2300      	movs	r3, #0
 8006972:	76fb      	strb	r3, [r7, #27]
 8006974:	e089      	b.n	8006a8a <UART_SetConfig+0x282>
 8006976:	2302      	movs	r3, #2
 8006978:	76fb      	strb	r3, [r7, #27]
 800697a:	e086      	b.n	8006a8a <UART_SetConfig+0x282>
 800697c:	2304      	movs	r3, #4
 800697e:	76fb      	strb	r3, [r7, #27]
 8006980:	e083      	b.n	8006a8a <UART_SetConfig+0x282>
 8006982:	2308      	movs	r3, #8
 8006984:	76fb      	strb	r3, [r7, #27]
 8006986:	e080      	b.n	8006a8a <UART_SetConfig+0x282>
 8006988:	2310      	movs	r3, #16
 800698a:	76fb      	strb	r3, [r7, #27]
 800698c:	e07d      	b.n	8006a8a <UART_SetConfig+0x282>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a5b      	ldr	r2, [pc, #364]	; (8006b00 <UART_SetConfig+0x2f8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d120      	bne.n	80069da <UART_SetConfig+0x1d2>
 8006998:	4b56      	ldr	r3, [pc, #344]	; (8006af4 <UART_SetConfig+0x2ec>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069a2:	2bc0      	cmp	r3, #192	; 0xc0
 80069a4:	d013      	beq.n	80069ce <UART_SetConfig+0x1c6>
 80069a6:	2bc0      	cmp	r3, #192	; 0xc0
 80069a8:	d814      	bhi.n	80069d4 <UART_SetConfig+0x1cc>
 80069aa:	2b80      	cmp	r3, #128	; 0x80
 80069ac:	d009      	beq.n	80069c2 <UART_SetConfig+0x1ba>
 80069ae:	2b80      	cmp	r3, #128	; 0x80
 80069b0:	d810      	bhi.n	80069d4 <UART_SetConfig+0x1cc>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <UART_SetConfig+0x1b4>
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d006      	beq.n	80069c8 <UART_SetConfig+0x1c0>
 80069ba:	e00b      	b.n	80069d4 <UART_SetConfig+0x1cc>
 80069bc:	2300      	movs	r3, #0
 80069be:	76fb      	strb	r3, [r7, #27]
 80069c0:	e063      	b.n	8006a8a <UART_SetConfig+0x282>
 80069c2:	2302      	movs	r3, #2
 80069c4:	76fb      	strb	r3, [r7, #27]
 80069c6:	e060      	b.n	8006a8a <UART_SetConfig+0x282>
 80069c8:	2304      	movs	r3, #4
 80069ca:	76fb      	strb	r3, [r7, #27]
 80069cc:	e05d      	b.n	8006a8a <UART_SetConfig+0x282>
 80069ce:	2308      	movs	r3, #8
 80069d0:	76fb      	strb	r3, [r7, #27]
 80069d2:	e05a      	b.n	8006a8a <UART_SetConfig+0x282>
 80069d4:	2310      	movs	r3, #16
 80069d6:	76fb      	strb	r3, [r7, #27]
 80069d8:	e057      	b.n	8006a8a <UART_SetConfig+0x282>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a49      	ldr	r2, [pc, #292]	; (8006b04 <UART_SetConfig+0x2fc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d125      	bne.n	8006a30 <UART_SetConfig+0x228>
 80069e4:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <UART_SetConfig+0x2ec>)
 80069e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f2:	d017      	beq.n	8006a24 <UART_SetConfig+0x21c>
 80069f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f8:	d817      	bhi.n	8006a2a <UART_SetConfig+0x222>
 80069fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069fe:	d00b      	beq.n	8006a18 <UART_SetConfig+0x210>
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a04:	d811      	bhi.n	8006a2a <UART_SetConfig+0x222>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <UART_SetConfig+0x20a>
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0e:	d006      	beq.n	8006a1e <UART_SetConfig+0x216>
 8006a10:	e00b      	b.n	8006a2a <UART_SetConfig+0x222>
 8006a12:	2300      	movs	r3, #0
 8006a14:	76fb      	strb	r3, [r7, #27]
 8006a16:	e038      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	76fb      	strb	r3, [r7, #27]
 8006a1c:	e035      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a1e:	2304      	movs	r3, #4
 8006a20:	76fb      	strb	r3, [r7, #27]
 8006a22:	e032      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a24:	2308      	movs	r3, #8
 8006a26:	76fb      	strb	r3, [r7, #27]
 8006a28:	e02f      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	76fb      	strb	r3, [r7, #27]
 8006a2e:	e02c      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2d      	ldr	r2, [pc, #180]	; (8006aec <UART_SetConfig+0x2e4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d125      	bne.n	8006a86 <UART_SetConfig+0x27e>
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <UART_SetConfig+0x2ec>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a48:	d017      	beq.n	8006a7a <UART_SetConfig+0x272>
 8006a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a4e:	d817      	bhi.n	8006a80 <UART_SetConfig+0x278>
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a54:	d00b      	beq.n	8006a6e <UART_SetConfig+0x266>
 8006a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5a:	d811      	bhi.n	8006a80 <UART_SetConfig+0x278>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <UART_SetConfig+0x260>
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a64:	d006      	beq.n	8006a74 <UART_SetConfig+0x26c>
 8006a66:	e00b      	b.n	8006a80 <UART_SetConfig+0x278>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	76fb      	strb	r3, [r7, #27]
 8006a6c:	e00d      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	76fb      	strb	r3, [r7, #27]
 8006a72:	e00a      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a74:	2304      	movs	r3, #4
 8006a76:	76fb      	strb	r3, [r7, #27]
 8006a78:	e007      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	76fb      	strb	r3, [r7, #27]
 8006a7e:	e004      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a80:	2310      	movs	r3, #16
 8006a82:	76fb      	strb	r3, [r7, #27]
 8006a84:	e001      	b.n	8006a8a <UART_SetConfig+0x282>
 8006a86:	2310      	movs	r3, #16
 8006a88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	; (8006aec <UART_SetConfig+0x2e4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	f040 8087 	bne.w	8006ba4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a96:	7efb      	ldrb	r3, [r7, #27]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d837      	bhi.n	8006b0c <UART_SetConfig+0x304>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x29c>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006b0d 	.word	0x08006b0d
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006b0d 	.word	0x08006b0d
 8006ab4:	08006ad7 	.word	0x08006ad7
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006adf 	.word	0x08006adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fd fbc6 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8006acc:	6178      	str	r0, [r7, #20]
        break;
 8006ace:	e022      	b.n	8006b16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <UART_SetConfig+0x300>)
 8006ad2:	617b      	str	r3, [r7, #20]
        break;
 8006ad4:	e01f      	b.n	8006b16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad6:	f7fd fb27 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8006ada:	6178      	str	r0, [r7, #20]
        break;
 8006adc:	e01b      	b.n	8006b16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae2:	617b      	str	r3, [r7, #20]
        break;
 8006ae4:	e017      	b.n	8006b16 <UART_SetConfig+0x30e>
 8006ae6:	bf00      	nop
 8006ae8:	efff69f3 	.word	0xefff69f3
 8006aec:	40008000 	.word	0x40008000
 8006af0:	40013800 	.word	0x40013800
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40004400 	.word	0x40004400
 8006afc:	40004800 	.word	0x40004800
 8006b00:	40004c00 	.word	0x40004c00
 8006b04:	40005000 	.word	0x40005000
 8006b08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	76bb      	strb	r3, [r7, #26]
        break;
 8006b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80f1 	beq.w	8006d00 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d305      	bcc.n	8006b3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d902      	bls.n	8006b40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	76bb      	strb	r3, [r7, #26]
 8006b3e:	e0df      	b.n	8006d00 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f04f 0100 	mov.w	r1, #0
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	020b      	lsls	r3, r1, #8
 8006b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b56:	0202      	lsls	r2, r0, #8
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	6849      	ldr	r1, [r1, #4]
 8006b5c:	0849      	lsrs	r1, r1, #1
 8006b5e:	4608      	mov	r0, r1
 8006b60:	f04f 0100 	mov.w	r1, #0
 8006b64:	1814      	adds	r4, r2, r0
 8006b66:	eb43 0501 	adc.w	r5, r3, r1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	f7f9 fb7a 	bl	8000270 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4613      	mov	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8a:	d308      	bcc.n	8006b9e <UART_SetConfig+0x396>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b92:	d204      	bcs.n	8006b9e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	e0b0      	b.n	8006d00 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	76bb      	strb	r3, [r7, #26]
 8006ba2:	e0ad      	b.n	8006d00 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bac:	d15c      	bne.n	8006c68 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006bae:	7efb      	ldrb	r3, [r7, #27]
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d828      	bhi.n	8006c06 <UART_SetConfig+0x3fe>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x3b4>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	08006c07 	.word	0x08006c07
 8006bcc:	08006bf7 	.word	0x08006bf7
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
 8006bdc:	08006bff 	.word	0x08006bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fd fb3a 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8006be4:	6178      	str	r0, [r7, #20]
        break;
 8006be6:	e013      	b.n	8006c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fd fb4c 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 8006bec:	6178      	str	r0, [r7, #20]
        break;
 8006bee:	e00f      	b.n	8006c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf0:	4b49      	ldr	r3, [pc, #292]	; (8006d18 <UART_SetConfig+0x510>)
 8006bf2:	617b      	str	r3, [r7, #20]
        break;
 8006bf4:	e00c      	b.n	8006c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf6:	f7fd fa97 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8006bfa:	6178      	str	r0, [r7, #20]
        break;
 8006bfc:	e008      	b.n	8006c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c02:	617b      	str	r3, [r7, #20]
        break;
 8006c04:	e004      	b.n	8006c10 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	76bb      	strb	r3, [r7, #26]
        break;
 8006c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d074      	beq.n	8006d00 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	005a      	lsls	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	441a      	add	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b0f      	cmp	r3, #15
 8006c32:	d916      	bls.n	8006c62 <UART_SetConfig+0x45a>
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3a:	d212      	bcs.n	8006c62 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f023 030f 	bic.w	r3, r3, #15
 8006c44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	89fb      	ldrh	r3, [r7, #14]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	89fa      	ldrh	r2, [r7, #14]
 8006c5e:	60da      	str	r2, [r3, #12]
 8006c60:	e04e      	b.n	8006d00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	76bb      	strb	r3, [r7, #26]
 8006c66:	e04b      	b.n	8006d00 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c68:	7efb      	ldrb	r3, [r7, #27]
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d827      	bhi.n	8006cbe <UART_SetConfig+0x4b6>
 8006c6e:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <UART_SetConfig+0x46c>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006ca1 	.word	0x08006ca1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	08006cbf 	.word	0x08006cbf
 8006c84:	08006caf 	.word	0x08006caf
 8006c88:	08006cbf 	.word	0x08006cbf
 8006c8c:	08006cbf 	.word	0x08006cbf
 8006c90:	08006cbf 	.word	0x08006cbf
 8006c94:	08006cb7 	.word	0x08006cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c98:	f7fd fade 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8006c9c:	6178      	str	r0, [r7, #20]
        break;
 8006c9e:	e013      	b.n	8006cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ca0:	f7fd faf0 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 8006ca4:	6178      	str	r0, [r7, #20]
        break;
 8006ca6:	e00f      	b.n	8006cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <UART_SetConfig+0x510>)
 8006caa:	617b      	str	r3, [r7, #20]
        break;
 8006cac:	e00c      	b.n	8006cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cae:	f7fd fa3b 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8006cb2:	6178      	str	r0, [r7, #20]
        break;
 8006cb4:	e008      	b.n	8006cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cba:	617b      	str	r3, [r7, #20]
        break;
 8006cbc:	e004      	b.n	8006cc8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	76bb      	strb	r3, [r7, #26]
        break;
 8006cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d018      	beq.n	8006d00 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	d908      	bls.n	8006cfc <UART_SetConfig+0x4f4>
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf0:	d204      	bcs.n	8006cfc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	e001      	b.n	8006d00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bdb0      	pop	{r4, r5, r7, pc}
 8006d16:	bf00      	nop
 8006d18:	00f42400 	.word	0x00f42400

08006d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01a      	beq.n	8006e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1a:	d10a      	bne.n	8006e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e70:	f7fa fed4 	bl	8001c1c <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d10e      	bne.n	8006ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f82d 	bl	8006ef2 <UART_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e023      	b.n	8006eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d10e      	bne.n	8006ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f817 	bl	8006ef2 <UART_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e00d      	b.n	8006eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f02:	e05e      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d05a      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0c:	f7fa fe86 	bl	8001c1c <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d302      	bcc.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11b      	bne.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e043      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d02c      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f76:	d124      	bne.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f80:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e00f      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d091      	beq.n	8006f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007000:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007016:	2b01      	cmp	r3, #1
 8007018:	d107      	bne.n	800702a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0210 	bic.w	r2, r2, #16
 8007028:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fbb8 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fb95 	bl	80067c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b08b      	sub	sp, #44	; 0x2c
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	fa93 f3a3 	rbit	r3, r3
 80070d4:	613b      	str	r3, [r7, #16]
  return result;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80070e0:	2320      	movs	r3, #32
 80070e2:	e003      	b.n	80070ec <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	fab3 f383 	clz	r3, r3
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2103      	movs	r1, #3
 80070f0:	fa01 f303 	lsl.w	r3, r1, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	401a      	ands	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	fa93 f3a3 	rbit	r3, r3
 8007102:	61fb      	str	r3, [r7, #28]
  return result;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800710e:	2320      	movs	r3, #32
 8007110:	e003      	b.n	800711a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	fab3 f383 	clz	r3, r3
 8007118:	b2db      	uxtb	r3, r3
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	fa01 f303 	lsl.w	r3, r1, r3
 8007122:	431a      	orrs	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	601a      	str	r2, [r3, #0]
}
 8007128:	bf00      	nop
 800712a:	372c      	adds	r7, #44	; 0x2c
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	43db      	mvns	r3, r3
 8007148:	401a      	ands	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	431a      	orrs	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	605a      	str	r2, [r3, #4]
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007164:	b480      	push	{r7}
 8007166:	b08b      	sub	sp, #44	; 0x2c
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	fa93 f3a3 	rbit	r3, r3
 800717e:	613b      	str	r3, [r7, #16]
  return result;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800718a:	2320      	movs	r3, #32
 800718c:	e003      	b.n	8007196 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	fab3 f383 	clz	r3, r3
 8007194:	b2db      	uxtb	r3, r3
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	2103      	movs	r1, #3
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	43db      	mvns	r3, r3
 80071a0:	401a      	ands	r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	fa93 f3a3 	rbit	r3, r3
 80071ac:	61fb      	str	r3, [r7, #28]
  return result;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80071b8:	2320      	movs	r3, #32
 80071ba:	e003      	b.n	80071c4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	fab3 f383 	clz	r3, r3
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	fa01 f303 	lsl.w	r3, r1, r3
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80071d2:	bf00      	nop
 80071d4:	372c      	adds	r7, #44	; 0x2c
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80071de:	b480      	push	{r7}
 80071e0:	b08b      	sub	sp, #44	; 0x2c
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	fa93 f3a3 	rbit	r3, r3
 80071f8:	613b      	str	r3, [r7, #16]
  return result;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007204:	2320      	movs	r3, #32
 8007206:	e003      	b.n	8007210 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	fab3 f383 	clz	r3, r3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	2103      	movs	r1, #3
 8007214:	fa01 f303 	lsl.w	r3, r1, r3
 8007218:	43db      	mvns	r3, r3
 800721a:	401a      	ands	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	61fb      	str	r3, [r7, #28]
  return result;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007232:	2320      	movs	r3, #32
 8007234:	e003      	b.n	800723e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	fab3 f383 	clz	r3, r3
 800723c:	b2db      	uxtb	r3, r3
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	fa01 f303 	lsl.w	r3, r1, r3
 8007246:	431a      	orrs	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	60da      	str	r2, [r3, #12]
}
 800724c:	bf00      	nop
 800724e:	372c      	adds	r7, #44	; 0x2c
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007258:	b480      	push	{r7}
 800725a:	b08b      	sub	sp, #44	; 0x2c
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	fa93 f3a3 	rbit	r3, r3
 8007272:	613b      	str	r3, [r7, #16]
  return result;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800727e:	2320      	movs	r3, #32
 8007280:	e003      	b.n	800728a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	b2db      	uxtb	r3, r3
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	210f      	movs	r1, #15
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	43db      	mvns	r3, r3
 8007294:	401a      	ands	r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	fa93 f3a3 	rbit	r3, r3
 80072a0:	61fb      	str	r3, [r7, #28]
  return result;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80072ac:	2320      	movs	r3, #32
 80072ae:	e003      	b.n	80072b8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	fab3 f383 	clz	r3, r3
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80072c6:	bf00      	nop
 80072c8:	372c      	adds	r7, #44	; 0x2c
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b08b      	sub	sp, #44	; 0x2c
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	fa93 f3a3 	rbit	r3, r3
 80072ee:	613b      	str	r3, [r7, #16]
  return result;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80072fa:	2320      	movs	r3, #32
 80072fc:	e003      	b.n	8007306 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	fab3 f383 	clz	r3, r3
 8007304:	b2db      	uxtb	r3, r3
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	210f      	movs	r1, #15
 800730a:	fa01 f303 	lsl.w	r3, r1, r3
 800730e:	43db      	mvns	r3, r3
 8007310:	401a      	ands	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	0a1b      	lsrs	r3, r3, #8
 8007316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	61fb      	str	r3, [r7, #28]
  return result;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800732a:	2320      	movs	r3, #32
 800732c:	e003      	b.n	8007336 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	fab3 f383 	clz	r3, r3
 8007334:	b2db      	uxtb	r3, r3
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	fa01 f303 	lsl.w	r3, r1, r3
 800733e:	431a      	orrs	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007344:	bf00      	nop
 8007346:	372c      	adds	r7, #44	; 0x2c
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	fa93 f3a3 	rbit	r3, r3
 8007366:	60fb      	str	r3, [r7, #12]
  return result;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <LL_GPIO_Init+0x26>
    return 32U;
 8007372:	2320      	movs	r3, #32
 8007374:	e003      	b.n	800737e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	fab3 f383 	clz	r3, r3
 800737c:	b2db      	uxtb	r3, r3
 800737e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007380:	e048      	b.n	8007414 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	2101      	movs	r1, #1
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	fa01 f303 	lsl.w	r3, r1, r3
 800738e:	4013      	ands	r3, r2
 8007390:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d03a      	beq.n	800740e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d003      	beq.n	80073a8 <LL_GPIO_Init+0x58>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d10e      	bne.n	80073c6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	461a      	mov	r2, r3
 80073ae:	69b9      	ldr	r1, [r7, #24]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fed7 	bl	8007164 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	461a      	mov	r2, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff feb7 	bl	8007134 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	461a      	mov	r2, r3
 80073cc:	69b9      	ldr	r1, [r7, #24]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff ff05 	bl	80071de <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d111      	bne.n	8007400 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2bff      	cmp	r3, #255	; 0xff
 80073e0:	d807      	bhi.n	80073f2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	461a      	mov	r2, r3
 80073e8:	69b9      	ldr	r1, [r7, #24]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ff34 	bl	8007258 <LL_GPIO_SetAFPin_0_7>
 80073f0:	e006      	b.n	8007400 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	461a      	mov	r2, r3
 80073f8:	69b9      	ldr	r1, [r7, #24]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ff69 	bl	80072d2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	461a      	mov	r2, r3
 8007406:	69b9      	ldr	r1, [r7, #24]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff fe56 	bl	80070ba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	3301      	adds	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1af      	bne.n	8007382 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <LL_RCC_HSI_IsReady+0x24>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743c:	d101      	bne.n	8007442 <LL_RCC_HSI_IsReady+0x16>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <LL_RCC_HSI_IsReady+0x18>
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000

08007454 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <LL_RCC_LSE_IsReady+0x24>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b02      	cmp	r3, #2
 8007464:	d101      	bne.n	800746a <LL_RCC_LSE_IsReady+0x16>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <LL_RCC_LSE_IsReady+0x18>
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40021000 	.word	0x40021000

0800747c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8007480:	4b06      	ldr	r3, [pc, #24]	; (800749c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d101      	bne.n	8007490 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40021000 	.word	0x40021000

080074a0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <LL_RCC_MSI_GetRange+0x18>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40021000 	.word	0x40021000

080074bc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80074c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40021000 	.word	0x40021000

080074d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <LL_RCC_GetSysClkSource+0x18>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 030c 	and.w	r3, r3, #12
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40021000 	.word	0x40021000

080074f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <LL_RCC_GetAHBPrescaler+0x18>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007500:	4618      	mov	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40021000 	.word	0x40021000

08007510 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800751c:	4618      	mov	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40021000 	.word	0x40021000

0800752c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007538:	4618      	mov	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40021000 	.word	0x40021000

08007548 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <LL_RCC_GetUSARTClockSource+0x24>)
 8007552:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	401a      	ands	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	4313      	orrs	r3, r2
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40021000 	.word	0x40021000

08007570 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <LL_RCC_GetUARTClockSource+0x24>)
 800757a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	401a      	ands	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	4313      	orrs	r3, r2
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	40021000 	.word	0x40021000

08007598 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0303 	and.w	r3, r3, #3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40021000 	.word	0x40021000

080075b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <LL_RCC_PLL_GetN+0x18>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	0a1b      	lsrs	r3, r3, #8
 80075be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40021000 	.word	0x40021000

080075d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <LL_RCC_PLL_GetR+0x18>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40021000 	.word	0x40021000

080075ec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80075f0:	4b04      	ldr	r3, [pc, #16]	; (8007604 <LL_RCC_PLL_GetDivider+0x18>)
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40021000 	.word	0x40021000

08007608 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d137      	bne.n	800768a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff ff94 	bl	8007548 <LL_RCC_GetUSARTClockSource>
 8007620:	4603      	mov	r3, r0
 8007622:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007626:	2b03      	cmp	r3, #3
 8007628:	f200 80b3 	bhi.w	8007792 <LL_RCC_GetUSARTClockFreq+0x18a>
 800762c:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007673 	.word	0x08007673
 8007638:	08007645 	.word	0x08007645
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765f 	.word	0x0800765f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8007644:	f000 f95c 	bl	8007900 <RCC_GetSystemClockFreq>
 8007648:	60f8      	str	r0, [r7, #12]
        break;
 800764a:	e0b5      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800764c:	f7ff feee 	bl	800742c <LL_RCC_HSI_IsReady>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 809f 	beq.w	8007796 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8007658:	4b5a      	ldr	r3, [pc, #360]	; (80077c4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800765a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800765c:	e09b      	b.n	8007796 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800765e:	f7ff fef9 	bl	8007454 <LL_RCC_LSE_IsReady>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8098 	beq.w	800779a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007670:	e093      	b.n	800779a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007672:	f000 f945 	bl	8007900 <RCC_GetSystemClockFreq>
 8007676:	4603      	mov	r3, r0
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f9d1 	bl	8007a20 <RCC_GetHCLKClockFreq>
 800767e:	4603      	mov	r3, r0
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f9f7 	bl	8007a74 <RCC_GetPCLK2ClockFreq>
 8007686:	60f8      	str	r0, [r7, #12]
        break;
 8007688:	e096      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b0c      	cmp	r3, #12
 800768e:	d146      	bne.n	800771e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff ff59 	bl	8007548 <LL_RCC_GetUSARTClockSource>
 8007696:	4603      	mov	r3, r0
 8007698:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800769c:	2b0c      	cmp	r3, #12
 800769e:	d87e      	bhi.n	800779e <LL_RCC_GetUSARTClockFreq+0x196>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	08007707 	.word	0x08007707
 80076ac:	0800779f 	.word	0x0800779f
 80076b0:	0800779f 	.word	0x0800779f
 80076b4:	0800779f 	.word	0x0800779f
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	0800779f 	.word	0x0800779f
 80076c0:	0800779f 	.word	0x0800779f
 80076c4:	0800779f 	.word	0x0800779f
 80076c8:	080076e5 	.word	0x080076e5
 80076cc:	0800779f 	.word	0x0800779f
 80076d0:	0800779f 	.word	0x0800779f
 80076d4:	0800779f 	.word	0x0800779f
 80076d8:	080076f5 	.word	0x080076f5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80076dc:	f000 f910 	bl	8007900 <RCC_GetSystemClockFreq>
 80076e0:	60f8      	str	r0, [r7, #12]
        break;
 80076e2:	e069      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80076e4:	f7ff fea2 	bl	800742c <LL_RCC_HSI_IsReady>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d059      	beq.n	80077a2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80076ee:	4b35      	ldr	r3, [pc, #212]	; (80077c4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80076f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80076f2:	e056      	b.n	80077a2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80076f4:	f7ff feae 	bl	8007454 <LL_RCC_LSE_IsReady>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d053      	beq.n	80077a6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80076fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007702:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007704:	e04f      	b.n	80077a6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007706:	f000 f8fb 	bl	8007900 <RCC_GetSystemClockFreq>
 800770a:	4603      	mov	r3, r0
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f987 	bl	8007a20 <RCC_GetHCLKClockFreq>
 8007712:	4603      	mov	r3, r0
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f999 	bl	8007a4c <RCC_GetPCLK1ClockFreq>
 800771a:	60f8      	str	r0, [r7, #12]
        break;
 800771c:	e04c      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b30      	cmp	r3, #48	; 0x30
 8007722:	d142      	bne.n	80077aa <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ff0f 	bl	8007548 <LL_RCC_GetUSARTClockSource>
 800772a:	4603      	mov	r3, r0
 800772c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8007730:	d01a      	beq.n	8007768 <LL_RCC_GetUSARTClockFreq+0x160>
 8007732:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8007736:	d83a      	bhi.n	80077ae <LL_RCC_GetUSARTClockFreq+0x1a6>
 8007738:	4a23      	ldr	r2, [pc, #140]	; (80077c8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00c      	beq.n	8007758 <LL_RCC_GetUSARTClockFreq+0x150>
 800773e:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d834      	bhi.n	80077ae <LL_RCC_GetUSARTClockFreq+0x1a6>
 8007744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007748:	d017      	beq.n	800777a <LL_RCC_GetUSARTClockFreq+0x172>
 800774a:	4a20      	ldr	r2, [pc, #128]	; (80077cc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d12e      	bne.n	80077ae <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8007750:	f000 f8d6 	bl	8007900 <RCC_GetSystemClockFreq>
 8007754:	60f8      	str	r0, [r7, #12]
          break;
 8007756:	e02f      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8007758:	f7ff fe68 	bl	800742c <LL_RCC_HSI_IsReady>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d027      	beq.n	80077b2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8007762:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007764:	60fb      	str	r3, [r7, #12]
          }
          break;
 8007766:	e024      	b.n	80077b2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8007768:	f7ff fe74 	bl	8007454 <LL_RCC_LSE_IsReady>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d021      	beq.n	80077b6 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007776:	60fb      	str	r3, [r7, #12]
          }
          break;
 8007778:	e01d      	b.n	80077b6 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800777a:	f000 f8c1 	bl	8007900 <RCC_GetSystemClockFreq>
 800777e:	4603      	mov	r3, r0
 8007780:	4618      	mov	r0, r3
 8007782:	f000 f94d 	bl	8007a20 <RCC_GetHCLKClockFreq>
 8007786:	4603      	mov	r3, r0
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f95f 	bl	8007a4c <RCC_GetPCLK1ClockFreq>
 800778e:	60f8      	str	r0, [r7, #12]
          break;
 8007790:	e012      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8007792:	bf00      	nop
 8007794:	e010      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8007796:	bf00      	nop
 8007798:	e00e      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800779a:	bf00      	nop
 800779c:	e00c      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800779e:	bf00      	nop
 80077a0:	e00a      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80077a2:	bf00      	nop
 80077a4:	e008      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80077a6:	bf00      	nop
 80077a8:	e006      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80077aa:	bf00      	nop
 80077ac:	e004      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80077ae:	bf00      	nop
 80077b0:	e002      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80077b6:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	00f42400 	.word	0x00f42400
 80077c8:	00300020 	.word	0x00300020
 80077cc:	00300010 	.word	0x00300010

080077d0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2bc0      	cmp	r3, #192	; 0xc0
 80077e0:	d136      	bne.n	8007850 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fec4 	bl	8007570 <LL_RCC_GetUARTClockSource>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80077ee:	d01a      	beq.n	8007826 <LL_RCC_GetUARTClockFreq+0x56>
 80077f0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80077f4:	d82e      	bhi.n	8007854 <LL_RCC_GetUARTClockFreq+0x84>
 80077f6:	4a3d      	ldr	r2, [pc, #244]	; (80078ec <LL_RCC_GetUARTClockFreq+0x11c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d00c      	beq.n	8007816 <LL_RCC_GetUARTClockFreq+0x46>
 80077fc:	4a3b      	ldr	r2, [pc, #236]	; (80078ec <LL_RCC_GetUARTClockFreq+0x11c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d828      	bhi.n	8007854 <LL_RCC_GetUARTClockFreq+0x84>
 8007802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007806:	d017      	beq.n	8007838 <LL_RCC_GetUARTClockFreq+0x68>
 8007808:	4a39      	ldr	r2, [pc, #228]	; (80078f0 <LL_RCC_GetUARTClockFreq+0x120>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d122      	bne.n	8007854 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800780e:	f000 f877 	bl	8007900 <RCC_GetSystemClockFreq>
 8007812:	60f8      	str	r0, [r7, #12]
        break;
 8007814:	e023      	b.n	800785e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8007816:	f7ff fe09 	bl	800742c <LL_RCC_HSI_IsReady>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8007820:	4b34      	ldr	r3, [pc, #208]	; (80078f4 <LL_RCC_GetUARTClockFreq+0x124>)
 8007822:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007824:	e018      	b.n	8007858 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8007826:	f7ff fe15 	bl	8007454 <LL_RCC_LSE_IsReady>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d015      	beq.n	800785c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8007830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007834:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007836:	e011      	b.n	800785c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007838:	f000 f862 	bl	8007900 <RCC_GetSystemClockFreq>
 800783c:	4603      	mov	r3, r0
 800783e:	4618      	mov	r0, r3
 8007840:	f000 f8ee 	bl	8007a20 <RCC_GetHCLKClockFreq>
 8007844:	4603      	mov	r3, r0
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f900 	bl	8007a4c <RCC_GetPCLK1ClockFreq>
 800784c:	60f8      	str	r0, [r7, #12]
        break;
 800784e:	e006      	b.n	800785e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8007850:	bf00      	nop
 8007852:	e004      	b.n	800785e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8007854:	bf00      	nop
 8007856:	e002      	b.n	800785e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8007858:	bf00      	nop
 800785a:	e000      	b.n	800785e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800785c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007864:	d136      	bne.n	80078d4 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff fe82 	bl	8007570 <LL_RCC_GetUARTClockSource>
 800786c:	4603      	mov	r3, r0
 800786e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8007872:	d01a      	beq.n	80078aa <LL_RCC_GetUARTClockFreq+0xda>
 8007874:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8007878:	d82e      	bhi.n	80078d8 <LL_RCC_GetUARTClockFreq+0x108>
 800787a:	4a1f      	ldr	r2, [pc, #124]	; (80078f8 <LL_RCC_GetUARTClockFreq+0x128>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00c      	beq.n	800789a <LL_RCC_GetUARTClockFreq+0xca>
 8007880:	4a1d      	ldr	r2, [pc, #116]	; (80078f8 <LL_RCC_GetUARTClockFreq+0x128>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d828      	bhi.n	80078d8 <LL_RCC_GetUARTClockFreq+0x108>
 8007886:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800788a:	d017      	beq.n	80078bc <LL_RCC_GetUARTClockFreq+0xec>
 800788c:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <LL_RCC_GetUARTClockFreq+0x12c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d122      	bne.n	80078d8 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8007892:	f000 f835 	bl	8007900 <RCC_GetSystemClockFreq>
 8007896:	60f8      	str	r0, [r7, #12]
        break;
 8007898:	e023      	b.n	80078e2 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800789a:	f7ff fdc7 	bl	800742c <LL_RCC_HSI_IsReady>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01b      	beq.n	80078dc <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <LL_RCC_GetUARTClockFreq+0x124>)
 80078a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80078a8:	e018      	b.n	80078dc <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80078aa:	f7ff fdd3 	bl	8007454 <LL_RCC_LSE_IsReady>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d015      	beq.n	80078e0 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80078b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80078ba:	e011      	b.n	80078e0 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80078bc:	f000 f820 	bl	8007900 <RCC_GetSystemClockFreq>
 80078c0:	4603      	mov	r3, r0
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f8ac 	bl	8007a20 <RCC_GetHCLKClockFreq>
 80078c8:	4603      	mov	r3, r0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f8be 	bl	8007a4c <RCC_GetPCLK1ClockFreq>
 80078d0:	60f8      	str	r0, [r7, #12]
        break;
 80078d2:	e006      	b.n	80078e2 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80078d4:	bf00      	nop
 80078d6:	e004      	b.n	80078e2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80078d8:	bf00      	nop
 80078da:	e002      	b.n	80078e2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80078dc:	bf00      	nop
 80078de:	e000      	b.n	80078e2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80078e0:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	00c00080 	.word	0x00c00080
 80078f0:	00c00040 	.word	0x00c00040
 80078f4:	00f42400 	.word	0x00f42400
 80078f8:	03000200 	.word	0x03000200
 80078fc:	03000100 	.word	0x03000100

08007900 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007906:	f7ff fde7 	bl	80074d8 <LL_RCC_GetSysClkSource>
 800790a:	4603      	mov	r3, r0
 800790c:	2b0c      	cmp	r3, #12
 800790e:	d851      	bhi.n	80079b4 <RCC_GetSystemClockFreq+0xb4>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <RCC_GetSystemClockFreq+0x18>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	0800794d 	.word	0x0800794d
 800791c:	080079b5 	.word	0x080079b5
 8007920:	080079b5 	.word	0x080079b5
 8007924:	080079b5 	.word	0x080079b5
 8007928:	080079a1 	.word	0x080079a1
 800792c:	080079b5 	.word	0x080079b5
 8007930:	080079b5 	.word	0x080079b5
 8007934:	080079b5 	.word	0x080079b5
 8007938:	080079a7 	.word	0x080079a7
 800793c:	080079b5 	.word	0x080079b5
 8007940:	080079b5 	.word	0x080079b5
 8007944:	080079b5 	.word	0x080079b5
 8007948:	080079ad 	.word	0x080079ad
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800794c:	f7ff fd96 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d111      	bne.n	800797a <RCC_GetSystemClockFreq+0x7a>
 8007956:	f7ff fd91 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <RCC_GetSystemClockFreq+0x6a>
 8007960:	f7ff fd9e 	bl	80074a0 <LL_RCC_MSI_GetRange>
 8007964:	4603      	mov	r3, r0
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	e003      	b.n	8007972 <RCC_GetSystemClockFreq+0x72>
 800796a:	f7ff fda7 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 800796e:	4603      	mov	r3, r0
 8007970:	0a1b      	lsrs	r3, r3, #8
 8007972:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <RCC_GetSystemClockFreq+0x114>)
 8007974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007978:	e010      	b.n	800799c <RCC_GetSystemClockFreq+0x9c>
 800797a:	f7ff fd7f 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <RCC_GetSystemClockFreq+0x8e>
 8007984:	f7ff fd8c 	bl	80074a0 <LL_RCC_MSI_GetRange>
 8007988:	4603      	mov	r3, r0
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	e003      	b.n	8007996 <RCC_GetSystemClockFreq+0x96>
 800798e:	f7ff fd95 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 8007992:	4603      	mov	r3, r0
 8007994:	091b      	lsrs	r3, r3, #4
 8007996:	4a1f      	ldr	r2, [pc, #124]	; (8007a14 <RCC_GetSystemClockFreq+0x114>)
 8007998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800799c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800799e:	e033      	b.n	8007a08 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80079a0:	4b1d      	ldr	r3, [pc, #116]	; (8007a18 <RCC_GetSystemClockFreq+0x118>)
 80079a2:	607b      	str	r3, [r7, #4]
      break;
 80079a4:	e030      	b.n	8007a08 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80079a6:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <RCC_GetSystemClockFreq+0x11c>)
 80079a8:	607b      	str	r3, [r7, #4]
      break;
 80079aa:	e02d      	b.n	8007a08 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80079ac:	f000 f876 	bl	8007a9c <RCC_PLL_GetFreqDomain_SYS>
 80079b0:	6078      	str	r0, [r7, #4]
      break;
 80079b2:	e029      	b.n	8007a08 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80079b4:	f7ff fd62 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d111      	bne.n	80079e2 <RCC_GetSystemClockFreq+0xe2>
 80079be:	f7ff fd5d 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <RCC_GetSystemClockFreq+0xd2>
 80079c8:	f7ff fd6a 	bl	80074a0 <LL_RCC_MSI_GetRange>
 80079cc:	4603      	mov	r3, r0
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	e003      	b.n	80079da <RCC_GetSystemClockFreq+0xda>
 80079d2:	f7ff fd73 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 80079d6:	4603      	mov	r3, r0
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	4a0e      	ldr	r2, [pc, #56]	; (8007a14 <RCC_GetSystemClockFreq+0x114>)
 80079dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e0:	e010      	b.n	8007a04 <RCC_GetSystemClockFreq+0x104>
 80079e2:	f7ff fd4b 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <RCC_GetSystemClockFreq+0xf6>
 80079ec:	f7ff fd58 	bl	80074a0 <LL_RCC_MSI_GetRange>
 80079f0:	4603      	mov	r3, r0
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	e003      	b.n	80079fe <RCC_GetSystemClockFreq+0xfe>
 80079f6:	f7ff fd61 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 80079fa:	4603      	mov	r3, r0
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <RCC_GetSystemClockFreq+0x114>)
 8007a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a04:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007a06:	bf00      	nop
  }

  return frequency;
 8007a08:	687b      	ldr	r3, [r7, #4]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	0800a974 	.word	0x0800a974
 8007a18:	00f42400 	.word	0x00f42400
 8007a1c:	007a1200 	.word	0x007a1200

08007a20 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007a28:	f7ff fd64 	bl	80074f4 <LL_RCC_GetAHBPrescaler>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	4a04      	ldr	r2, [pc, #16]	; (8007a48 <RCC_GetHCLKClockFreq+0x28>)
 8007a36:	5cd3      	ldrb	r3, [r2, r3]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	40d3      	lsrs	r3, r2
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	0800a95c 	.word	0x0800a95c

08007a4c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007a54:	f7ff fd5c 	bl	8007510 <LL_RCC_GetAPB1Prescaler>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	4a04      	ldr	r2, [pc, #16]	; (8007a70 <RCC_GetPCLK1ClockFreq+0x24>)
 8007a5e:	5cd3      	ldrb	r3, [r2, r3]
 8007a60:	461a      	mov	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	40d3      	lsrs	r3, r2
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	0800a96c 	.word	0x0800a96c

08007a74 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007a7c:	f7ff fd56 	bl	800752c <LL_RCC_GetAPB2Prescaler>
 8007a80:	4603      	mov	r3, r0
 8007a82:	0adb      	lsrs	r3, r3, #11
 8007a84:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <RCC_GetPCLK2ClockFreq+0x24>)
 8007a86:	5cd3      	ldrb	r3, [r2, r3]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	40d3      	lsrs	r3, r2
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	0800a96c 	.word	0x0800a96c

08007a9c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007aa2:	f7ff fd79 	bl	8007598 <LL_RCC_PLL_GetMainSource>
 8007aa6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d036      	beq.n	8007b1c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d836      	bhi.n	8007b22 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d003      	beq.n	8007ac2 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d02a      	beq.n	8007b16 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8007ac0:	e02f      	b.n	8007b22 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007ac2:	f7ff fcdb 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d111      	bne.n	8007af0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8007acc:	f7ff fcd6 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8007ad6:	f7ff fce3 	bl	80074a0 <LL_RCC_MSI_GetRange>
 8007ada:	4603      	mov	r3, r0
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	e003      	b.n	8007ae8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8007ae0:	f7ff fcec 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	4a2f      	ldr	r2, [pc, #188]	; (8007ba8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aee:	e010      	b.n	8007b12 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8007af0:	f7ff fcc4 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8007afa:	f7ff fcd1 	bl	80074a0 <LL_RCC_MSI_GetRange>
 8007afe:	4603      	mov	r3, r0
 8007b00:	091b      	lsrs	r3, r3, #4
 8007b02:	e003      	b.n	8007b0c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8007b04:	f7ff fcda 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	091b      	lsrs	r3, r3, #4
 8007b0c:	4a26      	ldr	r2, [pc, #152]	; (8007ba8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b12:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007b14:	e02f      	b.n	8007b76 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007b16:	4b25      	ldr	r3, [pc, #148]	; (8007bac <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8007b18:	607b      	str	r3, [r7, #4]
      break;
 8007b1a:	e02c      	b.n	8007b76 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007b1c:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8007b1e:	607b      	str	r3, [r7, #4]
      break;
 8007b20:	e029      	b.n	8007b76 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007b22:	f7ff fcab 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d111      	bne.n	8007b50 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8007b2c:	f7ff fca6 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8007b36:	f7ff fcb3 	bl	80074a0 <LL_RCC_MSI_GetRange>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	e003      	b.n	8007b48 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8007b40:	f7ff fcbc 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 8007b44:	4603      	mov	r3, r0
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4e:	e010      	b.n	8007b72 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8007b50:	f7ff fc94 	bl	800747c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8007b5a:	f7ff fca1 	bl	80074a0 <LL_RCC_MSI_GetRange>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	e003      	b.n	8007b6c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8007b64:	f7ff fcaa 	bl	80074bc <LL_RCC_MSI_GetRangeAfterStandby>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	091b      	lsrs	r3, r3, #4
 8007b6c:	4a0e      	ldr	r2, [pc, #56]	; (8007ba8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b72:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007b74:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007b76:	f7ff fd39 	bl	80075ec <LL_RCC_PLL_GetDivider>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	091b      	lsrs	r3, r3, #4
 8007b7e:	3301      	adds	r3, #1
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	fbb2 f4f3 	udiv	r4, r2, r3
 8007b86:	f7ff fd15 	bl	80075b4 <LL_RCC_PLL_GetN>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	fb03 f404 	mul.w	r4, r3, r4
 8007b90:	f7ff fd1e 	bl	80075d0 <LL_RCC_PLL_GetR>
 8007b94:	4603      	mov	r3, r0
 8007b96:	0e5b      	lsrs	r3, r3, #25
 8007b98:	3301      	adds	r3, #1
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}
 8007ba8:	0800a974 	.word	0x0800a974
 8007bac:	00f42400 	.word	0x00f42400
 8007bb0:	007a1200 	.word	0x007a1200

08007bb4 <LL_USART_IsEnabled>:
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <LL_USART_IsEnabled+0x18>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <LL_USART_IsEnabled+0x1a>
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <LL_USART_SetStopBitsLength>:
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <LL_USART_SetHWFlowCtrl>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	609a      	str	r2, [r3, #8]
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_USART_SetBaudRate>:
{
 8007c26:	b480      	push	{r7}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3a:	d11a      	bne.n	8007c72 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	005a      	lsls	r2, r3, #1
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8007c56:	4013      	ands	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	60da      	str	r2, [r3, #12]
}
 8007c70:	e00a      	b.n	8007c88 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	085a      	lsrs	r2, r3, #1
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	441a      	add	r2, r3
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	60da      	str	r2, [r3, #12]
}
 8007c88:	bf00      	nop
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ff84 	bl	8007bb4 <LL_USART_IsEnabled>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d15b      	bne.n	8007d6a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	; (8007d74 <LL_USART_Init+0xe0>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	6851      	ldr	r1, [r2, #4]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	68d2      	ldr	r2, [r2, #12]
 8007cc2:	4311      	orrs	r1, r2
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	6912      	ldr	r2, [r2, #16]
 8007cc8:	4311      	orrs	r1, r2
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	6992      	ldr	r2, [r2, #24]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff ff7c 	bl	8007bda <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff89 	bl	8007c00 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <LL_USART_Init+0xe4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d104      	bne.n	8007d00 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007cf6:	2003      	movs	r0, #3
 8007cf8:	f7ff fc86 	bl	8007608 <LL_RCC_GetUSARTClockFreq>
 8007cfc:	60b8      	str	r0, [r7, #8]
 8007cfe:	e023      	b.n	8007d48 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <LL_USART_Init+0xe8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d104      	bne.n	8007d12 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007d08:	200c      	movs	r0, #12
 8007d0a:	f7ff fc7d 	bl	8007608 <LL_RCC_GetUSARTClockFreq>
 8007d0e:	60b8      	str	r0, [r7, #8]
 8007d10:	e01a      	b.n	8007d48 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <LL_USART_Init+0xec>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d104      	bne.n	8007d24 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8007d1a:	2030      	movs	r0, #48	; 0x30
 8007d1c:	f7ff fc74 	bl	8007608 <LL_RCC_GetUSARTClockFreq>
 8007d20:	60b8      	str	r0, [r7, #8]
 8007d22:	e011      	b.n	8007d48 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <LL_USART_Init+0xf0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d104      	bne.n	8007d36 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8007d2c:	20c0      	movs	r0, #192	; 0xc0
 8007d2e:	f7ff fd4f 	bl	80077d0 <LL_RCC_GetUARTClockFreq>
 8007d32:	60b8      	str	r0, [r7, #8]
 8007d34:	e008      	b.n	8007d48 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <LL_USART_Init+0xf4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d104      	bne.n	8007d48 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8007d3e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007d42:	f7ff fd45 	bl	80077d0 <LL_RCC_GetUARTClockFreq>
 8007d46:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff5e 	bl	8007c26 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	efff69f3 	.word	0xefff69f3
 8007d78:	40013800 	.word	0x40013800
 8007d7c:	40004400 	.word	0x40004400
 8007d80:	40004800 	.word	0x40004800
 8007d84:	40004c00 	.word	0x40004c00
 8007d88:	40005000 	.word	0x40005000

08007d8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d9e:	2b84      	cmp	r3, #132	; 0x84
 8007da0:	d005      	beq.n	8007dae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007da2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	3303      	adds	r3, #3
 8007dac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007dae:	68fb      	ldr	r3, [r7, #12]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007dc0:	f000 ffde 	bl	8008d80 <vTaskStartScheduler>
  
  return osOK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dcc:	b089      	sub	sp, #36	; 0x24
 8007dce:	af04      	add	r7, sp, #16
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d020      	beq.n	8007e1e <osThreadCreate+0x54>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01c      	beq.n	8007e1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685c      	ldr	r4, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681d      	ldr	r5, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691e      	ldr	r6, [r3, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff ffc8 	bl	8007d8c <makeFreeRtosPriority>
 8007dfc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e06:	9202      	str	r2, [sp, #8]
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	9100      	str	r1, [sp, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4632      	mov	r2, r6
 8007e10:	4629      	mov	r1, r5
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fdec 	bl	80089f0 <xTaskCreateStatic>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e01c      	b.n	8007e58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685c      	ldr	r4, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e2a:	b29e      	uxth	r6, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff ffaa 	bl	8007d8c <makeFreeRtosPriority>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	f107 030c 	add.w	r3, r7, #12
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	9200      	str	r2, [sp, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	4632      	mov	r2, r6
 8007e46:	4629      	mov	r1, r5
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fe2e 	bl	8008aaa <xTaskCreate>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d001      	beq.n	8007e58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e58:	68fb      	ldr	r3, [r7, #12]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <osDelay+0x16>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	e000      	b.n	8007e7a <osDelay+0x18>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ff4c 	bl	8008d18 <vTaskDelay>
  
  return osOK;
 8007e80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f103 0208 	add.w	r2, r3, #8
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f103 0208 	add.w	r2, r3, #8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f103 0208 	add.w	r2, r3, #8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d103      	bne.n	8007f4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e00c      	b.n	8007f66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	e002      	b.n	8007f5a <vListInsert+0x2e>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d2f6      	bcs.n	8007f54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
}
 8007f92:	bf00      	nop
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6892      	ldr	r2, [r2, #8]
 8007fb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6852      	ldr	r2, [r2, #4]
 8007fbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d103      	bne.n	8007fd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1e5a      	subs	r2, r3, #1
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800801e:	f001 fce1 	bl	80099e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804e:	3b01      	subs	r3, #1
 8008050:	68f9      	ldr	r1, [r7, #12]
 8008052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	441a      	add	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	22ff      	movs	r2, #255	; 0xff
 8008062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	22ff      	movs	r2, #255	; 0xff
 800806a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d114      	bne.n	800809e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01a      	beq.n	80080b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3310      	adds	r3, #16
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f8bf 	bl	8009204 <xTaskRemoveFromEventList>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d012      	beq.n	80080b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800808c:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <xQueueGenericReset+0xcc>)
 800808e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	e009      	b.n	80080b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3310      	adds	r3, #16
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fef1 	bl	8007e8a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3324      	adds	r3, #36	; 0x24
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff feec 	bl	8007e8a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080b2:	f001 fcc7 	bl	8009a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080b6:	2301      	movs	r3, #1
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	; 0x28
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	613b      	str	r3, [r7, #16]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	fb02 f303 	mul.w	r3, r2, r3
 80080f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	3348      	adds	r3, #72	; 0x48
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 fd93 	bl	8009c28 <pvPortMalloc>
 8008102:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d011      	beq.n	800812e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	3348      	adds	r3, #72	; 0x48
 8008112:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4613      	mov	r3, r2
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f805 	bl	8008138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800812e:	69bb      	ldr	r3, [r7, #24]
	}
 8008130:	4618      	mov	r0, r3
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e002      	b.n	800815a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008166:	2101      	movs	r1, #1
 8008168:	69b8      	ldr	r0, [r7, #24]
 800816a:	f7ff ff43 	bl	8007ff4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00e      	beq.n	80081a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008196:	2300      	movs	r3, #0
 8008198:	2200      	movs	r2, #0
 800819a:	2100      	movs	r1, #0
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f81d 	bl	80081dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b086      	sub	sp, #24
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	4603      	mov	r3, r0
 80081b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80081b4:	2301      	movs	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	2300      	movs	r3, #0
 80081ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	461a      	mov	r2, r3
 80081c0:	6939      	ldr	r1, [r7, #16]
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f7ff ff7e 	bl	80080c4 <xQueueGenericCreate>
 80081c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff ffd3 	bl	8008176 <prvInitialiseMutex>

		return xNewQueue;
 80081d0:	68fb      	ldr	r3, [r7, #12]
	}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08e      	sub	sp, #56	; 0x38
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081ea:	2300      	movs	r3, #0
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <xQueueGenericSend+0x32>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d103      	bne.n	800821c <xQueueGenericSend+0x40>
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <xQueueGenericSend+0x44>
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <xQueueGenericSend+0x46>
 8008220:	2300      	movs	r3, #0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <xQueueGenericSend+0x60>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x6e>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <xQueueGenericSend+0x72>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueGenericSend+0x74>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xQueueGenericSend+0x8e>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	623b      	str	r3, [r7, #32]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800826a:	f001 f987 	bl	800957c <xTaskGetSchedulerState>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <xQueueGenericSend+0x9e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <xQueueGenericSend+0xa2>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <xQueueGenericSend+0xa4>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xQueueGenericSend+0xbe>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	61fb      	str	r3, [r7, #28]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800829a:	f001 fba3 	bl	80099e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d302      	bcc.n	80082b0 <xQueueGenericSend+0xd4>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d129      	bne.n	8008304 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b6:	f000 fa8b 	bl	80087d0 <prvCopyDataToQueue>
 80082ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	3324      	adds	r3, #36	; 0x24
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 ff9b 	bl	8009204 <xTaskRemoveFromEventList>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d013      	beq.n	80082fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082d4:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <xQueueGenericSend+0x1f8>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	e00a      	b.n	80082fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d007      	beq.n	80082fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082ec:	4b39      	ldr	r3, [pc, #228]	; (80083d4 <xQueueGenericSend+0x1f8>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082fc:	f001 fba2 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 8008300:	2301      	movs	r3, #1
 8008302:	e063      	b.n	80083cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800830a:	f001 fb9b 	bl	8009a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800830e:	2300      	movs	r3, #0
 8008310:	e05c      	b.n	80083cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008318:	f107 0314 	add.w	r3, r7, #20
 800831c:	4618      	mov	r0, r3
 800831e:	f000 ffd3 	bl	80092c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008322:	2301      	movs	r3, #1
 8008324:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008326:	f001 fb8d 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800832a:	f000 fd89 	bl	8008e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800832e:	f001 fb59 	bl	80099e4 <vPortEnterCritical>
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008338:	b25b      	sxtb	r3, r3
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833e:	d103      	bne.n	8008348 <xQueueGenericSend+0x16c>
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800834e:	b25b      	sxtb	r3, r3
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d103      	bne.n	800835e <xQueueGenericSend+0x182>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800835e:	f001 fb71 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008362:	1d3a      	adds	r2, r7, #4
 8008364:	f107 0314 	add.w	r3, r7, #20
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f000 ffc2 	bl	80092f4 <xTaskCheckForTimeOut>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d124      	bne.n	80083c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008378:	f000 fb22 	bl	80089c0 <prvIsQueueFull>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d018      	beq.n	80083b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	3310      	adds	r3, #16
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4611      	mov	r1, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f000 ff16 	bl	80091bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008392:	f000 faad 	bl	80088f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008396:	f000 fd61 	bl	8008e5c <xTaskResumeAll>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	f47f af7c 	bne.w	800829a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083a2:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <xQueueGenericSend+0x1f8>)
 80083a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	e772      	b.n	800829a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083b6:	f000 fa9b 	bl	80088f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ba:	f000 fd4f 	bl	8008e5c <xTaskResumeAll>
 80083be:	e76c      	b.n	800829a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c2:	f000 fa95 	bl	80088f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083c6:	f000 fd49 	bl	8008e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3738      	adds	r7, #56	; 0x38
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	e000ed04 	.word	0xe000ed04

080083d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b090      	sub	sp, #64	; 0x40
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <xQueueGenericSendFromISR+0x3c>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <xQueueGenericSendFromISR+0x40>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <xQueueGenericSendFromISR+0x42>
 8008418:	2300      	movs	r3, #0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d103      	bne.n	8008442 <xQueueGenericSendFromISR+0x6a>
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <xQueueGenericSendFromISR+0x6e>
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <xQueueGenericSendFromISR+0x70>
 8008446:	2300      	movs	r3, #0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	623b      	str	r3, [r7, #32]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008462:	f001 fba1 	bl	8009ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008466:	f3ef 8211 	mrs	r2, BASEPRI
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61fa      	str	r2, [r7, #28]
 800847c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800847e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848a:	429a      	cmp	r2, r3
 800848c:	d302      	bcc.n	8008494 <xQueueGenericSendFromISR+0xbc>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d12f      	bne.n	80084f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084aa:	f000 f991 	bl	80087d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d112      	bne.n	80084de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d016      	beq.n	80084ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	3324      	adds	r3, #36	; 0x24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fe9d 	bl	8009204 <xTaskRemoveFromEventList>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	e007      	b.n	80084ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084e2:	3301      	adds	r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	b25a      	sxtb	r2, r3
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084ee:	2301      	movs	r3, #1
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084f2:	e001      	b.n	80084f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008502:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008506:	4618      	mov	r0, r3
 8008508:	3740      	adds	r7, #64	; 0x40
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	; 0x30
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <xQueueReceive+0x30>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	623b      	str	r3, [r7, #32]
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <xQueueReceive+0x3e>
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <xQueueReceive+0x42>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <xQueueReceive+0x44>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xQueueReceive+0x5e>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	61fb      	str	r3, [r7, #28]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800856e:	f001 f805 	bl	800957c <xTaskGetSchedulerState>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <xQueueReceive+0x6e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <xQueueReceive+0x72>
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <xQueueReceive+0x74>
 8008582:	2300      	movs	r3, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xQueueReceive+0x8e>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	61bb      	str	r3, [r7, #24]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800859e:	f001 fa21 	bl	80099e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01f      	beq.n	80085ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b2:	f000 f977 	bl	80088a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00f      	beq.n	80085e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	3310      	adds	r3, #16
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fe1a 	bl	8009204 <xTaskRemoveFromEventList>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085d6:	4b3d      	ldr	r3, [pc, #244]	; (80086cc <xQueueReceive+0x1bc>)
 80085d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085e6:	f001 fa2d 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e069      	b.n	80086c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d103      	bne.n	80085fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085f4:	f001 fa26 	bl	8009a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e062      	b.n	80086c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008602:	f107 0310 	add.w	r3, r7, #16
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fe5e 	bl	80092c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008610:	f001 fa18 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008614:	f000 fc14 	bl	8008e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008618:	f001 f9e4 	bl	80099e4 <vPortEnterCritical>
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008622:	b25b      	sxtb	r3, r3
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d103      	bne.n	8008632 <xQueueReceive+0x122>
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008638:	b25b      	sxtb	r3, r3
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d103      	bne.n	8008648 <xQueueReceive+0x138>
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008648:	f001 f9fc 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800864c:	1d3a      	adds	r2, r7, #4
 800864e:	f107 0310 	add.w	r3, r7, #16
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fe4d 	bl	80092f4 <xTaskCheckForTimeOut>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d123      	bne.n	80086a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008662:	f000 f997 	bl	8008994 <prvIsQueueEmpty>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d017      	beq.n	800869c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	3324      	adds	r3, #36	; 0x24
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fda1 	bl	80091bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800867a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800867c:	f000 f938 	bl	80088f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008680:	f000 fbec 	bl	8008e5c <xTaskResumeAll>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d189      	bne.n	800859e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800868a:	4b10      	ldr	r3, [pc, #64]	; (80086cc <xQueueReceive+0x1bc>)
 800868c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	e780      	b.n	800859e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800869c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869e:	f000 f927 	bl	80088f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086a2:	f000 fbdb 	bl	8008e5c <xTaskResumeAll>
 80086a6:	e77a      	b.n	800859e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086aa:	f000 f921 	bl	80088f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ae:	f000 fbd5 	bl	8008e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b4:	f000 f96e 	bl	8008994 <prvIsQueueEmpty>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f43f af6f 	beq.w	800859e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3730      	adds	r7, #48	; 0x30
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08e      	sub	sp, #56	; 0x38
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	623b      	str	r3, [r7, #32]
}
 80086f8:	bf00      	nop
 80086fa:	e7fe      	b.n	80086fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <xQueueReceiveFromISR+0x3a>
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <xQueueReceiveFromISR+0x3e>
 800870a:	2301      	movs	r3, #1
 800870c:	e000      	b.n	8008710 <xQueueReceiveFromISR+0x40>
 800870e:	2300      	movs	r3, #0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	61fb      	str	r3, [r7, #28]
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800872a:	f001 fa3d 	bl	8009ba8 <vPortValidateInterruptPriority>
	__asm volatile
 800872e:	f3ef 8211 	mrs	r2, BASEPRI
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	61ba      	str	r2, [r7, #24]
 8008744:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008746:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	d02f      	beq.n	80087b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008764:	f000 f89e 	bl	80088a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	1e5a      	subs	r2, r3, #1
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d112      	bne.n	80087a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d016      	beq.n	80087b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	3310      	adds	r3, #16
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fd3c 	bl	8009204 <xTaskRemoveFromEventList>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e007      	b.n	80087b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a4:	3301      	adds	r3, #1
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	b25a      	sxtb	r2, r3
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087b0:	2301      	movs	r3, #1
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
 80087b4:	e001      	b.n	80087ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f383 8811 	msr	BASEPRI, r3
}
 80087c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3738      	adds	r7, #56	; 0x38
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10d      	bne.n	800880a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d14d      	bne.n	8008892 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fedc 	bl	80095b8 <xTaskPriorityDisinherit>
 8008800:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	e043      	b.n	8008892 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d119      	bne.n	8008844 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6858      	ldr	r0, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008818:	461a      	mov	r2, r3
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	f001 fc18 	bl	800a050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	d32b      	bcc.n	8008892 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	e026      	b.n	8008892 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68d8      	ldr	r0, [r3, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	461a      	mov	r2, r3
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	f001 fbfe 	bl	800a050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885c:	425b      	negs	r3, r3
 800885e:	441a      	add	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d207      	bcs.n	8008880 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008878:	425b      	negs	r3, r3
 800887a:	441a      	add	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d105      	bne.n	8008892 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3b01      	subs	r3, #1
 8008890:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800889a:	697b      	ldr	r3, [r7, #20]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d018      	beq.n	80088e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	441a      	add	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d303      	bcc.n	80088d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68d9      	ldr	r1, [r3, #12]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e0:	461a      	mov	r2, r3
 80088e2:	6838      	ldr	r0, [r7, #0]
 80088e4:	f001 fbb4 	bl	800a050 <memcpy>
	}
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088f8:	f001 f874 	bl	80099e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008902:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008904:	e011      	b.n	800892a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b00      	cmp	r3, #0
 800890c:	d012      	beq.n	8008934 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	; 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fc76 	bl	8009204 <xTaskRemoveFromEventList>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800891e:	f000 fd4b 	bl	80093b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	3b01      	subs	r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800892a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	dce9      	bgt.n	8008906 <prvUnlockQueue+0x16>
 8008932:	e000      	b.n	8008936 <prvUnlockQueue+0x46>
					break;
 8008934:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	22ff      	movs	r2, #255	; 0xff
 800893a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800893e:	f001 f881 	bl	8009a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008942:	f001 f84f 	bl	80099e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800894c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800894e:	e011      	b.n	8008974 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d012      	beq.n	800897e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3310      	adds	r3, #16
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fc51 	bl	8009204 <xTaskRemoveFromEventList>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008968:	f000 fd26 	bl	80093b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	3b01      	subs	r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008978:	2b00      	cmp	r3, #0
 800897a:	dce9      	bgt.n	8008950 <prvUnlockQueue+0x60>
 800897c:	e000      	b.n	8008980 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800897e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	22ff      	movs	r2, #255	; 0xff
 8008984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008988:	f001 f85c 	bl	8009a44 <vPortExitCritical>
}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800899c:	f001 f822 	bl	80099e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b2:	f001 f847 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089c8:	f001 f80c 	bl	80099e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d102      	bne.n	80089de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	e001      	b.n	80089e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089e2:	f001 f82f 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 80089e6:	68fb      	ldr	r3, [r7, #12]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08e      	sub	sp, #56	; 0x38
 80089f4:	af04      	add	r7, sp, #16
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	623b      	str	r3, [r7, #32]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	61fb      	str	r3, [r7, #28]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a36:	2354      	movs	r3, #84	; 0x54
 8008a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b54      	cmp	r3, #84	; 0x54
 8008a3e:	d00a      	beq.n	8008a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	61bb      	str	r3, [r7, #24]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01e      	beq.n	8008a9c <xTaskCreateStatic+0xac>
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01b      	beq.n	8008a9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a76:	2300      	movs	r3, #0
 8008a78:	9303      	str	r3, [sp, #12]
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f850 	bl	8008b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a96:	f000 f8d5 	bl	8008c44 <prvAddNewTaskToReadyList>
 8008a9a:	e001      	b.n	8008aa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008aa0:	697b      	ldr	r3, [r7, #20]
	}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3728      	adds	r7, #40	; 0x28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b08c      	sub	sp, #48	; 0x30
 8008aae:	af04      	add	r7, sp, #16
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008aba:	88fb      	ldrh	r3, [r7, #6]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 f8b2 	bl	8009c28 <pvPortMalloc>
 8008ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00e      	beq.n	8008aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008acc:	2054      	movs	r0, #84	; 0x54
 8008ace:	f001 f8ab 	bl	8009c28 <pvPortMalloc>
 8008ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
 8008ae0:	e005      	b.n	8008aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ae2:	6978      	ldr	r0, [r7, #20]
 8008ae4:	f001 f96c 	bl	8009dc0 <vPortFree>
 8008ae8:	e001      	b.n	8008aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d017      	beq.n	8008b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008afc:	88fa      	ldrh	r2, [r7, #6]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	68b9      	ldr	r1, [r7, #8]
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f80e 	bl	8008b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b18:	69f8      	ldr	r0, [r7, #28]
 8008b1a:	f000 f893 	bl	8008c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	61bb      	str	r3, [r7, #24]
 8008b22:	e002      	b.n	8008b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295
 8008b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	f023 0307 	bic.w	r3, r3, #7
 8008b5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	617b      	str	r3, [r7, #20]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01f      	beq.n	8008bc2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b82:	2300      	movs	r3, #0
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e012      	b.n	8008bae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	7819      	ldrb	r1, [r3, #0]
 8008b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	3334      	adds	r3, #52	; 0x34
 8008b98:	460a      	mov	r2, r1
 8008b9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d006      	beq.n	8008bb6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	3301      	adds	r3, #1
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	2b0f      	cmp	r3, #15
 8008bb2:	d9e9      	bls.n	8008b88 <prvInitialiseNewTask+0x54>
 8008bb4:	e000      	b.n	8008bb8 <prvInitialiseNewTask+0x84>
			{
				break;
 8008bb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bc0:	e003      	b.n	8008bca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	2b06      	cmp	r3, #6
 8008bce:	d901      	bls.n	8008bd4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bd0:	2306      	movs	r3, #6
 8008bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	2200      	movs	r2, #0
 8008be4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	3304      	adds	r3, #4
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff f96d 	bl	8007eca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	3318      	adds	r3, #24
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff f968 	bl	8007eca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	f1c3 0207 	rsb	r2, r3, #7
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	2200      	movs	r2, #0
 8008c14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	68f9      	ldr	r1, [r7, #12]
 8008c22:	69b8      	ldr	r0, [r7, #24]
 8008c24:	f000 fdb4 	bl	8009790 <pxPortInitialiseStack>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c4c:	f000 feca 	bl	80099e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c50:	4b2a      	ldr	r3, [pc, #168]	; (8008cfc <prvAddNewTaskToReadyList+0xb8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a29      	ldr	r2, [pc, #164]	; (8008cfc <prvAddNewTaskToReadyList+0xb8>)
 8008c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c5a:	4b29      	ldr	r3, [pc, #164]	; (8008d00 <prvAddNewTaskToReadyList+0xbc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d109      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c62:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <prvAddNewTaskToReadyList+0xbc>)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c68:	4b24      	ldr	r3, [pc, #144]	; (8008cfc <prvAddNewTaskToReadyList+0xb8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d110      	bne.n	8008c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c70:	f000 fbc6 	bl	8009400 <prvInitialiseTaskLists>
 8008c74:	e00d      	b.n	8008c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c76:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <prvAddNewTaskToReadyList+0xc0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c7e:	4b20      	ldr	r3, [pc, #128]	; (8008d00 <prvAddNewTaskToReadyList+0xbc>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d802      	bhi.n	8008c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c8c:	4a1c      	ldr	r2, [pc, #112]	; (8008d00 <prvAddNewTaskToReadyList+0xbc>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <prvAddNewTaskToReadyList+0xc4>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3301      	adds	r3, #1
 8008c98:	4a1b      	ldr	r2, [pc, #108]	; (8008d08 <prvAddNewTaskToReadyList+0xc4>)
 8008c9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	409a      	lsls	r2, r3
 8008ca4:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <prvAddNewTaskToReadyList+0xc8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	4a18      	ldr	r2, [pc, #96]	; (8008d0c <prvAddNewTaskToReadyList+0xc8>)
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4a15      	ldr	r2, [pc, #84]	; (8008d10 <prvAddNewTaskToReadyList+0xcc>)
 8008cbc:	441a      	add	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7ff f90d 	bl	8007ee4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cca:	f000 febb 	bl	8009a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <prvAddNewTaskToReadyList+0xc0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cd6:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <prvAddNewTaskToReadyList+0xbc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d207      	bcs.n	8008cf4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <prvAddNewTaskToReadyList+0xd0>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200003fc 	.word	0x200003fc
 8008d00:	200002fc 	.word	0x200002fc
 8008d04:	20000408 	.word	0x20000408
 8008d08:	20000418 	.word	0x20000418
 8008d0c:	20000404 	.word	0x20000404
 8008d10:	20000300 	.word	0x20000300
 8008d14:	e000ed04 	.word	0xe000ed04

08008d18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d017      	beq.n	8008d5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <vTaskDelay+0x60>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <vTaskDelay+0x30>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60bb      	str	r3, [r7, #8]
}
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d48:	f000 f87a 	bl	8008e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fcb8 	bl	80096c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d54:	f000 f882 	bl	8008e5c <xTaskResumeAll>
 8008d58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d107      	bne.n	8008d70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <vTaskDelay+0x64>)
 8008d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000424 	.word	0x20000424
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d8e:	463a      	mov	r2, r7
 8008d90:	1d39      	adds	r1, r7, #4
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f7 fbe6 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	9202      	str	r2, [sp, #8]
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	460a      	mov	r2, r1
 8008dae:	491e      	ldr	r1, [pc, #120]	; (8008e28 <vTaskStartScheduler+0xa8>)
 8008db0:	481e      	ldr	r0, [pc, #120]	; (8008e2c <vTaskStartScheduler+0xac>)
 8008db2:	f7ff fe1d 	bl	80089f0 <xTaskCreateStatic>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4a1d      	ldr	r2, [pc, #116]	; (8008e30 <vTaskStartScheduler+0xb0>)
 8008dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <vTaskStartScheduler+0xb0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e001      	b.n	8008dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d116      	bne.n	8008e02 <vTaskStartScheduler+0x82>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008de8:	4b12      	ldr	r3, [pc, #72]	; (8008e34 <vTaskStartScheduler+0xb4>)
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <vTaskStartScheduler+0xb8>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008df6:	4b11      	ldr	r3, [pc, #68]	; (8008e3c <vTaskStartScheduler+0xbc>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dfc:	f000 fd50 	bl	80098a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e00:	e00e      	b.n	8008e20 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e08:	d10a      	bne.n	8008e20 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	60fb      	str	r3, [r7, #12]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <vTaskStartScheduler+0x9e>
}
 8008e20:	bf00      	nop
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	0800a94c 	.word	0x0800a94c
 8008e2c:	080093d1 	.word	0x080093d1
 8008e30:	20000420 	.word	0x20000420
 8008e34:	2000041c 	.word	0x2000041c
 8008e38:	20000408 	.word	0x20000408
 8008e3c:	20000400 	.word	0x20000400

08008e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e44:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <vTaskSuspendAll+0x18>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	4a03      	ldr	r2, [pc, #12]	; (8008e58 <vTaskSuspendAll+0x18>)
 8008e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e4e:	bf00      	nop
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20000424 	.word	0x20000424

08008e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e6a:	4b41      	ldr	r3, [pc, #260]	; (8008f70 <xTaskResumeAll+0x114>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	603b      	str	r3, [r7, #0]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e88:	f000 fdac 	bl	80099e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e8c:	4b38      	ldr	r3, [pc, #224]	; (8008f70 <xTaskResumeAll+0x114>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	4a37      	ldr	r2, [pc, #220]	; (8008f70 <xTaskResumeAll+0x114>)
 8008e94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e96:	4b36      	ldr	r3, [pc, #216]	; (8008f70 <xTaskResumeAll+0x114>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d161      	bne.n	8008f62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e9e:	4b35      	ldr	r3, [pc, #212]	; (8008f74 <xTaskResumeAll+0x118>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d05d      	beq.n	8008f62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea6:	e02e      	b.n	8008f06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea8:	4b33      	ldr	r3, [pc, #204]	; (8008f78 <xTaskResumeAll+0x11c>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3318      	adds	r3, #24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff f872 	bl	8007f9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff f86d 	bl	8007f9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	2201      	movs	r2, #1
 8008eca:	409a      	lsls	r2, r3
 8008ecc:	4b2b      	ldr	r3, [pc, #172]	; (8008f7c <xTaskResumeAll+0x120>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	4a2a      	ldr	r2, [pc, #168]	; (8008f7c <xTaskResumeAll+0x120>)
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <xTaskResumeAll+0x124>)
 8008ee4:	441a      	add	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7fe fff9 	bl	8007ee4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	4b23      	ldr	r3, [pc, #140]	; (8008f84 <xTaskResumeAll+0x128>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d302      	bcc.n	8008f06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008f00:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <xTaskResumeAll+0x12c>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f06:	4b1c      	ldr	r3, [pc, #112]	; (8008f78 <xTaskResumeAll+0x11c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1cc      	bne.n	8008ea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f14:	f000 fb12 	bl	800953c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f18:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <xTaskResumeAll+0x130>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d010      	beq.n	8008f46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f24:	f000 f836 	bl	8008f94 <xTaskIncrementTick>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008f2e:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <xTaskResumeAll+0x12c>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f1      	bne.n	8008f24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008f40:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <xTaskResumeAll+0x130>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f46:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <xTaskResumeAll+0x12c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f52:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <xTaskResumeAll+0x134>)
 8008f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f62:	f000 fd6f 	bl	8009a44 <vPortExitCritical>

	return xAlreadyYielded;
 8008f66:	68bb      	ldr	r3, [r7, #8]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000424 	.word	0x20000424
 8008f74:	200003fc 	.word	0x200003fc
 8008f78:	200003bc 	.word	0x200003bc
 8008f7c:	20000404 	.word	0x20000404
 8008f80:	20000300 	.word	0x20000300
 8008f84:	200002fc 	.word	0x200002fc
 8008f88:	20000410 	.word	0x20000410
 8008f8c:	2000040c 	.word	0x2000040c
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f9e:	4b4e      	ldr	r3, [pc, #312]	; (80090d8 <xTaskIncrementTick+0x144>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f040 808e 	bne.w	80090c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fa8:	4b4c      	ldr	r3, [pc, #304]	; (80090dc <xTaskIncrementTick+0x148>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fb0:	4a4a      	ldr	r2, [pc, #296]	; (80090dc <xTaskIncrementTick+0x148>)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d120      	bne.n	8008ffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fbc:	4b48      	ldr	r3, [pc, #288]	; (80090e0 <xTaskIncrementTick+0x14c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <xTaskIncrementTick+0x48>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	603b      	str	r3, [r7, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <xTaskIncrementTick+0x46>
 8008fdc:	4b40      	ldr	r3, [pc, #256]	; (80090e0 <xTaskIncrementTick+0x14c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	4b40      	ldr	r3, [pc, #256]	; (80090e4 <xTaskIncrementTick+0x150>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a3e      	ldr	r2, [pc, #248]	; (80090e0 <xTaskIncrementTick+0x14c>)
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	4a3e      	ldr	r2, [pc, #248]	; (80090e4 <xTaskIncrementTick+0x150>)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	4b3d      	ldr	r3, [pc, #244]	; (80090e8 <xTaskIncrementTick+0x154>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	4a3c      	ldr	r2, [pc, #240]	; (80090e8 <xTaskIncrementTick+0x154>)
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	f000 fa9f 	bl	800953c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ffe:	4b3b      	ldr	r3, [pc, #236]	; (80090ec <xTaskIncrementTick+0x158>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	429a      	cmp	r2, r3
 8009006:	d348      	bcc.n	800909a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009008:	4b35      	ldr	r3, [pc, #212]	; (80090e0 <xTaskIncrementTick+0x14c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009012:	4b36      	ldr	r3, [pc, #216]	; (80090ec <xTaskIncrementTick+0x158>)
 8009014:	f04f 32ff 	mov.w	r2, #4294967295
 8009018:	601a      	str	r2, [r3, #0]
					break;
 800901a:	e03e      	b.n	800909a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901c:	4b30      	ldr	r3, [pc, #192]	; (80090e0 <xTaskIncrementTick+0x14c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d203      	bcs.n	800903c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009034:	4a2d      	ldr	r2, [pc, #180]	; (80090ec <xTaskIncrementTick+0x158>)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800903a:	e02e      	b.n	800909a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe ffac 	bl	8007f9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	3318      	adds	r3, #24
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe ffa3 	bl	8007f9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	2201      	movs	r2, #1
 800905e:	409a      	lsls	r2, r3
 8009060:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <xTaskIncrementTick+0x15c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4313      	orrs	r3, r2
 8009066:	4a22      	ldr	r2, [pc, #136]	; (80090f0 <xTaskIncrementTick+0x15c>)
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4a1f      	ldr	r2, [pc, #124]	; (80090f4 <xTaskIncrementTick+0x160>)
 8009078:	441a      	add	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	3304      	adds	r3, #4
 800907e:	4619      	mov	r1, r3
 8009080:	4610      	mov	r0, r2
 8009082:	f7fe ff2f 	bl	8007ee4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908a:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <xTaskIncrementTick+0x164>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	429a      	cmp	r2, r3
 8009092:	d3b9      	bcc.n	8009008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009098:	e7b6      	b.n	8009008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800909a:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <xTaskIncrementTick+0x164>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4914      	ldr	r1, [pc, #80]	; (80090f4 <xTaskIncrementTick+0x160>)
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	440b      	add	r3, r1
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d901      	bls.n	80090b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80090b2:	2301      	movs	r3, #1
 80090b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090b6:	4b11      	ldr	r3, [pc, #68]	; (80090fc <xTaskIncrementTick+0x168>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80090be:	2301      	movs	r3, #1
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e004      	b.n	80090ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090c4:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <xTaskIncrementTick+0x16c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <xTaskIncrementTick+0x16c>)
 80090cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090ce:	697b      	ldr	r3, [r7, #20]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000424 	.word	0x20000424
 80090dc:	20000400 	.word	0x20000400
 80090e0:	200003b4 	.word	0x200003b4
 80090e4:	200003b8 	.word	0x200003b8
 80090e8:	20000414 	.word	0x20000414
 80090ec:	2000041c 	.word	0x2000041c
 80090f0:	20000404 	.word	0x20000404
 80090f4:	20000300 	.word	0x20000300
 80090f8:	200002fc 	.word	0x200002fc
 80090fc:	20000410 	.word	0x20000410
 8009100:	2000040c 	.word	0x2000040c

08009104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800910a:	4b27      	ldr	r3, [pc, #156]	; (80091a8 <vTaskSwitchContext+0xa4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009112:	4b26      	ldr	r3, [pc, #152]	; (80091ac <vTaskSwitchContext+0xa8>)
 8009114:	2201      	movs	r2, #1
 8009116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009118:	e03f      	b.n	800919a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <vTaskSwitchContext+0xa8>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009120:	4b23      	ldr	r3, [pc, #140]	; (80091b0 <vTaskSwitchContext+0xac>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	fab3 f383 	clz	r3, r3
 800912c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800912e:	7afb      	ldrb	r3, [r7, #11]
 8009130:	f1c3 031f 	rsb	r3, r3, #31
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	491f      	ldr	r1, [pc, #124]	; (80091b4 <vTaskSwitchContext+0xb0>)
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10a      	bne.n	8009160 <vTaskSwitchContext+0x5c>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	607b      	str	r3, [r7, #4]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <vTaskSwitchContext+0x5a>
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4a12      	ldr	r2, [pc, #72]	; (80091b4 <vTaskSwitchContext+0xb0>)
 800916c:	4413      	add	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	3308      	adds	r3, #8
 8009182:	429a      	cmp	r2, r3
 8009184:	d104      	bne.n	8009190 <vTaskSwitchContext+0x8c>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	605a      	str	r2, [r3, #4]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <vTaskSwitchContext+0xb4>)
 8009198:	6013      	str	r3, [r2, #0]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20000424 	.word	0x20000424
 80091ac:	20000410 	.word	0x20000410
 80091b0:	20000404 	.word	0x20000404
 80091b4:	20000300 	.word	0x20000300
 80091b8:	200002fc 	.word	0x200002fc

080091bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	60fb      	str	r3, [r7, #12]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <vTaskPlaceOnEventList+0x44>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3318      	adds	r3, #24
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fe fe9e 	bl	8007f2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091f0:	2101      	movs	r1, #1
 80091f2:	6838      	ldr	r0, [r7, #0]
 80091f4:	f000 fa66 	bl	80096c4 <prvAddCurrentTaskToDelayedList>
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200002fc 	.word	0x200002fc

08009204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	60fb      	str	r3, [r7, #12]
}
 800922c:	bf00      	nop
 800922e:	e7fe      	b.n	800922e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3318      	adds	r3, #24
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe feb2 	bl	8007f9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <xTaskRemoveFromEventList+0xac>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d11c      	bne.n	800927c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fea9 	bl	8007f9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	2201      	movs	r2, #1
 8009252:	409a      	lsls	r2, r3
 8009254:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <xTaskRemoveFromEventList+0xb0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4313      	orrs	r3, r2
 800925a:	4a16      	ldr	r2, [pc, #88]	; (80092b4 <xTaskRemoveFromEventList+0xb0>)
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4a13      	ldr	r2, [pc, #76]	; (80092b8 <xTaskRemoveFromEventList+0xb4>)
 800926c:	441a      	add	r2, r3
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fe fe35 	bl	8007ee4 <vListInsertEnd>
 800927a:	e005      	b.n	8009288 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	3318      	adds	r3, #24
 8009280:	4619      	mov	r1, r3
 8009282:	480e      	ldr	r0, [pc, #56]	; (80092bc <xTaskRemoveFromEventList+0xb8>)
 8009284:	f7fe fe2e 	bl	8007ee4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <xTaskRemoveFromEventList+0xbc>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	429a      	cmp	r2, r3
 8009294:	d905      	bls.n	80092a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009296:	2301      	movs	r3, #1
 8009298:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800929a:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <xTaskRemoveFromEventList+0xc0>)
 800929c:	2201      	movs	r2, #1
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	e001      	b.n	80092a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092a6:	697b      	ldr	r3, [r7, #20]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000424 	.word	0x20000424
 80092b4:	20000404 	.word	0x20000404
 80092b8:	20000300 	.word	0x20000300
 80092bc:	200003bc 	.word	0x200003bc
 80092c0:	200002fc 	.word	0x200002fc
 80092c4:	20000410 	.word	0x20000410

080092c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <vTaskInternalSetTimeOutState+0x24>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <vTaskInternalSetTimeOutState+0x28>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	605a      	str	r2, [r3, #4]
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000414 	.word	0x20000414
 80092f0:	20000400 	.word	0x20000400

080092f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	613b      	str	r3, [r7, #16]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	60fb      	str	r3, [r7, #12]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009336:	f000 fb55 	bl	80099e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800933a:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <xTaskCheckForTimeOut+0xbc>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009352:	d102      	bne.n	800935a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	61fb      	str	r3, [r7, #28]
 8009358:	e023      	b.n	80093a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <xTaskCheckForTimeOut+0xc0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d007      	beq.n	8009376 <xTaskCheckForTimeOut+0x82>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	429a      	cmp	r2, r3
 800936e:	d302      	bcc.n	8009376 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009370:	2301      	movs	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	e015      	b.n	80093a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	429a      	cmp	r2, r3
 800937e:	d20b      	bcs.n	8009398 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff ff9b 	bl	80092c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009392:	2300      	movs	r3, #0
 8009394:	61fb      	str	r3, [r7, #28]
 8009396:	e004      	b.n	80093a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800939e:	2301      	movs	r3, #1
 80093a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093a2:	f000 fb4f 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 80093a6:	69fb      	ldr	r3, [r7, #28]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3720      	adds	r7, #32
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20000400 	.word	0x20000400
 80093b4:	20000414 	.word	0x20000414

080093b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093bc:	4b03      	ldr	r3, [pc, #12]	; (80093cc <vTaskMissedYield+0x14>)
 80093be:	2201      	movs	r2, #1
 80093c0:	601a      	str	r2, [r3, #0]
}
 80093c2:	bf00      	nop
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	20000410 	.word	0x20000410

080093d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093d8:	f000 f852 	bl	8009480 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <prvIdleTask+0x28>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d9f9      	bls.n	80093d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <prvIdleTask+0x2c>)
 80093e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093f4:	e7f0      	b.n	80093d8 <prvIdleTask+0x8>
 80093f6:	bf00      	nop
 80093f8:	20000300 	.word	0x20000300
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009406:	2300      	movs	r3, #0
 8009408:	607b      	str	r3, [r7, #4]
 800940a:	e00c      	b.n	8009426 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4a12      	ldr	r2, [pc, #72]	; (8009460 <prvInitialiseTaskLists+0x60>)
 8009418:	4413      	add	r3, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe fd35 	bl	8007e8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3301      	adds	r3, #1
 8009424:	607b      	str	r3, [r7, #4]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b06      	cmp	r3, #6
 800942a:	d9ef      	bls.n	800940c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800942c:	480d      	ldr	r0, [pc, #52]	; (8009464 <prvInitialiseTaskLists+0x64>)
 800942e:	f7fe fd2c 	bl	8007e8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009432:	480d      	ldr	r0, [pc, #52]	; (8009468 <prvInitialiseTaskLists+0x68>)
 8009434:	f7fe fd29 	bl	8007e8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009438:	480c      	ldr	r0, [pc, #48]	; (800946c <prvInitialiseTaskLists+0x6c>)
 800943a:	f7fe fd26 	bl	8007e8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800943e:	480c      	ldr	r0, [pc, #48]	; (8009470 <prvInitialiseTaskLists+0x70>)
 8009440:	f7fe fd23 	bl	8007e8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009444:	480b      	ldr	r0, [pc, #44]	; (8009474 <prvInitialiseTaskLists+0x74>)
 8009446:	f7fe fd20 	bl	8007e8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <prvInitialiseTaskLists+0x78>)
 800944c:	4a05      	ldr	r2, [pc, #20]	; (8009464 <prvInitialiseTaskLists+0x64>)
 800944e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009450:	4b0a      	ldr	r3, [pc, #40]	; (800947c <prvInitialiseTaskLists+0x7c>)
 8009452:	4a05      	ldr	r2, [pc, #20]	; (8009468 <prvInitialiseTaskLists+0x68>)
 8009454:	601a      	str	r2, [r3, #0]
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000300 	.word	0x20000300
 8009464:	2000038c 	.word	0x2000038c
 8009468:	200003a0 	.word	0x200003a0
 800946c:	200003bc 	.word	0x200003bc
 8009470:	200003d0 	.word	0x200003d0
 8009474:	200003e8 	.word	0x200003e8
 8009478:	200003b4 	.word	0x200003b4
 800947c:	200003b8 	.word	0x200003b8

08009480 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009486:	e019      	b.n	80094bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009488:	f000 faac 	bl	80099e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <prvCheckTasksWaitingTermination+0x50>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3304      	adds	r3, #4
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fd80 	bl	8007f9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800949e:	4b0d      	ldr	r3, [pc, #52]	; (80094d4 <prvCheckTasksWaitingTermination+0x54>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	4a0b      	ldr	r2, [pc, #44]	; (80094d4 <prvCheckTasksWaitingTermination+0x54>)
 80094a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094a8:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <prvCheckTasksWaitingTermination+0x58>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	4a0a      	ldr	r2, [pc, #40]	; (80094d8 <prvCheckTasksWaitingTermination+0x58>)
 80094b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094b2:	f000 fac7 	bl	8009a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f810 	bl	80094dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <prvCheckTasksWaitingTermination+0x58>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1e1      	bne.n	8009488 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200003d0 	.word	0x200003d0
 80094d4:	200003fc 	.word	0x200003fc
 80094d8:	200003e4 	.word	0x200003e4

080094dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d108      	bne.n	8009500 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fc64 	bl	8009dc0 <vPortFree>
				vPortFree( pxTCB );
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc61 	bl	8009dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094fe:	e018      	b.n	8009532 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009506:	2b01      	cmp	r3, #1
 8009508:	d103      	bne.n	8009512 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fc58 	bl	8009dc0 <vPortFree>
	}
 8009510:	e00f      	b.n	8009532 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009518:	2b02      	cmp	r3, #2
 800951a:	d00a      	beq.n	8009532 <prvDeleteTCB+0x56>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <prvDeleteTCB+0x54>
	}
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009542:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <prvResetNextTaskUnblockTime+0x38>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <prvResetNextTaskUnblockTime+0x3c>)
 800954e:	f04f 32ff 	mov.w	r2, #4294967295
 8009552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009554:	e008      	b.n	8009568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <prvResetNextTaskUnblockTime+0x38>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4a04      	ldr	r2, [pc, #16]	; (8009578 <prvResetNextTaskUnblockTime+0x3c>)
 8009566:	6013      	str	r3, [r2, #0]
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	200003b4 	.word	0x200003b4
 8009578:	2000041c 	.word	0x2000041c

0800957c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009582:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <xTaskGetSchedulerState+0x34>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800958a:	2301      	movs	r3, #1
 800958c:	607b      	str	r3, [r7, #4]
 800958e:	e008      	b.n	80095a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009590:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <xTaskGetSchedulerState+0x38>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009598:	2302      	movs	r3, #2
 800959a:	607b      	str	r3, [r7, #4]
 800959c:	e001      	b.n	80095a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095a2:	687b      	ldr	r3, [r7, #4]
	}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20000408 	.word	0x20000408
 80095b4:	20000424 	.word	0x20000424

080095b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d06e      	beq.n	80096ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095ce:	4b3a      	ldr	r3, [pc, #232]	; (80096b8 <xTaskPriorityDisinherit+0x100>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d00a      	beq.n	80095ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	60fb      	str	r3, [r7, #12]
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10a      	bne.n	800960c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	60bb      	str	r3, [r7, #8]
}
 8009608:	bf00      	nop
 800960a:	e7fe      	b.n	800960a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009610:	1e5a      	subs	r2, r3, #1
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961e:	429a      	cmp	r2, r3
 8009620:	d044      	beq.n	80096ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009626:	2b00      	cmp	r3, #0
 8009628:	d140      	bne.n	80096ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3304      	adds	r3, #4
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fcb5 	bl	8007f9e <uxListRemove>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d115      	bne.n	8009666 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963e:	491f      	ldr	r1, [pc, #124]	; (80096bc <xTaskPriorityDisinherit+0x104>)
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	440b      	add	r3, r1
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xTaskPriorityDisinherit+0xae>
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	2201      	movs	r2, #1
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	43da      	mvns	r2, r3
 800965c:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <xTaskPriorityDisinherit+0x108>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4013      	ands	r3, r2
 8009662:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <xTaskPriorityDisinherit+0x108>)
 8009664:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	f1c3 0207 	rsb	r2, r3, #7
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	2201      	movs	r2, #1
 8009680:	409a      	lsls	r2, r3
 8009682:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <xTaskPriorityDisinherit+0x108>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4313      	orrs	r3, r2
 8009688:	4a0d      	ldr	r2, [pc, #52]	; (80096c0 <xTaskPriorityDisinherit+0x108>)
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4a08      	ldr	r2, [pc, #32]	; (80096bc <xTaskPriorityDisinherit+0x104>)
 800969a:	441a      	add	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f7fe fc1e 	bl	8007ee4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096ac:	697b      	ldr	r3, [r7, #20]
	}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200002fc 	.word	0x200002fc
 80096bc:	20000300 	.word	0x20000300
 80096c0:	20000404 	.word	0x20000404

080096c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ce:	4b29      	ldr	r3, [pc, #164]	; (8009774 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d4:	4b28      	ldr	r3, [pc, #160]	; (8009778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3304      	adds	r3, #4
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fc5f 	bl	8007f9e <uxListRemove>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10b      	bne.n	80096fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80096e6:	4b24      	ldr	r3, [pc, #144]	; (8009778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	2201      	movs	r2, #1
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43da      	mvns	r2, r3
 80096f4:	4b21      	ldr	r3, [pc, #132]	; (800977c <prvAddCurrentTaskToDelayedList+0xb8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4013      	ands	r3, r2
 80096fa:	4a20      	ldr	r2, [pc, #128]	; (800977c <prvAddCurrentTaskToDelayedList+0xb8>)
 80096fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d10a      	bne.n	800971c <prvAddCurrentTaskToDelayedList+0x58>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d007      	beq.n	800971c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800970c:	4b1a      	ldr	r3, [pc, #104]	; (8009778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	4619      	mov	r1, r3
 8009714:	481a      	ldr	r0, [pc, #104]	; (8009780 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009716:	f7fe fbe5 	bl	8007ee4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800971a:	e026      	b.n	800976a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4413      	add	r3, r2
 8009722:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009724:	4b14      	ldr	r3, [pc, #80]	; (8009778 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	429a      	cmp	r2, r3
 8009732:	d209      	bcs.n	8009748 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009734:	4b13      	ldr	r3, [pc, #76]	; (8009784 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3304      	adds	r3, #4
 800973e:	4619      	mov	r1, r3
 8009740:	4610      	mov	r0, r2
 8009742:	f7fe fbf3 	bl	8007f2c <vListInsert>
}
 8009746:	e010      	b.n	800976a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009748:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <prvAddCurrentTaskToDelayedList+0xc4>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3304      	adds	r3, #4
 8009752:	4619      	mov	r1, r3
 8009754:	4610      	mov	r0, r2
 8009756:	f7fe fbe9 	bl	8007f2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800975a:	4b0c      	ldr	r3, [pc, #48]	; (800978c <prvAddCurrentTaskToDelayedList+0xc8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	429a      	cmp	r2, r3
 8009762:	d202      	bcs.n	800976a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009764:	4a09      	ldr	r2, [pc, #36]	; (800978c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6013      	str	r3, [r2, #0]
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000400 	.word	0x20000400
 8009778:	200002fc 	.word	0x200002fc
 800977c:	20000404 	.word	0x20000404
 8009780:	200003e8 	.word	0x200003e8
 8009784:	200003b8 	.word	0x200003b8
 8009788:	200003b4 	.word	0x200003b4
 800978c:	2000041c 	.word	0x2000041c

08009790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3b04      	subs	r3, #4
 80097a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3b04      	subs	r3, #4
 80097ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f023 0201 	bic.w	r2, r3, #1
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3b04      	subs	r3, #4
 80097be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097c0:	4a0c      	ldr	r2, [pc, #48]	; (80097f4 <pxPortInitialiseStack+0x64>)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3b14      	subs	r3, #20
 80097ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3b04      	subs	r3, #4
 80097d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f06f 0202 	mvn.w	r2, #2
 80097de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3b20      	subs	r3, #32
 80097e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097e6:	68fb      	ldr	r3, [r7, #12]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	080097f9 	.word	0x080097f9

080097f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009802:	4b12      	ldr	r3, [pc, #72]	; (800984c <prvTaskExitError+0x54>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d00a      	beq.n	8009822 <prvTaskExitError+0x2a>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	60fb      	str	r3, [r7, #12]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <prvTaskExitError+0x28>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	60bb      	str	r3, [r7, #8]
}
 8009834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009836:	bf00      	nop
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0fc      	beq.n	8009838 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	20000008 	.word	0x20000008

08009850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <pxCurrentTCBConst2>)
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f380 8809 	msr	PSP, r0
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8811 	msr	BASEPRI, r0
 800986a:	4770      	bx	lr
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst2>:
 8009870:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009878:	4808      	ldr	r0, [pc, #32]	; (800989c <prvPortStartFirstTask+0x24>)
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	f380 8808 	msr	MSP, r0
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8814 	msr	CONTROL, r0
 800988a:	b662      	cpsie	i
 800988c:	b661      	cpsie	f
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	df00      	svc	0
 8009898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800989a:	bf00      	nop
 800989c:	e000ed08 	.word	0xe000ed08

080098a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098a6:	4b46      	ldr	r3, [pc, #280]	; (80099c0 <xPortStartScheduler+0x120>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a46      	ldr	r2, [pc, #280]	; (80099c4 <xPortStartScheduler+0x124>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10a      	bne.n	80098c6 <xPortStartScheduler+0x26>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098c6:	4b3e      	ldr	r3, [pc, #248]	; (80099c0 <xPortStartScheduler+0x120>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a3f      	ldr	r2, [pc, #252]	; (80099c8 <xPortStartScheduler+0x128>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10a      	bne.n	80098e6 <xPortStartScheduler+0x46>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	60fb      	str	r3, [r7, #12]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098e6:	4b39      	ldr	r3, [pc, #228]	; (80099cc <xPortStartScheduler+0x12c>)
 80098e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	22ff      	movs	r2, #255	; 0xff
 80098f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009908:	b2da      	uxtb	r2, r3
 800990a:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <xPortStartScheduler+0x130>)
 800990c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800990e:	4b31      	ldr	r3, [pc, #196]	; (80099d4 <xPortStartScheduler+0x134>)
 8009910:	2207      	movs	r2, #7
 8009912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009914:	e009      	b.n	800992a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009916:	4b2f      	ldr	r3, [pc, #188]	; (80099d4 <xPortStartScheduler+0x134>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3b01      	subs	r3, #1
 800991c:	4a2d      	ldr	r2, [pc, #180]	; (80099d4 <xPortStartScheduler+0x134>)
 800991e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009932:	2b80      	cmp	r3, #128	; 0x80
 8009934:	d0ef      	beq.n	8009916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <xPortStartScheduler+0x134>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00a      	beq.n	8009958 <xPortStartScheduler+0xb8>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	60bb      	str	r3, [r7, #8]
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009958:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <xPortStartScheduler+0x134>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	4a1d      	ldr	r2, [pc, #116]	; (80099d4 <xPortStartScheduler+0x134>)
 8009960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009962:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <xPortStartScheduler+0x134>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800996a:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <xPortStartScheduler+0x134>)
 800996c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	b2da      	uxtb	r2, r3
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009976:	4b18      	ldr	r3, [pc, #96]	; (80099d8 <xPortStartScheduler+0x138>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a17      	ldr	r2, [pc, #92]	; (80099d8 <xPortStartScheduler+0x138>)
 800997c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009982:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <xPortStartScheduler+0x138>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a14      	ldr	r2, [pc, #80]	; (80099d8 <xPortStartScheduler+0x138>)
 8009988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800998c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800998e:	f000 f8dd 	bl	8009b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <xPortStartScheduler+0x13c>)
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009998:	f000 f8fc 	bl	8009b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <xPortStartScheduler+0x140>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a0f      	ldr	r2, [pc, #60]	; (80099e0 <xPortStartScheduler+0x140>)
 80099a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099a8:	f7ff ff66 	bl	8009878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099ac:	f7ff fbaa 	bl	8009104 <vTaskSwitchContext>
	prvTaskExitError();
 80099b0:	f7ff ff22 	bl	80097f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	e000ed00 	.word	0xe000ed00
 80099c4:	410fc271 	.word	0x410fc271
 80099c8:	410fc270 	.word	0x410fc270
 80099cc:	e000e400 	.word	0xe000e400
 80099d0:	20000428 	.word	0x20000428
 80099d4:	2000042c 	.word	0x2000042c
 80099d8:	e000ed20 	.word	0xe000ed20
 80099dc:	20000008 	.word	0x20000008
 80099e0:	e000ef34 	.word	0xe000ef34

080099e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	607b      	str	r3, [r7, #4]
}
 80099fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <vPortEnterCritical+0x58>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	4a0d      	ldr	r2, [pc, #52]	; (8009a3c <vPortEnterCritical+0x58>)
 8009a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <vPortEnterCritical+0x58>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d10f      	bne.n	8009a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <vPortEnterCritical+0x5c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	603b      	str	r3, [r7, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <vPortEnterCritical+0x4a>
	}
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000008 	.word	0x20000008
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a4a:	4b12      	ldr	r3, [pc, #72]	; (8009a94 <vPortExitCritical+0x50>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <vPortExitCritical+0x24>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	607b      	str	r3, [r7, #4]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <vPortExitCritical+0x50>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <vPortExitCritical+0x50>)
 8009a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <vPortExitCritical+0x50>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d105      	bne.n	8009a86 <vPortExitCritical+0x42>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	f383 8811 	msr	BASEPRI, r3
}
 8009a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000008 	.word	0x20000008
	...

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ac4:	f380 8811 	msr	BASEPRI, r0
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f7ff fb18 	bl	8009104 <vTaskSwitchContext>
 8009ad4:	f04f 0000 	mov.w	r0, #0
 8009ad8:	f380 8811 	msr	BASEPRI, r0
 8009adc:	bc09      	pop	{r0, r3}
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	6808      	ldr	r0, [r1, #0]
 8009ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae6:	f01e 0f10 	tst.w	lr, #16
 8009aea:	bf08      	it	eq
 8009aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af0:	f380 8809 	msr	PSP, r0
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst>:
 8009b00:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b22:	f7ff fa37 	bl	8008f94 <xTaskIncrementTick>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <SysTick_Handler+0x40>)
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f383 8811 	msr	BASEPRI, r3
}
 8009b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b56:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <vPortSetupTimerInterrupt+0x38>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <vPortSetupTimerInterrupt+0x3c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <vPortSetupTimerInterrupt+0x40>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	099b      	lsrs	r3, r3, #6
 8009b68:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <vPortSetupTimerInterrupt+0x44>)
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6e:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	e000e010 	.word	0xe000e010
 8009b84:	e000e018 	.word	0xe000e018
 8009b88:	20000000 	.word	0x20000000
 8009b8c:	10624dd3 	.word	0x10624dd3
 8009b90:	e000e014 	.word	0xe000e014

08009b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ba4 <vPortEnableVFP+0x10>
 8009b98:	6801      	ldr	r1, [r0, #0]
 8009b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b9e:	6001      	str	r1, [r0, #0]
 8009ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ba2:	bf00      	nop
 8009ba4:	e000ed88 	.word	0xe000ed88

08009ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bae:	f3ef 8305 	mrs	r3, IPSR
 8009bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d914      	bls.n	8009be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bba:	4a17      	ldr	r2, [pc, #92]	; (8009c18 <vPortValidateInterruptPriority+0x70>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc4:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <vPortValidateInterruptPriority+0x74>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	7afa      	ldrb	r2, [r7, #11]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d20a      	bcs.n	8009be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009be4:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <vPortValidateInterruptPriority+0x78>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <vPortValidateInterruptPriority+0x7c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d90a      	bls.n	8009c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	603b      	str	r3, [r7, #0]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <vPortValidateInterruptPriority+0x60>
	}
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	e000e3f0 	.word	0xe000e3f0
 8009c1c:	20000428 	.word	0x20000428
 8009c20:	e000ed0c 	.word	0xe000ed0c
 8009c24:	2000042c 	.word	0x2000042c

08009c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c34:	f7ff f904 	bl	8008e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c38:	4b5b      	ldr	r3, [pc, #364]	; (8009da8 <pvPortMalloc+0x180>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c40:	f000 f920 	bl	8009e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c44:	4b59      	ldr	r3, [pc, #356]	; (8009dac <pvPortMalloc+0x184>)
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f040 8093 	bne.w	8009d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d01d      	beq.n	8009c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c58:	2208      	movs	r2, #8
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d014      	beq.n	8009c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	3308      	adds	r3, #8
 8009c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <pvPortMalloc+0x6c>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	617b      	str	r3, [r7, #20]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d06e      	beq.n	8009d78 <pvPortMalloc+0x150>
 8009c9a:	4b45      	ldr	r3, [pc, #276]	; (8009db0 <pvPortMalloc+0x188>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d869      	bhi.n	8009d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ca4:	4b43      	ldr	r3, [pc, #268]	; (8009db4 <pvPortMalloc+0x18c>)
 8009ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ca8:	4b42      	ldr	r3, [pc, #264]	; (8009db4 <pvPortMalloc+0x18c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cae:	e004      	b.n	8009cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d903      	bls.n	8009ccc <pvPortMalloc+0xa4>
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f1      	bne.n	8009cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ccc:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <pvPortMalloc+0x180>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d050      	beq.n	8009d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2208      	movs	r2, #8
 8009cdc:	4413      	add	r3, r2
 8009cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d91f      	bls.n	8009d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <pvPortMalloc+0xf8>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	613b      	str	r3, [r7, #16]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	1ad2      	subs	r2, r2, r3
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d32:	69b8      	ldr	r0, [r7, #24]
 8009d34:	f000 f908 	bl	8009f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d38:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <pvPortMalloc+0x188>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	4a1b      	ldr	r2, [pc, #108]	; (8009db0 <pvPortMalloc+0x188>)
 8009d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d46:	4b1a      	ldr	r3, [pc, #104]	; (8009db0 <pvPortMalloc+0x188>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <pvPortMalloc+0x190>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d203      	bcs.n	8009d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d52:	4b17      	ldr	r3, [pc, #92]	; (8009db0 <pvPortMalloc+0x188>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a18      	ldr	r2, [pc, #96]	; (8009db8 <pvPortMalloc+0x190>)
 8009d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <pvPortMalloc+0x184>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d6e:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <pvPortMalloc+0x194>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3301      	adds	r3, #1
 8009d74:	4a11      	ldr	r2, [pc, #68]	; (8009dbc <pvPortMalloc+0x194>)
 8009d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d78:	f7ff f870 	bl	8008e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <pvPortMalloc+0x174>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <pvPortMalloc+0x172>
	return pvReturn;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3728      	adds	r7, #40	; 0x28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20000ff0 	.word	0x20000ff0
 8009dac:	20001004 	.word	0x20001004
 8009db0:	20000ff4 	.word	0x20000ff4
 8009db4:	20000fe8 	.word	0x20000fe8
 8009db8:	20000ff8 	.word	0x20000ff8
 8009dbc:	20000ffc 	.word	0x20000ffc

08009dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d04d      	beq.n	8009e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dd2:	2308      	movs	r3, #8
 8009dd4:	425b      	negs	r3, r3
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	4413      	add	r3, r2
 8009dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	4b24      	ldr	r3, [pc, #144]	; (8009e78 <vPortFree+0xb8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4013      	ands	r3, r2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10a      	bne.n	8009e04 <vPortFree+0x44>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60fb      	str	r3, [r7, #12]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <vPortFree+0x62>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	60bb      	str	r3, [r7, #8]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <vPortFree+0xb8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01e      	beq.n	8009e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d11a      	bne.n	8009e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	4b0e      	ldr	r3, [pc, #56]	; (8009e78 <vPortFree+0xb8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	43db      	mvns	r3, r3
 8009e42:	401a      	ands	r2, r3
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e48:	f7fe fffa 	bl	8008e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <vPortFree+0xbc>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4413      	add	r3, r2
 8009e56:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <vPortFree+0xbc>)
 8009e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f000 f874 	bl	8009f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <vPortFree+0xc0>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3301      	adds	r3, #1
 8009e66:	4a06      	ldr	r2, [pc, #24]	; (8009e80 <vPortFree+0xc0>)
 8009e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e6a:	f7fe fff7 	bl	8008e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e6e:	bf00      	nop
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20001004 	.word	0x20001004
 8009e7c:	20000ff4 	.word	0x20000ff4
 8009e80:	20001000 	.word	0x20001000

08009e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <prvHeapInit+0xac>)
 8009e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00c      	beq.n	8009eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0307 	bic.w	r3, r3, #7
 8009eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <prvHeapInit+0xac>)
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <prvHeapInit+0xb0>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ec2:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <prvHeapInit+0xb0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4413      	add	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <prvHeapInit+0xb4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvHeapInit+0xb4>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <prvHeapInit+0xb8>)
 8009f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <prvHeapInit+0xbc>)
 8009f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f1c:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <prvHeapInit+0xc0>)
 8009f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20000430 	.word	0x20000430
 8009f34:	20000fe8 	.word	0x20000fe8
 8009f38:	20000ff0 	.word	0x20000ff0
 8009f3c:	20000ff8 	.word	0x20000ff8
 8009f40:	20000ff4 	.word	0x20000ff4
 8009f44:	20001004 	.word	0x20001004

08009f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f50:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <prvInsertBlockIntoFreeList+0xac>)
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e002      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x14>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d8f7      	bhi.n	8009f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d108      	bne.n	8009f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d118      	bne.n	8009fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d00d      	beq.n	8009fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e008      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e003      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d002      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000fe8 	.word	0x20000fe8
 8009ff8:	20000ff0 	.word	0x20000ff0

08009ffc <__errno>:
 8009ffc:	4b01      	ldr	r3, [pc, #4]	; (800a004 <__errno+0x8>)
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	2000000c 	.word	0x2000000c

0800a008 <__libc_init_array>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	4d0d      	ldr	r5, [pc, #52]	; (800a040 <__libc_init_array+0x38>)
 800a00c:	4c0d      	ldr	r4, [pc, #52]	; (800a044 <__libc_init_array+0x3c>)
 800a00e:	1b64      	subs	r4, r4, r5
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	2600      	movs	r6, #0
 800a014:	42a6      	cmp	r6, r4
 800a016:	d109      	bne.n	800a02c <__libc_init_array+0x24>
 800a018:	4d0b      	ldr	r5, [pc, #44]	; (800a048 <__libc_init_array+0x40>)
 800a01a:	4c0c      	ldr	r4, [pc, #48]	; (800a04c <__libc_init_array+0x44>)
 800a01c:	f000 fc4e 	bl	800a8bc <_init>
 800a020:	1b64      	subs	r4, r4, r5
 800a022:	10a4      	asrs	r4, r4, #2
 800a024:	2600      	movs	r6, #0
 800a026:	42a6      	cmp	r6, r4
 800a028:	d105      	bne.n	800a036 <__libc_init_array+0x2e>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a030:	4798      	blx	r3
 800a032:	3601      	adds	r6, #1
 800a034:	e7ee      	b.n	800a014 <__libc_init_array+0xc>
 800a036:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03a:	4798      	blx	r3
 800a03c:	3601      	adds	r6, #1
 800a03e:	e7f2      	b.n	800a026 <__libc_init_array+0x1e>
 800a040:	0800a9e0 	.word	0x0800a9e0
 800a044:	0800a9e0 	.word	0x0800a9e0
 800a048:	0800a9e0 	.word	0x0800a9e0
 800a04c:	0800a9e4 	.word	0x0800a9e4

0800a050 <memcpy>:
 800a050:	440a      	add	r2, r1
 800a052:	4291      	cmp	r1, r2
 800a054:	f100 33ff 	add.w	r3, r0, #4294967295
 800a058:	d100      	bne.n	800a05c <memcpy+0xc>
 800a05a:	4770      	bx	lr
 800a05c:	b510      	push	{r4, lr}
 800a05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a062:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a066:	4291      	cmp	r1, r2
 800a068:	d1f9      	bne.n	800a05e <memcpy+0xe>
 800a06a:	bd10      	pop	{r4, pc}

0800a06c <memset>:
 800a06c:	4402      	add	r2, r0
 800a06e:	4603      	mov	r3, r0
 800a070:	4293      	cmp	r3, r2
 800a072:	d100      	bne.n	800a076 <memset+0xa>
 800a074:	4770      	bx	lr
 800a076:	f803 1b01 	strb.w	r1, [r3], #1
 800a07a:	e7f9      	b.n	800a070 <memset+0x4>

0800a07c <siprintf>:
 800a07c:	b40e      	push	{r1, r2, r3}
 800a07e:	b500      	push	{lr}
 800a080:	b09c      	sub	sp, #112	; 0x70
 800a082:	ab1d      	add	r3, sp, #116	; 0x74
 800a084:	9002      	str	r0, [sp, #8]
 800a086:	9006      	str	r0, [sp, #24]
 800a088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <siprintf+0x38>)
 800a08e:	9107      	str	r1, [sp, #28]
 800a090:	9104      	str	r1, [sp, #16]
 800a092:	4909      	ldr	r1, [pc, #36]	; (800a0b8 <siprintf+0x3c>)
 800a094:	f853 2b04 	ldr.w	r2, [r3], #4
 800a098:	9105      	str	r1, [sp, #20]
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	a902      	add	r1, sp, #8
 800a0a0:	f000 f868 	bl	800a174 <_svfiprintf_r>
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	b01c      	add	sp, #112	; 0x70
 800a0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b0:	b003      	add	sp, #12
 800a0b2:	4770      	bx	lr
 800a0b4:	2000000c 	.word	0x2000000c
 800a0b8:	ffff0208 	.word	0xffff0208

0800a0bc <__ssputs_r>:
 800a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	688e      	ldr	r6, [r1, #8]
 800a0c2:	429e      	cmp	r6, r3
 800a0c4:	4682      	mov	sl, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	4690      	mov	r8, r2
 800a0ca:	461f      	mov	r7, r3
 800a0cc:	d838      	bhi.n	800a140 <__ssputs_r+0x84>
 800a0ce:	898a      	ldrh	r2, [r1, #12]
 800a0d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0d4:	d032      	beq.n	800a13c <__ssputs_r+0x80>
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	6909      	ldr	r1, [r1, #16]
 800a0da:	eba5 0901 	sub.w	r9, r5, r1
 800a0de:	6965      	ldr	r5, [r4, #20]
 800a0e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	444b      	add	r3, r9
 800a0ec:	106d      	asrs	r5, r5, #1
 800a0ee:	429d      	cmp	r5, r3
 800a0f0:	bf38      	it	cc
 800a0f2:	461d      	movcc	r5, r3
 800a0f4:	0553      	lsls	r3, r2, #21
 800a0f6:	d531      	bpl.n	800a15c <__ssputs_r+0xa0>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	f000 fb39 	bl	800a770 <_malloc_r>
 800a0fe:	4606      	mov	r6, r0
 800a100:	b950      	cbnz	r0, 800a118 <__ssputs_r+0x5c>
 800a102:	230c      	movs	r3, #12
 800a104:	f8ca 3000 	str.w	r3, [sl]
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a118:	6921      	ldr	r1, [r4, #16]
 800a11a:	464a      	mov	r2, r9
 800a11c:	f7ff ff98 	bl	800a050 <memcpy>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	6126      	str	r6, [r4, #16]
 800a12e:	6165      	str	r5, [r4, #20]
 800a130:	444e      	add	r6, r9
 800a132:	eba5 0509 	sub.w	r5, r5, r9
 800a136:	6026      	str	r6, [r4, #0]
 800a138:	60a5      	str	r5, [r4, #8]
 800a13a:	463e      	mov	r6, r7
 800a13c:	42be      	cmp	r6, r7
 800a13e:	d900      	bls.n	800a142 <__ssputs_r+0x86>
 800a140:	463e      	mov	r6, r7
 800a142:	4632      	mov	r2, r6
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	4641      	mov	r1, r8
 800a148:	f000 faa8 	bl	800a69c <memmove>
 800a14c:	68a3      	ldr	r3, [r4, #8]
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	1b9b      	subs	r3, r3, r6
 800a152:	4432      	add	r2, r6
 800a154:	60a3      	str	r3, [r4, #8]
 800a156:	6022      	str	r2, [r4, #0]
 800a158:	2000      	movs	r0, #0
 800a15a:	e7db      	b.n	800a114 <__ssputs_r+0x58>
 800a15c:	462a      	mov	r2, r5
 800a15e:	f000 fb61 	bl	800a824 <_realloc_r>
 800a162:	4606      	mov	r6, r0
 800a164:	2800      	cmp	r0, #0
 800a166:	d1e1      	bne.n	800a12c <__ssputs_r+0x70>
 800a168:	6921      	ldr	r1, [r4, #16]
 800a16a:	4650      	mov	r0, sl
 800a16c:	f000 fab0 	bl	800a6d0 <_free_r>
 800a170:	e7c7      	b.n	800a102 <__ssputs_r+0x46>
	...

0800a174 <_svfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	4698      	mov	r8, r3
 800a17a:	898b      	ldrh	r3, [r1, #12]
 800a17c:	061b      	lsls	r3, r3, #24
 800a17e:	b09d      	sub	sp, #116	; 0x74
 800a180:	4607      	mov	r7, r0
 800a182:	460d      	mov	r5, r1
 800a184:	4614      	mov	r4, r2
 800a186:	d50e      	bpl.n	800a1a6 <_svfiprintf_r+0x32>
 800a188:	690b      	ldr	r3, [r1, #16]
 800a18a:	b963      	cbnz	r3, 800a1a6 <_svfiprintf_r+0x32>
 800a18c:	2140      	movs	r1, #64	; 0x40
 800a18e:	f000 faef 	bl	800a770 <_malloc_r>
 800a192:	6028      	str	r0, [r5, #0]
 800a194:	6128      	str	r0, [r5, #16]
 800a196:	b920      	cbnz	r0, 800a1a2 <_svfiprintf_r+0x2e>
 800a198:	230c      	movs	r3, #12
 800a19a:	603b      	str	r3, [r7, #0]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	e0d1      	b.n	800a346 <_svfiprintf_r+0x1d2>
 800a1a2:	2340      	movs	r3, #64	; 0x40
 800a1a4:	616b      	str	r3, [r5, #20]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1aa:	2320      	movs	r3, #32
 800a1ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1b4:	2330      	movs	r3, #48	; 0x30
 800a1b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a360 <_svfiprintf_r+0x1ec>
 800a1ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1be:	f04f 0901 	mov.w	r9, #1
 800a1c2:	4623      	mov	r3, r4
 800a1c4:	469a      	mov	sl, r3
 800a1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ca:	b10a      	cbz	r2, 800a1d0 <_svfiprintf_r+0x5c>
 800a1cc:	2a25      	cmp	r2, #37	; 0x25
 800a1ce:	d1f9      	bne.n	800a1c4 <_svfiprintf_r+0x50>
 800a1d0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1d4:	d00b      	beq.n	800a1ee <_svfiprintf_r+0x7a>
 800a1d6:	465b      	mov	r3, fp
 800a1d8:	4622      	mov	r2, r4
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7ff ff6d 	bl	800a0bc <__ssputs_r>
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f000 80aa 	beq.w	800a33c <_svfiprintf_r+0x1c8>
 800a1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ea:	445a      	add	r2, fp
 800a1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 80a2 	beq.w	800a33c <_svfiprintf_r+0x1c8>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a202:	f10a 0a01 	add.w	sl, sl, #1
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	9307      	str	r3, [sp, #28]
 800a20a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a20e:	931a      	str	r3, [sp, #104]	; 0x68
 800a210:	4654      	mov	r4, sl
 800a212:	2205      	movs	r2, #5
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	4851      	ldr	r0, [pc, #324]	; (800a360 <_svfiprintf_r+0x1ec>)
 800a21a:	f7f5 ffd9 	bl	80001d0 <memchr>
 800a21e:	9a04      	ldr	r2, [sp, #16]
 800a220:	b9d8      	cbnz	r0, 800a25a <_svfiprintf_r+0xe6>
 800a222:	06d0      	lsls	r0, r2, #27
 800a224:	bf44      	itt	mi
 800a226:	2320      	movmi	r3, #32
 800a228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22c:	0711      	lsls	r1, r2, #28
 800a22e:	bf44      	itt	mi
 800a230:	232b      	movmi	r3, #43	; 0x2b
 800a232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a236:	f89a 3000 	ldrb.w	r3, [sl]
 800a23a:	2b2a      	cmp	r3, #42	; 0x2a
 800a23c:	d015      	beq.n	800a26a <_svfiprintf_r+0xf6>
 800a23e:	9a07      	ldr	r2, [sp, #28]
 800a240:	4654      	mov	r4, sl
 800a242:	2000      	movs	r0, #0
 800a244:	f04f 0c0a 	mov.w	ip, #10
 800a248:	4621      	mov	r1, r4
 800a24a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a24e:	3b30      	subs	r3, #48	; 0x30
 800a250:	2b09      	cmp	r3, #9
 800a252:	d94e      	bls.n	800a2f2 <_svfiprintf_r+0x17e>
 800a254:	b1b0      	cbz	r0, 800a284 <_svfiprintf_r+0x110>
 800a256:	9207      	str	r2, [sp, #28]
 800a258:	e014      	b.n	800a284 <_svfiprintf_r+0x110>
 800a25a:	eba0 0308 	sub.w	r3, r0, r8
 800a25e:	fa09 f303 	lsl.w	r3, r9, r3
 800a262:	4313      	orrs	r3, r2
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	46a2      	mov	sl, r4
 800a268:	e7d2      	b.n	800a210 <_svfiprintf_r+0x9c>
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	1d19      	adds	r1, r3, #4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	9103      	str	r1, [sp, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	bfbb      	ittet	lt
 800a276:	425b      	neglt	r3, r3
 800a278:	f042 0202 	orrlt.w	r2, r2, #2
 800a27c:	9307      	strge	r3, [sp, #28]
 800a27e:	9307      	strlt	r3, [sp, #28]
 800a280:	bfb8      	it	lt
 800a282:	9204      	strlt	r2, [sp, #16]
 800a284:	7823      	ldrb	r3, [r4, #0]
 800a286:	2b2e      	cmp	r3, #46	; 0x2e
 800a288:	d10c      	bne.n	800a2a4 <_svfiprintf_r+0x130>
 800a28a:	7863      	ldrb	r3, [r4, #1]
 800a28c:	2b2a      	cmp	r3, #42	; 0x2a
 800a28e:	d135      	bne.n	800a2fc <_svfiprintf_r+0x188>
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	9203      	str	r2, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bfb8      	it	lt
 800a29c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2a0:	3402      	adds	r4, #2
 800a2a2:	9305      	str	r3, [sp, #20]
 800a2a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a370 <_svfiprintf_r+0x1fc>
 800a2a8:	7821      	ldrb	r1, [r4, #0]
 800a2aa:	2203      	movs	r2, #3
 800a2ac:	4650      	mov	r0, sl
 800a2ae:	f7f5 ff8f 	bl	80001d0 <memchr>
 800a2b2:	b140      	cbz	r0, 800a2c6 <_svfiprintf_r+0x152>
 800a2b4:	2340      	movs	r3, #64	; 0x40
 800a2b6:	eba0 000a 	sub.w	r0, r0, sl
 800a2ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a2be:	9b04      	ldr	r3, [sp, #16]
 800a2c0:	4303      	orrs	r3, r0
 800a2c2:	3401      	adds	r4, #1
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ca:	4826      	ldr	r0, [pc, #152]	; (800a364 <_svfiprintf_r+0x1f0>)
 800a2cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2d0:	2206      	movs	r2, #6
 800a2d2:	f7f5 ff7d 	bl	80001d0 <memchr>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d038      	beq.n	800a34c <_svfiprintf_r+0x1d8>
 800a2da:	4b23      	ldr	r3, [pc, #140]	; (800a368 <_svfiprintf_r+0x1f4>)
 800a2dc:	bb1b      	cbnz	r3, 800a326 <_svfiprintf_r+0x1b2>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	3307      	adds	r3, #7
 800a2e2:	f023 0307 	bic.w	r3, r3, #7
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	9303      	str	r3, [sp, #12]
 800a2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ec:	4433      	add	r3, r6
 800a2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f0:	e767      	b.n	800a1c2 <_svfiprintf_r+0x4e>
 800a2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e7a5      	b.n	800a248 <_svfiprintf_r+0xd4>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	3401      	adds	r4, #1
 800a300:	9305      	str	r3, [sp, #20]
 800a302:	4619      	mov	r1, r3
 800a304:	f04f 0c0a 	mov.w	ip, #10
 800a308:	4620      	mov	r0, r4
 800a30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a30e:	3a30      	subs	r2, #48	; 0x30
 800a310:	2a09      	cmp	r2, #9
 800a312:	d903      	bls.n	800a31c <_svfiprintf_r+0x1a8>
 800a314:	2b00      	cmp	r3, #0
 800a316:	d0c5      	beq.n	800a2a4 <_svfiprintf_r+0x130>
 800a318:	9105      	str	r1, [sp, #20]
 800a31a:	e7c3      	b.n	800a2a4 <_svfiprintf_r+0x130>
 800a31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a320:	4604      	mov	r4, r0
 800a322:	2301      	movs	r3, #1
 800a324:	e7f0      	b.n	800a308 <_svfiprintf_r+0x194>
 800a326:	ab03      	add	r3, sp, #12
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	462a      	mov	r2, r5
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <_svfiprintf_r+0x1f8>)
 800a32e:	a904      	add	r1, sp, #16
 800a330:	4638      	mov	r0, r7
 800a332:	f3af 8000 	nop.w
 800a336:	1c42      	adds	r2, r0, #1
 800a338:	4606      	mov	r6, r0
 800a33a:	d1d6      	bne.n	800a2ea <_svfiprintf_r+0x176>
 800a33c:	89ab      	ldrh	r3, [r5, #12]
 800a33e:	065b      	lsls	r3, r3, #25
 800a340:	f53f af2c 	bmi.w	800a19c <_svfiprintf_r+0x28>
 800a344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a346:	b01d      	add	sp, #116	; 0x74
 800a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34c:	ab03      	add	r3, sp, #12
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	462a      	mov	r2, r5
 800a352:	4b06      	ldr	r3, [pc, #24]	; (800a36c <_svfiprintf_r+0x1f8>)
 800a354:	a904      	add	r1, sp, #16
 800a356:	4638      	mov	r0, r7
 800a358:	f000 f87a 	bl	800a450 <_printf_i>
 800a35c:	e7eb      	b.n	800a336 <_svfiprintf_r+0x1c2>
 800a35e:	bf00      	nop
 800a360:	0800a9a4 	.word	0x0800a9a4
 800a364:	0800a9ae 	.word	0x0800a9ae
 800a368:	00000000 	.word	0x00000000
 800a36c:	0800a0bd 	.word	0x0800a0bd
 800a370:	0800a9aa 	.word	0x0800a9aa

0800a374 <_printf_common>:
 800a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a378:	4616      	mov	r6, r2
 800a37a:	4699      	mov	r9, r3
 800a37c:	688a      	ldr	r2, [r1, #8]
 800a37e:	690b      	ldr	r3, [r1, #16]
 800a380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a384:	4293      	cmp	r3, r2
 800a386:	bfb8      	it	lt
 800a388:	4613      	movlt	r3, r2
 800a38a:	6033      	str	r3, [r6, #0]
 800a38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a390:	4607      	mov	r7, r0
 800a392:	460c      	mov	r4, r1
 800a394:	b10a      	cbz	r2, 800a39a <_printf_common+0x26>
 800a396:	3301      	adds	r3, #1
 800a398:	6033      	str	r3, [r6, #0]
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	0699      	lsls	r1, r3, #26
 800a39e:	bf42      	ittt	mi
 800a3a0:	6833      	ldrmi	r3, [r6, #0]
 800a3a2:	3302      	addmi	r3, #2
 800a3a4:	6033      	strmi	r3, [r6, #0]
 800a3a6:	6825      	ldr	r5, [r4, #0]
 800a3a8:	f015 0506 	ands.w	r5, r5, #6
 800a3ac:	d106      	bne.n	800a3bc <_printf_common+0x48>
 800a3ae:	f104 0a19 	add.w	sl, r4, #25
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	6832      	ldr	r2, [r6, #0]
 800a3b6:	1a9b      	subs	r3, r3, r2
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dc26      	bgt.n	800a40a <_printf_common+0x96>
 800a3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3c0:	1e13      	subs	r3, r2, #0
 800a3c2:	6822      	ldr	r2, [r4, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	2301      	movne	r3, #1
 800a3c8:	0692      	lsls	r2, r2, #26
 800a3ca:	d42b      	bmi.n	800a424 <_printf_common+0xb0>
 800a3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d01e      	beq.n	800a418 <_printf_common+0xa4>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	68e5      	ldr	r5, [r4, #12]
 800a3de:	6832      	ldr	r2, [r6, #0]
 800a3e0:	f003 0306 	and.w	r3, r3, #6
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	bf08      	it	eq
 800a3e8:	1aad      	subeq	r5, r5, r2
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	6922      	ldr	r2, [r4, #16]
 800a3ee:	bf0c      	ite	eq
 800a3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3f4:	2500      	movne	r5, #0
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	bfc4      	itt	gt
 800a3fa:	1a9b      	subgt	r3, r3, r2
 800a3fc:	18ed      	addgt	r5, r5, r3
 800a3fe:	2600      	movs	r6, #0
 800a400:	341a      	adds	r4, #26
 800a402:	42b5      	cmp	r5, r6
 800a404:	d11a      	bne.n	800a43c <_printf_common+0xc8>
 800a406:	2000      	movs	r0, #0
 800a408:	e008      	b.n	800a41c <_printf_common+0xa8>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4652      	mov	r2, sl
 800a40e:	4649      	mov	r1, r9
 800a410:	4638      	mov	r0, r7
 800a412:	47c0      	blx	r8
 800a414:	3001      	adds	r0, #1
 800a416:	d103      	bne.n	800a420 <_printf_common+0xac>
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a420:	3501      	adds	r5, #1
 800a422:	e7c6      	b.n	800a3b2 <_printf_common+0x3e>
 800a424:	18e1      	adds	r1, r4, r3
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	2030      	movs	r0, #48	; 0x30
 800a42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a42e:	4422      	add	r2, r4
 800a430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a438:	3302      	adds	r3, #2
 800a43a:	e7c7      	b.n	800a3cc <_printf_common+0x58>
 800a43c:	2301      	movs	r3, #1
 800a43e:	4622      	mov	r2, r4
 800a440:	4649      	mov	r1, r9
 800a442:	4638      	mov	r0, r7
 800a444:	47c0      	blx	r8
 800a446:	3001      	adds	r0, #1
 800a448:	d0e6      	beq.n	800a418 <_printf_common+0xa4>
 800a44a:	3601      	adds	r6, #1
 800a44c:	e7d9      	b.n	800a402 <_printf_common+0x8e>
	...

0800a450 <_printf_i>:
 800a450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	460c      	mov	r4, r1
 800a456:	4691      	mov	r9, r2
 800a458:	7e27      	ldrb	r7, [r4, #24]
 800a45a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a45c:	2f78      	cmp	r7, #120	; 0x78
 800a45e:	4680      	mov	r8, r0
 800a460:	469a      	mov	sl, r3
 800a462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a466:	d807      	bhi.n	800a478 <_printf_i+0x28>
 800a468:	2f62      	cmp	r7, #98	; 0x62
 800a46a:	d80a      	bhi.n	800a482 <_printf_i+0x32>
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	f000 80d8 	beq.w	800a622 <_printf_i+0x1d2>
 800a472:	2f58      	cmp	r7, #88	; 0x58
 800a474:	f000 80a3 	beq.w	800a5be <_printf_i+0x16e>
 800a478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a480:	e03a      	b.n	800a4f8 <_printf_i+0xa8>
 800a482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a486:	2b15      	cmp	r3, #21
 800a488:	d8f6      	bhi.n	800a478 <_printf_i+0x28>
 800a48a:	a001      	add	r0, pc, #4	; (adr r0, 800a490 <_printf_i+0x40>)
 800a48c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a490:	0800a4e9 	.word	0x0800a4e9
 800a494:	0800a4fd 	.word	0x0800a4fd
 800a498:	0800a479 	.word	0x0800a479
 800a49c:	0800a479 	.word	0x0800a479
 800a4a0:	0800a479 	.word	0x0800a479
 800a4a4:	0800a479 	.word	0x0800a479
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a479 	.word	0x0800a479
 800a4b0:	0800a479 	.word	0x0800a479
 800a4b4:	0800a479 	.word	0x0800a479
 800a4b8:	0800a479 	.word	0x0800a479
 800a4bc:	0800a609 	.word	0x0800a609
 800a4c0:	0800a52d 	.word	0x0800a52d
 800a4c4:	0800a5eb 	.word	0x0800a5eb
 800a4c8:	0800a479 	.word	0x0800a479
 800a4cc:	0800a479 	.word	0x0800a479
 800a4d0:	0800a62b 	.word	0x0800a62b
 800a4d4:	0800a479 	.word	0x0800a479
 800a4d8:	0800a52d 	.word	0x0800a52d
 800a4dc:	0800a479 	.word	0x0800a479
 800a4e0:	0800a479 	.word	0x0800a479
 800a4e4:	0800a5f3 	.word	0x0800a5f3
 800a4e8:	680b      	ldr	r3, [r1, #0]
 800a4ea:	1d1a      	adds	r2, r3, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	600a      	str	r2, [r1, #0]
 800a4f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e0a3      	b.n	800a644 <_printf_i+0x1f4>
 800a4fc:	6825      	ldr	r5, [r4, #0]
 800a4fe:	6808      	ldr	r0, [r1, #0]
 800a500:	062e      	lsls	r6, r5, #24
 800a502:	f100 0304 	add.w	r3, r0, #4
 800a506:	d50a      	bpl.n	800a51e <_printf_i+0xce>
 800a508:	6805      	ldr	r5, [r0, #0]
 800a50a:	600b      	str	r3, [r1, #0]
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	da03      	bge.n	800a518 <_printf_i+0xc8>
 800a510:	232d      	movs	r3, #45	; 0x2d
 800a512:	426d      	negs	r5, r5
 800a514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a518:	485e      	ldr	r0, [pc, #376]	; (800a694 <_printf_i+0x244>)
 800a51a:	230a      	movs	r3, #10
 800a51c:	e019      	b.n	800a552 <_printf_i+0x102>
 800a51e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a522:	6805      	ldr	r5, [r0, #0]
 800a524:	600b      	str	r3, [r1, #0]
 800a526:	bf18      	it	ne
 800a528:	b22d      	sxthne	r5, r5
 800a52a:	e7ef      	b.n	800a50c <_printf_i+0xbc>
 800a52c:	680b      	ldr	r3, [r1, #0]
 800a52e:	6825      	ldr	r5, [r4, #0]
 800a530:	1d18      	adds	r0, r3, #4
 800a532:	6008      	str	r0, [r1, #0]
 800a534:	0628      	lsls	r0, r5, #24
 800a536:	d501      	bpl.n	800a53c <_printf_i+0xec>
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	e002      	b.n	800a542 <_printf_i+0xf2>
 800a53c:	0669      	lsls	r1, r5, #25
 800a53e:	d5fb      	bpl.n	800a538 <_printf_i+0xe8>
 800a540:	881d      	ldrh	r5, [r3, #0]
 800a542:	4854      	ldr	r0, [pc, #336]	; (800a694 <_printf_i+0x244>)
 800a544:	2f6f      	cmp	r7, #111	; 0x6f
 800a546:	bf0c      	ite	eq
 800a548:	2308      	moveq	r3, #8
 800a54a:	230a      	movne	r3, #10
 800a54c:	2100      	movs	r1, #0
 800a54e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a552:	6866      	ldr	r6, [r4, #4]
 800a554:	60a6      	str	r6, [r4, #8]
 800a556:	2e00      	cmp	r6, #0
 800a558:	bfa2      	ittt	ge
 800a55a:	6821      	ldrge	r1, [r4, #0]
 800a55c:	f021 0104 	bicge.w	r1, r1, #4
 800a560:	6021      	strge	r1, [r4, #0]
 800a562:	b90d      	cbnz	r5, 800a568 <_printf_i+0x118>
 800a564:	2e00      	cmp	r6, #0
 800a566:	d04d      	beq.n	800a604 <_printf_i+0x1b4>
 800a568:	4616      	mov	r6, r2
 800a56a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a56e:	fb03 5711 	mls	r7, r3, r1, r5
 800a572:	5dc7      	ldrb	r7, [r0, r7]
 800a574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a578:	462f      	mov	r7, r5
 800a57a:	42bb      	cmp	r3, r7
 800a57c:	460d      	mov	r5, r1
 800a57e:	d9f4      	bls.n	800a56a <_printf_i+0x11a>
 800a580:	2b08      	cmp	r3, #8
 800a582:	d10b      	bne.n	800a59c <_printf_i+0x14c>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	07df      	lsls	r7, r3, #31
 800a588:	d508      	bpl.n	800a59c <_printf_i+0x14c>
 800a58a:	6923      	ldr	r3, [r4, #16]
 800a58c:	6861      	ldr	r1, [r4, #4]
 800a58e:	4299      	cmp	r1, r3
 800a590:	bfde      	ittt	le
 800a592:	2330      	movle	r3, #48	; 0x30
 800a594:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a59c:	1b92      	subs	r2, r2, r6
 800a59e:	6122      	str	r2, [r4, #16]
 800a5a0:	f8cd a000 	str.w	sl, [sp]
 800a5a4:	464b      	mov	r3, r9
 800a5a6:	aa03      	add	r2, sp, #12
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	f7ff fee2 	bl	800a374 <_printf_common>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d14c      	bne.n	800a64e <_printf_i+0x1fe>
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	b004      	add	sp, #16
 800a5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5be:	4835      	ldr	r0, [pc, #212]	; (800a694 <_printf_i+0x244>)
 800a5c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	680e      	ldr	r6, [r1, #0]
 800a5c8:	061f      	lsls	r7, r3, #24
 800a5ca:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5ce:	600e      	str	r6, [r1, #0]
 800a5d0:	d514      	bpl.n	800a5fc <_printf_i+0x1ac>
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	bf44      	itt	mi
 800a5d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5da:	6023      	strmi	r3, [r4, #0]
 800a5dc:	b91d      	cbnz	r5, 800a5e6 <_printf_i+0x196>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	f023 0320 	bic.w	r3, r3, #32
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	2310      	movs	r3, #16
 800a5e8:	e7b0      	b.n	800a54c <_printf_i+0xfc>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	f043 0320 	orr.w	r3, r3, #32
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	2378      	movs	r3, #120	; 0x78
 800a5f4:	4828      	ldr	r0, [pc, #160]	; (800a698 <_printf_i+0x248>)
 800a5f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5fa:	e7e3      	b.n	800a5c4 <_printf_i+0x174>
 800a5fc:	065e      	lsls	r6, r3, #25
 800a5fe:	bf48      	it	mi
 800a600:	b2ad      	uxthmi	r5, r5
 800a602:	e7e6      	b.n	800a5d2 <_printf_i+0x182>
 800a604:	4616      	mov	r6, r2
 800a606:	e7bb      	b.n	800a580 <_printf_i+0x130>
 800a608:	680b      	ldr	r3, [r1, #0]
 800a60a:	6826      	ldr	r6, [r4, #0]
 800a60c:	6960      	ldr	r0, [r4, #20]
 800a60e:	1d1d      	adds	r5, r3, #4
 800a610:	600d      	str	r5, [r1, #0]
 800a612:	0635      	lsls	r5, r6, #24
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	d501      	bpl.n	800a61c <_printf_i+0x1cc>
 800a618:	6018      	str	r0, [r3, #0]
 800a61a:	e002      	b.n	800a622 <_printf_i+0x1d2>
 800a61c:	0671      	lsls	r1, r6, #25
 800a61e:	d5fb      	bpl.n	800a618 <_printf_i+0x1c8>
 800a620:	8018      	strh	r0, [r3, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	6123      	str	r3, [r4, #16]
 800a626:	4616      	mov	r6, r2
 800a628:	e7ba      	b.n	800a5a0 <_printf_i+0x150>
 800a62a:	680b      	ldr	r3, [r1, #0]
 800a62c:	1d1a      	adds	r2, r3, #4
 800a62e:	600a      	str	r2, [r1, #0]
 800a630:	681e      	ldr	r6, [r3, #0]
 800a632:	6862      	ldr	r2, [r4, #4]
 800a634:	2100      	movs	r1, #0
 800a636:	4630      	mov	r0, r6
 800a638:	f7f5 fdca 	bl	80001d0 <memchr>
 800a63c:	b108      	cbz	r0, 800a642 <_printf_i+0x1f2>
 800a63e:	1b80      	subs	r0, r0, r6
 800a640:	6060      	str	r0, [r4, #4]
 800a642:	6863      	ldr	r3, [r4, #4]
 800a644:	6123      	str	r3, [r4, #16]
 800a646:	2300      	movs	r3, #0
 800a648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a64c:	e7a8      	b.n	800a5a0 <_printf_i+0x150>
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	4632      	mov	r2, r6
 800a652:	4649      	mov	r1, r9
 800a654:	4640      	mov	r0, r8
 800a656:	47d0      	blx	sl
 800a658:	3001      	adds	r0, #1
 800a65a:	d0ab      	beq.n	800a5b4 <_printf_i+0x164>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	079b      	lsls	r3, r3, #30
 800a660:	d413      	bmi.n	800a68a <_printf_i+0x23a>
 800a662:	68e0      	ldr	r0, [r4, #12]
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	4298      	cmp	r0, r3
 800a668:	bfb8      	it	lt
 800a66a:	4618      	movlt	r0, r3
 800a66c:	e7a4      	b.n	800a5b8 <_printf_i+0x168>
 800a66e:	2301      	movs	r3, #1
 800a670:	4632      	mov	r2, r6
 800a672:	4649      	mov	r1, r9
 800a674:	4640      	mov	r0, r8
 800a676:	47d0      	blx	sl
 800a678:	3001      	adds	r0, #1
 800a67a:	d09b      	beq.n	800a5b4 <_printf_i+0x164>
 800a67c:	3501      	adds	r5, #1
 800a67e:	68e3      	ldr	r3, [r4, #12]
 800a680:	9903      	ldr	r1, [sp, #12]
 800a682:	1a5b      	subs	r3, r3, r1
 800a684:	42ab      	cmp	r3, r5
 800a686:	dcf2      	bgt.n	800a66e <_printf_i+0x21e>
 800a688:	e7eb      	b.n	800a662 <_printf_i+0x212>
 800a68a:	2500      	movs	r5, #0
 800a68c:	f104 0619 	add.w	r6, r4, #25
 800a690:	e7f5      	b.n	800a67e <_printf_i+0x22e>
 800a692:	bf00      	nop
 800a694:	0800a9b5 	.word	0x0800a9b5
 800a698:	0800a9c6 	.word	0x0800a9c6

0800a69c <memmove>:
 800a69c:	4288      	cmp	r0, r1
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	eb01 0402 	add.w	r4, r1, r2
 800a6a4:	d902      	bls.n	800a6ac <memmove+0x10>
 800a6a6:	4284      	cmp	r4, r0
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	d807      	bhi.n	800a6bc <memmove+0x20>
 800a6ac:	1e43      	subs	r3, r0, #1
 800a6ae:	42a1      	cmp	r1, r4
 800a6b0:	d008      	beq.n	800a6c4 <memmove+0x28>
 800a6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ba:	e7f8      	b.n	800a6ae <memmove+0x12>
 800a6bc:	4402      	add	r2, r0
 800a6be:	4601      	mov	r1, r0
 800a6c0:	428a      	cmp	r2, r1
 800a6c2:	d100      	bne.n	800a6c6 <memmove+0x2a>
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ce:	e7f7      	b.n	800a6c0 <memmove+0x24>

0800a6d0 <_free_r>:
 800a6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6d2:	2900      	cmp	r1, #0
 800a6d4:	d048      	beq.n	800a768 <_free_r+0x98>
 800a6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6da:	9001      	str	r0, [sp, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f1a1 0404 	sub.w	r4, r1, #4
 800a6e2:	bfb8      	it	lt
 800a6e4:	18e4      	addlt	r4, r4, r3
 800a6e6:	f000 f8d3 	bl	800a890 <__malloc_lock>
 800a6ea:	4a20      	ldr	r2, [pc, #128]	; (800a76c <_free_r+0x9c>)
 800a6ec:	9801      	ldr	r0, [sp, #4]
 800a6ee:	6813      	ldr	r3, [r2, #0]
 800a6f0:	4615      	mov	r5, r2
 800a6f2:	b933      	cbnz	r3, 800a702 <_free_r+0x32>
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	6014      	str	r4, [r2, #0]
 800a6f8:	b003      	add	sp, #12
 800a6fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6fe:	f000 b8cd 	b.w	800a89c <__malloc_unlock>
 800a702:	42a3      	cmp	r3, r4
 800a704:	d90b      	bls.n	800a71e <_free_r+0x4e>
 800a706:	6821      	ldr	r1, [r4, #0]
 800a708:	1862      	adds	r2, r4, r1
 800a70a:	4293      	cmp	r3, r2
 800a70c:	bf04      	itt	eq
 800a70e:	681a      	ldreq	r2, [r3, #0]
 800a710:	685b      	ldreq	r3, [r3, #4]
 800a712:	6063      	str	r3, [r4, #4]
 800a714:	bf04      	itt	eq
 800a716:	1852      	addeq	r2, r2, r1
 800a718:	6022      	streq	r2, [r4, #0]
 800a71a:	602c      	str	r4, [r5, #0]
 800a71c:	e7ec      	b.n	800a6f8 <_free_r+0x28>
 800a71e:	461a      	mov	r2, r3
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	b10b      	cbz	r3, 800a728 <_free_r+0x58>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d9fa      	bls.n	800a71e <_free_r+0x4e>
 800a728:	6811      	ldr	r1, [r2, #0]
 800a72a:	1855      	adds	r5, r2, r1
 800a72c:	42a5      	cmp	r5, r4
 800a72e:	d10b      	bne.n	800a748 <_free_r+0x78>
 800a730:	6824      	ldr	r4, [r4, #0]
 800a732:	4421      	add	r1, r4
 800a734:	1854      	adds	r4, r2, r1
 800a736:	42a3      	cmp	r3, r4
 800a738:	6011      	str	r1, [r2, #0]
 800a73a:	d1dd      	bne.n	800a6f8 <_free_r+0x28>
 800a73c:	681c      	ldr	r4, [r3, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	6053      	str	r3, [r2, #4]
 800a742:	4421      	add	r1, r4
 800a744:	6011      	str	r1, [r2, #0]
 800a746:	e7d7      	b.n	800a6f8 <_free_r+0x28>
 800a748:	d902      	bls.n	800a750 <_free_r+0x80>
 800a74a:	230c      	movs	r3, #12
 800a74c:	6003      	str	r3, [r0, #0]
 800a74e:	e7d3      	b.n	800a6f8 <_free_r+0x28>
 800a750:	6825      	ldr	r5, [r4, #0]
 800a752:	1961      	adds	r1, r4, r5
 800a754:	428b      	cmp	r3, r1
 800a756:	bf04      	itt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	6063      	str	r3, [r4, #4]
 800a75e:	bf04      	itt	eq
 800a760:	1949      	addeq	r1, r1, r5
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	6054      	str	r4, [r2, #4]
 800a766:	e7c7      	b.n	800a6f8 <_free_r+0x28>
 800a768:	b003      	add	sp, #12
 800a76a:	bd30      	pop	{r4, r5, pc}
 800a76c:	20001008 	.word	0x20001008

0800a770 <_malloc_r>:
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	1ccd      	adds	r5, r1, #3
 800a774:	f025 0503 	bic.w	r5, r5, #3
 800a778:	3508      	adds	r5, #8
 800a77a:	2d0c      	cmp	r5, #12
 800a77c:	bf38      	it	cc
 800a77e:	250c      	movcc	r5, #12
 800a780:	2d00      	cmp	r5, #0
 800a782:	4606      	mov	r6, r0
 800a784:	db01      	blt.n	800a78a <_malloc_r+0x1a>
 800a786:	42a9      	cmp	r1, r5
 800a788:	d903      	bls.n	800a792 <_malloc_r+0x22>
 800a78a:	230c      	movs	r3, #12
 800a78c:	6033      	str	r3, [r6, #0]
 800a78e:	2000      	movs	r0, #0
 800a790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a792:	f000 f87d 	bl	800a890 <__malloc_lock>
 800a796:	4921      	ldr	r1, [pc, #132]	; (800a81c <_malloc_r+0xac>)
 800a798:	680a      	ldr	r2, [r1, #0]
 800a79a:	4614      	mov	r4, r2
 800a79c:	b99c      	cbnz	r4, 800a7c6 <_malloc_r+0x56>
 800a79e:	4f20      	ldr	r7, [pc, #128]	; (800a820 <_malloc_r+0xb0>)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	b923      	cbnz	r3, 800a7ae <_malloc_r+0x3e>
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f000 f862 	bl	800a870 <_sbrk_r>
 800a7ac:	6038      	str	r0, [r7, #0]
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 f85d 	bl	800a870 <_sbrk_r>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	d123      	bne.n	800a802 <_malloc_r+0x92>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	6033      	str	r3, [r6, #0]
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f000 f86c 	bl	800a89c <__malloc_unlock>
 800a7c4:	e7e3      	b.n	800a78e <_malloc_r+0x1e>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	1b5b      	subs	r3, r3, r5
 800a7ca:	d417      	bmi.n	800a7fc <_malloc_r+0x8c>
 800a7cc:	2b0b      	cmp	r3, #11
 800a7ce:	d903      	bls.n	800a7d8 <_malloc_r+0x68>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	441c      	add	r4, r3
 800a7d4:	6025      	str	r5, [r4, #0]
 800a7d6:	e004      	b.n	800a7e2 <_malloc_r+0x72>
 800a7d8:	6863      	ldr	r3, [r4, #4]
 800a7da:	42a2      	cmp	r2, r4
 800a7dc:	bf0c      	ite	eq
 800a7de:	600b      	streq	r3, [r1, #0]
 800a7e0:	6053      	strne	r3, [r2, #4]
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 f85a 	bl	800a89c <__malloc_unlock>
 800a7e8:	f104 000b 	add.w	r0, r4, #11
 800a7ec:	1d23      	adds	r3, r4, #4
 800a7ee:	f020 0007 	bic.w	r0, r0, #7
 800a7f2:	1ac2      	subs	r2, r0, r3
 800a7f4:	d0cc      	beq.n	800a790 <_malloc_r+0x20>
 800a7f6:	1a1b      	subs	r3, r3, r0
 800a7f8:	50a3      	str	r3, [r4, r2]
 800a7fa:	e7c9      	b.n	800a790 <_malloc_r+0x20>
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	6864      	ldr	r4, [r4, #4]
 800a800:	e7cc      	b.n	800a79c <_malloc_r+0x2c>
 800a802:	1cc4      	adds	r4, r0, #3
 800a804:	f024 0403 	bic.w	r4, r4, #3
 800a808:	42a0      	cmp	r0, r4
 800a80a:	d0e3      	beq.n	800a7d4 <_malloc_r+0x64>
 800a80c:	1a21      	subs	r1, r4, r0
 800a80e:	4630      	mov	r0, r6
 800a810:	f000 f82e 	bl	800a870 <_sbrk_r>
 800a814:	3001      	adds	r0, #1
 800a816:	d1dd      	bne.n	800a7d4 <_malloc_r+0x64>
 800a818:	e7cf      	b.n	800a7ba <_malloc_r+0x4a>
 800a81a:	bf00      	nop
 800a81c:	20001008 	.word	0x20001008
 800a820:	2000100c 	.word	0x2000100c

0800a824 <_realloc_r>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	4607      	mov	r7, r0
 800a828:	4614      	mov	r4, r2
 800a82a:	460e      	mov	r6, r1
 800a82c:	b921      	cbnz	r1, 800a838 <_realloc_r+0x14>
 800a82e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a832:	4611      	mov	r1, r2
 800a834:	f7ff bf9c 	b.w	800a770 <_malloc_r>
 800a838:	b922      	cbnz	r2, 800a844 <_realloc_r+0x20>
 800a83a:	f7ff ff49 	bl	800a6d0 <_free_r>
 800a83e:	4625      	mov	r5, r4
 800a840:	4628      	mov	r0, r5
 800a842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a844:	f000 f830 	bl	800a8a8 <_malloc_usable_size_r>
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d20f      	bcs.n	800a86c <_realloc_r+0x48>
 800a84c:	4621      	mov	r1, r4
 800a84e:	4638      	mov	r0, r7
 800a850:	f7ff ff8e 	bl	800a770 <_malloc_r>
 800a854:	4605      	mov	r5, r0
 800a856:	2800      	cmp	r0, #0
 800a858:	d0f2      	beq.n	800a840 <_realloc_r+0x1c>
 800a85a:	4631      	mov	r1, r6
 800a85c:	4622      	mov	r2, r4
 800a85e:	f7ff fbf7 	bl	800a050 <memcpy>
 800a862:	4631      	mov	r1, r6
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff ff33 	bl	800a6d0 <_free_r>
 800a86a:	e7e9      	b.n	800a840 <_realloc_r+0x1c>
 800a86c:	4635      	mov	r5, r6
 800a86e:	e7e7      	b.n	800a840 <_realloc_r+0x1c>

0800a870 <_sbrk_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d06      	ldr	r5, [pc, #24]	; (800a88c <_sbrk_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f7 f924 	bl	8001ac8 <_sbrk>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_sbrk_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_sbrk_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	200011fc 	.word	0x200011fc

0800a890 <__malloc_lock>:
 800a890:	4801      	ldr	r0, [pc, #4]	; (800a898 <__malloc_lock+0x8>)
 800a892:	f000 b811 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800a896:	bf00      	nop
 800a898:	20001204 	.word	0x20001204

0800a89c <__malloc_unlock>:
 800a89c:	4801      	ldr	r0, [pc, #4]	; (800a8a4 <__malloc_unlock+0x8>)
 800a89e:	f000 b80c 	b.w	800a8ba <__retarget_lock_release_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	20001204 	.word	0x20001204

0800a8a8 <_malloc_usable_size_r>:
 800a8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ac:	1f18      	subs	r0, r3, #4
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bfbc      	itt	lt
 800a8b2:	580b      	ldrlt	r3, [r1, r0]
 800a8b4:	18c0      	addlt	r0, r0, r3
 800a8b6:	4770      	bx	lr

0800a8b8 <__retarget_lock_acquire_recursive>:
 800a8b8:	4770      	bx	lr

0800a8ba <__retarget_lock_release_recursive>:
 800a8ba:	4770      	bx	lr

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
