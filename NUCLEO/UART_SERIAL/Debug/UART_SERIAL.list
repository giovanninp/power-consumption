
UART_SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a8  080075a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075b0  080075b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080075b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000010  080075c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000107c  080075c8  0002107c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e486  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ecc  00000000  00000000  0003e4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00042398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b85c  00000000  00000000  000455b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aae5  00000000  00000000  00070e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108380  00000000  00000000  0008b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193c71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c30  00000000  00000000  00193cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074f0 	.word	0x080074f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080074f0 	.word	0x080074f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000080 	.word	0x20000080

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f043 0201 	orr.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	609a      	str	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	2b20      	cmp	r3, #32
 800066c:	d101      	bne.n	8000672 <LL_USART_IsActiveFlag_RXNE+0x18>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000690:	2b80      	cmp	r3, #128	; 0x80
 8000692:	d101      	bne.n	8000698 <LL_USART_IsActiveFlag_TXE+0x18>
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f043 0220 	orr.w	r2, r3, #32
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	b29a      	uxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800074e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4313      	orrs	r3, r2
 8000756:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800075a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4013      	ands	r3, r2
 8000760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000762:	68fb      	ldr	r3, [r7, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40021000 	.word	0x40021000

08000774 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800077e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800078a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4013      	ands	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <LL_DMA_SetDataTransferDirection+0x4c>)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	4413      	add	r3, r2
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007c8:	f023 0310 	bic.w	r3, r3, #16
 80007cc:	4908      	ldr	r1, [pc, #32]	; (80007f0 <LL_DMA_SetDataTransferDirection+0x4c>)
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	440a      	add	r2, r1
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	4611      	mov	r1, r2
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	440a      	add	r2, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80007e2:	bf00      	nop
 80007e4:	371c      	adds	r7, #28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	08007558 	.word	0x08007558

080007f4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LL_DMA_SetMode+0x48>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 0220 	bic.w	r2, r3, #32
 8000818:	4908      	ldr	r1, [pc, #32]	; (800083c <LL_DMA_SetMode+0x48>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	440b      	add	r3, r1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	440b      	add	r3, r1
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	08007558 	.word	0x08007558

08000840 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LL_DMA_SetPeriphIncMode+0x48>)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4413      	add	r3, r2
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000864:	4908      	ldr	r1, [pc, #32]	; (8000888 <LL_DMA_SetPeriphIncMode+0x48>)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	440b      	add	r3, r1
 8000872:	4619      	mov	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800087a:	bf00      	nop
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	08007558 	.word	0x08007558

0800088c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LL_DMA_SetMemoryIncMode+0x48>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008b0:	4908      	ldr	r1, [pc, #32]	; (80008d4 <LL_DMA_SetMemoryIncMode+0x48>)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	440b      	add	r3, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	440b      	add	r3, r1
 80008be:	4619      	mov	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80008c6:	bf00      	nop
 80008c8:	371c      	adds	r7, #28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	08007558 	.word	0x08007558

080008d8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LL_DMA_SetPeriphSize+0x48>)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80008fc:	4908      	ldr	r1, [pc, #32]	; (8000920 <LL_DMA_SetPeriphSize+0x48>)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	440b      	add	r3, r1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	440b      	add	r3, r1
 800090a:	4619      	mov	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000912:	bf00      	nop
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	08007558 	.word	0x08007558

08000924 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LL_DMA_SetMemorySize+0x48>)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000948:	4908      	ldr	r1, [pc, #32]	; (800096c <LL_DMA_SetMemorySize+0x48>)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	440b      	add	r3, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	440b      	add	r3, r1
 8000956:	4619      	mov	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800095e:	bf00      	nop
 8000960:	371c      	adds	r7, #28
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	08007558 	.word	0x08007558

08000970 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	4413      	add	r3, r2
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000994:	4908      	ldr	r1, [pc, #32]	; (80009b8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	440b      	add	r3, r1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	440b      	add	r3, r1
 80009a2:	4619      	mov	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]
             Priority);
}
 80009aa:	bf00      	nop
 80009ac:	371c      	adds	r7, #28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	08007558 	.word	0x08007558

080009bc <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	33a8      	adds	r3, #168	; 0xa8
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	210f      	movs	r1, #15
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	401a      	ands	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	210f      	movs	r1, #15
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa93 f3a3 	rbit	r3, r3
 80009ee:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 80009fa:	2320      	movs	r3, #32
 80009fc:	e003      	b.n	8000a06 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fab3 f383 	clz	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4619      	mov	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	408b      	lsls	r3, r1
 8000a0c:	68f9      	ldr	r1, [r7, #12]
 8000a0e:	31a8      	adds	r1, #168	; 0xa8
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8000a14:	bf00      	nop
 8000a16:	3724      	adds	r7, #36	; 0x24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <sendchar>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d10b      	bne.n	8000a4e <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <sendchar+0x54>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	1df9      	adds	r1, r7, #7
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a42:	f004 fe07 	bl	8005654 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <sendchar+0x58>)
 8000a48:	f7ff fe3d 	bl	80006c6 <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 8000a4c:	e00d      	b.n	8000a6a <sendchar+0x4a>
	else if( usart == USART_2){
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d10a      	bne.n	8000a6a <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <sendchar+0x5c>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	1df9      	adds	r1, r7, #7
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	f004 fdf8 	bl	8005654 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <sendchar+0x60>)
 8000a66:	f7ff fe2e 	bl	80006c6 <LL_USART_EnableIT_TXE>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20001028 	.word	0x20001028
 8000a78:	40013800 	.word	0x40013800
 8000a7c:	20001020 	.word	0x20001020
 8000a80:	40004400 	.word	0x40004400

08000a84 <sendString>:

void sendString(char * str, char usart){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 8000a90:	e009      	b.n	8000aa6 <sendString+0x22>
		sendchar(*str, usart);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	78fa      	ldrb	r2, [r7, #3]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffc0 	bl	8000a20 <sendchar>
		str++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f1      	bne.n	8000a92 <sendString+0xe>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <readchar>:

char readchar(char usart){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d109      	bne.n	8000ae0 <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <readchar+0x4c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f107 010f 	add.w	r1, r7, #15
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 ff55 	bl	8005988 <xQueueReceive>
 8000ade:	e00b      	b.n	8000af8 <readchar+0x40>
	else if(usart == USART_2)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d108      	bne.n	8000af8 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <readchar+0x50>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f107 010f 	add.w	r1, r7, #15
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 ff48 	bl	8005988 <xQueueReceive>
	return caracter;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000f98 	.word	0x20000f98
 8000b08:	20001024 	.word	0x20001024

08000b0c <cli>:

void cli(void * vParam)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		caracter = readchar(USART_2);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ffcf 	bl	8000ab8 <readchar>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	73fb      	strb	r3, [r7, #15]
		if(caracter == 'h' || caracter == 'H'){
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b68      	cmp	r3, #104	; 0x68
 8000b22:	d002      	beq.n	8000b2a <cli+0x1e>
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	2b48      	cmp	r3, #72	; 0x48
 8000b28:	d104      	bne.n	8000b34 <cli+0x28>
			sendString("Teste Serial\r\n", USART_1);
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <cli+0x38>)
 8000b2e:	f7ff ffa9 	bl	8000a84 <sendString>
 8000b32:	e006      	b.n	8000b42 <cli+0x36>
		} else if(caracter == 't') {
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2b74      	cmp	r3, #116	; 0x74
 8000b38:	d1ec      	bne.n	8000b14 <cli+0x8>
			sendString("Teste Serial\r\n", USART_2);
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	4801      	ldr	r0, [pc, #4]	; (8000b44 <cli+0x38>)
 8000b3e:	f7ff ffa1 	bl	8000a84 <sendString>
		caracter = readchar(USART_2);
 8000b42:	e7e7      	b.n	8000b14 <cli+0x8>
 8000b44:	08007514 	.word	0x08007514

08000b48 <usart_1_fcn>:
		}
	}
}

void usart_1_fcn(void * vParam){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	char c;
	while(1){
		c = readchar(USART_1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff ffb1 	bl	8000ab8 <readchar>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]
		if( c != 0){
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0f7      	beq.n	8000b50 <usart_1_fcn+0x8>
			sendchar(c, USART_2);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2102      	movs	r1, #2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5b 	bl	8000a20 <sendchar>
		c = readchar(USART_1);
 8000b6a:	e7f1      	b.n	8000b50 <usart_1_fcn+0x8>

08000b6c <USART_2_IRQHandler>:
		}
	}
}

void USART_2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000b72:	482a      	ldr	r0, [pc, #168]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000b74:	f7ff fd84 	bl	8000680 <LL_USART_IsActiveFlag_TXE>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d026      	beq.n	8000bcc <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000b7e:	e014      	b.n	8000baa <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <USART_2_IRQHandler+0xb4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f107 020c 	add.w	r2, r7, #12
 8000b88:	f107 010b 	add.w	r1, r7, #11
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 ffdb 	bl	8005b48 <xQueueReceiveFromISR>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d103      	bne.n	8000ba0 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 8000b98:	4820      	ldr	r0, [pc, #128]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000b9a:	f7ff fda4 	bl	80006e6 <LL_USART_DisableIT_TXE>
 8000b9e:	e00a      	b.n	8000bb6 <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000ba0:	7afb      	ldrb	r3, [r7, #11]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481d      	ldr	r0, [pc, #116]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000ba6:	f7ff fdbc 	bl	8000722 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000baa:	481c      	ldr	r0, [pc, #112]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000bac:	f7ff fd68 	bl	8000680 <LL_USART_IsActiveFlag_TXE>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1e4      	bne.n	8000b80 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <USART_2_IRQHandler+0x60>
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <USART_2_IRQHandler+0xb8>)
 8000bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	f3bf 8f4f 	dsb	sy
 8000bc8:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000bce:	f7ff fd44 	bl	800065a <LL_USART_IsActiveFlag_RXNE>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d01d      	beq.n	8000c14 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000bd8:	e00b      	b.n	8000bf2 <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 8000bda:	4810      	ldr	r0, [pc, #64]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000bdc:	f7ff fd93 	bl	8000706 <LL_USART_ReceiveData8>
 8000be0:	4603      	mov	r3, r0
        	uint8_t byte =
 8000be2:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <USART_2_IRQHandler+0xbc>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	1d3a      	adds	r2, r7, #4
 8000bea:	1cf9      	adds	r1, r7, #3
 8000bec:	2300      	movs	r3, #0
 8000bee:	f004 fe2f 	bl	8005850 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <USART_2_IRQHandler+0xb0>)
 8000bf4:	f7ff fd31 	bl	800065a <LL_USART_IsActiveFlag_RXNE>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1ed      	bne.n	8000bda <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <USART_2_IRQHandler+0xa8>
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <USART_2_IRQHandler+0xb8>)
 8000c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	f3bf 8f6f 	isb	sy
    }
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	20001020 	.word	0x20001020
 8000c24:	e000ed04 	.word	0xe000ed04
 8000c28:	20001024 	.word	0x20001024

08000c2c <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000c32:	482a      	ldr	r0, [pc, #168]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000c34:	f7ff fd24 	bl	8000680 <LL_USART_IsActiveFlag_TXE>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d026      	beq.n	8000c8c <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000c3e:	e014      	b.n	8000c6a <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <USART_1_IRQHandler+0xb4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f107 020c 	add.w	r2, r7, #12
 8000c48:	f107 010b 	add.w	r1, r7, #11
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 ff7b 	bl	8005b48 <xQueueReceiveFromISR>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 8000c58:	4820      	ldr	r0, [pc, #128]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000c5a:	f7ff fd44 	bl	80006e6 <LL_USART_DisableIT_TXE>
 8000c5e:	e00a      	b.n	8000c76 <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	4619      	mov	r1, r3
 8000c64:	481d      	ldr	r0, [pc, #116]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000c66:	f7ff fd5c 	bl	8000722 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000c6a:	481c      	ldr	r0, [pc, #112]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000c6c:	f7ff fd08 	bl	8000680 <LL_USART_IsActiveFlag_TXE>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1e4      	bne.n	8000c40 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <USART_1_IRQHandler+0x60>
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <USART_1_IRQHandler+0xb8>)
 8000c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000c8e:	f7ff fce4 	bl	800065a <LL_USART_IsActiveFlag_RXNE>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d01d      	beq.n	8000cd4 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000c98:	e00b      	b.n	8000cb2 <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000c9c:	f7ff fd33 	bl	8000706 <LL_USART_ReceiveData8>
 8000ca0:	4603      	mov	r3, r0
        	uint8_t byte =
 8000ca2:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <USART_1_IRQHandler+0xbc>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	1d3a      	adds	r2, r7, #4
 8000caa:	1cf9      	adds	r1, r7, #3
 8000cac:	2300      	movs	r3, #0
 8000cae:	f004 fdcf 	bl	8005850 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <USART_1_IRQHandler+0xb0>)
 8000cb4:	f7ff fcd1 	bl	800065a <LL_USART_IsActiveFlag_RXNE>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1ed      	bne.n	8000c9a <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <USART_1_IRQHandler+0xa8>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <USART_1_IRQHandler+0xb8>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	f3bf 8f6f 	isb	sy
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40013800 	.word	0x40013800
 8000ce0:	20001028 	.word	0x20001028
 8000ce4:	e000ed04 	.word	0xe000ed04
 8000ce8:	20000f98 	.word	0x20000f98

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b5b0      	push	{r4, r5, r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fbc8 	bl	8001486 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f84d 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 f9d1 	bl	80010a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cfe:	f000 f8cf 	bl	8000ea0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000d02:	f000 f9a7 	bl	8001054 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d06:	f000 f89b 	bl	8000e40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f004 fc89 	bl	8005622 <xQueueCreateMutex>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <main+0x88>)
 8000d14:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 8000d16:	2001      	movs	r0, #1
 8000d18:	f004 fc83 	bl	8005622 <xQueueCreateMutex>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <main+0x8c>)
 8000d20:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <main+0x90>)
 8000d24:	1d3c      	adds	r4, r7, #4
 8000d26:	461d      	mov	r5, r3
 8000d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fa82 	bl	8005242 <osThreadCreate>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <main+0x94>)
 8000d42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 8000d44:	2300      	movs	r3, #0
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <main+0x98>)
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <main+0x9c>)
 8000d54:	f005 f8e5 	bl	8005f22 <xTaskCreate>
 			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
 			  NULL,       /* parametro para a task */
 			  1,          /* nivel de prioridade */
 			  NULL);      /* ponteiro para o handle da task */

  xTaskCreate(usart_1_fcn,    /* Nome da funcao que contem a task */
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2300      	movs	r3, #0
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	4909      	ldr	r1, [pc, #36]	; (8000d8c <main+0xa0>)
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <main+0xa4>)
 8000d68:	f005 f8db 	bl	8005f22 <xTaskCreate>
			  NULL);      /* ponteiro para o handle da task */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d6c:	f004 fa62 	bl	8005234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <main+0x84>
 8000d72:	bf00      	nop
 8000d74:	20000280 	.word	0x20000280
 8000d78:	20000284 	.word	0x20000284
 8000d7c:	08007534 	.word	0x08007534
 8000d80:	20000f94 	.word	0x20000f94
 8000d84:	08007524 	.word	0x08007524
 8000d88:	08000b0d 	.word	0x08000b0d
 8000d8c:	08007528 	.word	0x08007528
 8000d90:	08000b49 	.word	0x08000b49

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	; 0x58
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2244      	movs	r2, #68	; 0x44
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 fb9c 	bl	80074e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000db6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dba:	f000 fedf 	bl	8001b7c <HAL_PWREx_ControlVoltageScaling>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dc4:	f000 f9e0 	bl	8001188 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dc8:	f000 feba 	bl	8001b40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <SystemClock_Config+0xa8>)
 8000dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <SystemClock_Config+0xa8>)
 8000dd4:	f023 0318 	bic.w	r3, r3, #24
 8000dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ddc:	2314      	movs	r3, #20
 8000dde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 ff15 	bl	8001c28 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e04:	f000 f9c0 	bl	8001188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fae7 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e2c:	f000 f9ac 	bl	8001188 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e30:	f002 f802 	bl	8002e38 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e34:	bf00      	nop
 8000e36:	3758      	adds	r7, #88	; 0x58
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000

08000e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MX_USART1_UART_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART1_UART_Init+0x58>)
 8000e84:	f002 fc8c 	bl	80037a0 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 f97b 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000f9c 	.word	0x20000f9c
 8000e9c:	40013800 	.word	0x40013800

08000ea0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b0      	sub	sp, #192	; 0xc0
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	tx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f004 fb46 	bl	800553c <xQueueGenericCreate>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a62      	ldr	r2, [pc, #392]	; (800103c <MX_USART2_UART_Init+0x19c>)
 8000eb4:	6013      	str	r3, [r2, #0]
	rx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	200a      	movs	r0, #10
 8000ebc:	f004 fb3e 	bl	800553c <xQueueGenericCreate>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a5f      	ldr	r2, [pc, #380]	; (8001040 <MX_USART2_UART_Init+0x1a0>)
 8000ec4:	6013      	str	r3, [r2, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000ec6:	485f      	ldr	r0, [pc, #380]	; (8001044 <MX_USART2_UART_Init+0x1a4>)
 8000ec8:	f7ff fbed 	bl	80006a6 <LL_USART_EnableIT_RXNE>


  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ecc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2288      	movs	r2, #136	; 0x88
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f006 faf1 	bl	80074e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fcab 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 8000f14:	f000 f938 	bl	8001188 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000f18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f1c:	f7ff fc2a 	bl	8000774 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fc0f 	bl	8000744 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000f26:	230c      	movs	r3, #12
 8000f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f44:	2307      	movs	r3, #7
 8000f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f003 fc38 	bl	80047c8 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8000f58:	2202      	movs	r2, #2
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	483a      	ldr	r0, [pc, #232]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f5e:	f7ff fd2d 	bl	80009bc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	4838      	ldr	r0, [pc, #224]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f68:	f7ff fc1c 	bl	80007a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2105      	movs	r1, #5
 8000f70:	4835      	ldr	r0, [pc, #212]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f72:	f7ff fcfd 	bl	8000970 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8000f76:	2220      	movs	r2, #32
 8000f78:	2105      	movs	r1, #5
 8000f7a:	4833      	ldr	r0, [pc, #204]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f7c:	f7ff fc3a 	bl	80007f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2105      	movs	r1, #5
 8000f84:	4830      	ldr	r0, [pc, #192]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f86:	f7ff fc5b 	bl	8000840 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	482e      	ldr	r0, [pc, #184]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f90:	f7ff fc7c 	bl	800088c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2105      	movs	r1, #5
 8000f98:	482b      	ldr	r0, [pc, #172]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000f9a:	f7ff fc9d 	bl	80008d8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4829      	ldr	r0, [pc, #164]	; (8001048 <MX_USART2_UART_Init+0x1a8>)
 8000fa4:	f7ff fcbe 	bl	8000924 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000fa8:	f7ff faa8 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff faf8 	bl	80005a8 <NVIC_EncodePriority>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2026      	movs	r0, #38	; 0x26
 8000fbe:	f7ff fac9 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000fc2:	2026      	movs	r0, #38	; 0x26
 8000fc4:	f7ff faa8 	bl	8000518 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000fc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8000ff4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x1a4>)
 8000ffc:	f004 f886 	bl	800510c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <MX_USART2_UART_Init+0x1a4>)
 8001002:	f7ff fb14 	bl	800062e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001006:	480f      	ldr	r0, [pc, #60]	; (8001044 <MX_USART2_UART_Init+0x1a4>)
 8001008:	f7ff fb01 	bl	800060e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	2080      	movs	r0, #128	; 0x80
 8001012:	f004 fa93 	bl	800553c <xQueueGenericCreate>
 8001016:	4603      	mov	r3, r0
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x1ac>)
 800101a:	6013      	str	r3, [r2, #0]
  rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 800101c:	2200      	movs	r2, #0
 800101e:	2101      	movs	r1, #1
 8001020:	2005      	movs	r0, #5
 8001022:	f004 fa8b 	bl	800553c <xQueueGenericCreate>
 8001026:	4603      	mov	r3, r0
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <MX_USART2_UART_Init+0x1b0>)
 800102a:	6013      	str	r3, [r2, #0]

  LL_USART_EnableIT_RXNE(USART2);
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART2_UART_Init+0x1a4>)
 800102e:	f7ff fb3a 	bl	80006a6 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	37c0      	adds	r7, #192	; 0xc0
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001028 	.word	0x20001028
 8001040:	20000f98 	.word	0x20000f98
 8001044:	40004400 	.word	0x40004400
 8001048:	40020000 	.word	0x40020000
 800104c:	20001020 	.word	0x20001020
 8001050:	20001024 	.word	0x20001024

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_DMA_Init+0x48>)
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <MX_DMA_Init+0x48>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6493      	str	r3, [r2, #72]	; 0x48
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_DMA_Init+0x48>)
 8001068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001072:	f7ff fa43 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8001076:	4603      	mov	r3, r0
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa93 	bl	80005a8 <NVIC_EncodePriority>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	2010      	movs	r0, #16
 8001088:	f7ff fa64 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800108c:	2010      	movs	r0, #16
 800108e:	f7ff fa43 	bl	8000518 <__NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_GPIO_Init+0xac>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a24      	ldr	r2, [pc, #144]	; (800114c <MX_GPIO_Init+0xac>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_GPIO_Init+0xac>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_GPIO_Init+0xac>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a1e      	ldr	r2, [pc, #120]	; (800114c <MX_GPIO_Init+0xac>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_GPIO_Init+0xac>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_GPIO_Init+0xac>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <MX_GPIO_Init+0xac>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_GPIO_Init+0xac>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2120      	movs	r1, #32
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f000 fd03 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800110a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0xb0>)
 8001120:	f000 fb4c 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001124:	2320      	movs	r3, #32
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f000 fb3d 	bl	80017bc <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000800 	.word	0x48000800

08001154 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f004 f8bc 	bl	80052da <osDelay>
 8001162:	e7fb      	b.n	800115c <StartDefaultTask+0x8>

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f000 f99f 	bl	80014b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40012c00 	.word	0x40012c00

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_MspInit+0x4c>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_MspInit+0x4c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_MspInit+0x4c>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_MspInit+0x4c>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_MspInit+0x4c>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	210f      	movs	r1, #15
 80011ce:	f06f 0001 	mvn.w	r0, #1
 80011d2:	f000 fa49 	bl	8001668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0ac      	sub	sp, #176	; 0xb0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2288      	movs	r2, #136	; 0x88
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f006 f96b 	bl	80074e0 <memset>
  if(huart->Instance==USART1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_UART_MspInit+0xc4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d144      	bne.n	800129e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001218:	2300      	movs	r3, #0
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fb1f 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800122c:	f7ff ffac 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_UART_MspInit+0xc8>)
 8001232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_UART_MspInit+0xc8>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6613      	str	r3, [r2, #96]	; 0x60
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_MspInit+0xc8>)
 800123e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0xc8>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_UART_MspInit+0xc8>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0xc8>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001260:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127a:	2307      	movs	r3, #7
 800127c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f000 fa97 	bl	80017bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	2025      	movs	r0, #37	; 0x25
 8001294:	f000 f9e8 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001298:	2025      	movs	r0, #37	; 0x25
 800129a:	f000 fa01 	bl	80016a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	37b0      	adds	r7, #176	; 0xb0
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2019      	movs	r0, #25
 80012c6:	f000 f9cf 	bl	8001668 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012ca:	2019      	movs	r0, #25
 80012cc:	f000 f9e8 	bl	80016a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_InitTick+0x9c>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_InitTick+0x9c>)
 80012d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012da:	6613      	str	r3, [r2, #96]	; 0x60
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_InitTick+0x9c>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e8:	f107 0210 	add.w	r2, r7, #16
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fa24 	bl	8002740 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012f8:	f001 fa0c 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 80012fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <HAL_InitTick+0xa0>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0c9b      	lsrs	r3, r3, #18
 8001308:	3b01      	subs	r3, #1
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_InitTick+0xa4>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_InitTick+0xa8>)
 8001310:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_InitTick+0xa4>)
 8001314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001318:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_InitTick+0xa4>)
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_InitTick+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_InitTick+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <HAL_InitTick+0xa4>)
 800132e:	f001 ff65 	bl	80031fc <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d104      	bne.n	8001342 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001338:	4806      	ldr	r0, [pc, #24]	; (8001354 <HAL_InitTick+0xa4>)
 800133a:	f001 ffc1 	bl	80032c0 <HAL_TIM_Base_Start_IT>
 800133e:	4603      	mov	r3, r0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	431bde83 	.word	0x431bde83
 8001354:	2000102c 	.word	0x2000102c
 8001358:	40012c00 	.word	0x40012c00

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800139e:	f001 ffff 	bl	80033a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000102c 	.word	0x2000102c

080013ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 80013b0:	f7ff fc3c 	bl	8000c2c <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <USART1_IRQHandler+0x14>)
 80013b6:	f002 fa41 	bl	800383c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000f9c 	.word	0x20000f9c

080013c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 80013c8:	f7ff fbd0 	bl	8000b6c <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <SystemInit+0x5c>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <SystemInit+0x5c>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <SystemInit+0x60>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <SystemInit+0x60>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <SystemInit+0x60>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <SystemInit+0x60>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <SystemInit+0x60>)
 80013fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001400:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001404:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <SystemInit+0x60>)
 8001408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <SystemInit+0x60>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <SystemInit+0x60>)
 8001414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SystemInit+0x60>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	40021000 	.word	0x40021000

08001434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001438:	f7ff ffca 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800143c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <LoopForever+0xa>)
	ldr	r3, =_edata
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LoopForever+0xe>)
	adds	r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800144e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
	ldr	r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001456:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <LoopForever+0x16>)
	cmp	r2, r3
 800145e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f006 f80b 	bl	800747c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001466:	f7ff fc41 	bl	8000cec <main>

0800146a <LoopForever>:

LoopForever:
    b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800146c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001470:	080075b8 	.word	0x080075b8
	ldr	r0, =_sdata
 8001474:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001478:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800147c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001480:	2000107c 	.word	0x2000107c

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>

08001486 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f8de 	bl	8001652 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff ff0a 	bl	80012b0 <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	e001      	b.n	80014ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a8:	f7ff fe74 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20001078 	.word	0x20001078

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20001078 	.word	0x20001078

080014f8 <__NVIC_SetPriorityGrouping>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	; (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff4c 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800167a:	f7ff ff61 	bl	8001540 <__NVIC_GetPriorityGrouping>
 800167e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	6978      	ldr	r0, [r7, #20]
 8001686:	f7ff ffb1 	bl	80015ec <NVIC_EncodePriority>
 800168a:	4602      	mov	r2, r0
 800168c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff80 	bl	8001598 <__NVIC_SetPriority>
}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff54 	bl	800155c <__NVIC_EnableIRQ>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e022      	b.n	800172c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 020e 	bic.w	r2, r2, #14
 80016f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021c 	and.w	r2, r3, #28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d005      	beq.n	800175c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2204      	movs	r2, #4
 8001754:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e029      	b.n	80017b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020e 	bic.w	r2, r2, #14
 800176a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	f003 021c 	and.w	r2, r3, #28
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
    }
  }
  return status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e17f      	b.n	8001acc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8171 	beq.w	8001ac6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d00b      	beq.n	8001804 <HAL_GPIO_Init+0x48>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f8:	2b11      	cmp	r3, #17
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b12      	cmp	r3, #18
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d118      	bne.n	80018a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001878:	2201      	movs	r2, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	f003 0201 	and.w	r2, r3, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x128>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b12      	cmp	r3, #18
 80018e2:	d123      	bne.n	800192c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ac 	beq.w	8001ac6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_GPIO_Init+0x330>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	4a5e      	ldr	r2, [pc, #376]	; (8001aec <HAL_GPIO_Init+0x330>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6613      	str	r3, [r2, #96]	; 0x60
 800197a:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <HAL_GPIO_Init+0x330>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001986:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x242>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x338>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x23e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x33c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x23a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x340>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x236>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x344>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x232>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x348>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x22e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x34c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x22a>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x244>
 80019fe:	2300      	movs	r3, #0
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a10:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a42:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a6c:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_GPIO_Init+0x350>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae78 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	48001000 	.word	0x48001000
 8001b04:	48001400 	.word	0x48001400
 8001b08:	48001800 	.word	0x48001800
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000

08001b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40007000 	.word	0x40007000

08001b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8a:	d130      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b98:	d038      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2232      	movs	r2, #50	; 0x32
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9b      	lsrs	r3, r3, #18
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc0:	e002      	b.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd4:	d102      	bne.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f2      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be8:	d110      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e00f      	b.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfa:	d007      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	20000000 	.word	0x20000000
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e3d4      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	4ba1      	ldr	r3, [pc, #644]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c44:	4b9e      	ldr	r3, [pc, #632]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80e4 	beq.w	8001e24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4a>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	f040 808b 	bne.w	8001d80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	f040 8087 	bne.w	8001d80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c72:	4b93      	ldr	r3, [pc, #588]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x62>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e3ac      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	4b8c      	ldr	r3, [pc, #560]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x7c>
 8001c9a:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_OscConfig+0x88>
 8001ca4:	4b86      	ldr	r3, [pc, #536]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d223      	bcs.n	8001cfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fd73 	bl	80027a4 <RCC_SetFlashLatencyFromMSIRange>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e38d      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc8:	4b7d      	ldr	r3, [pc, #500]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a7c      	ldr	r2, [pc, #496]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4977      	ldr	r1, [pc, #476]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4972      	ldr	r1, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	e025      	b.n	8001d48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfc:	4b70      	ldr	r3, [pc, #448]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6f      	ldr	r2, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	496a      	ldr	r1, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	4965      	ldr	r1, [pc, #404]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fd33 	bl	80027a4 <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e34d      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d48:	f000 fc36 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	495a      	ldr	r1, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x29c>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_OscConfig+0x2a0>)
 8001d66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_RCC_OscConfig+0x2a4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fa9f 	bl	80012b0 <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d052      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	e331      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d032      	beq.n	8001dee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d88:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fba4 	bl	80014e0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fba0 	bl	80014e0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e31a      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	493b      	ldr	r1, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	4936      	ldr	r1, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e01a      	b.n	8001e24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dee:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a33      	ldr	r2, [pc, #204]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb71 	bl	80014e0 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e02:	f7ff fb6d 	bl	80014e0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e2e7      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1da>
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d074      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x21a>
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d10e      	bne.n	8001e5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d064      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d160      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e2c4      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x24a>
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e01d      	b.n	8001eae <HAL_RCC_OscConfig+0x286>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x26e>
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x286>
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <HAL_RCC_OscConfig+0x298>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fb13 	bl	80014e0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ebc:	e011      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2ba>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08007560 	.word	0x08007560
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fb06 	bl	80014e0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e280      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	4baf      	ldr	r3, [pc, #700]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x2a8>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff faf6 	bl	80014e0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff faf2 	bl	80014e0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e26c      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	4ba5      	ldr	r3, [pc, #660]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2d0>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d060      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x310>
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d119      	bne.n	8001f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d116      	bne.n	8001f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	4b99      	ldr	r3, [pc, #612]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x328>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e249      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b93      	ldr	r3, [pc, #588]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	4990      	ldr	r1, [pc, #576]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	e040      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d023      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a8b      	ldr	r2, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fab1 	bl	80014e0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff faad 	bl	80014e0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e227      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	497c      	ldr	r1, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e018      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a79      	ldr	r2, [pc, #484]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fa8d 	bl	80014e0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fa89 	bl	80014e0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e203      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03c      	beq.n	800206e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002002:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff fa68 	bl	80014e0 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff fa64 	bl	80014e0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1de      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002026:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ef      	beq.n	8002014 <HAL_RCC_OscConfig+0x3ec>
 8002034:	e01b      	b.n	800206e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fa4b 	bl	80014e0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff fa47 	bl	80014e0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1c1      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ef      	bne.n	800204e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80a6 	beq.w	80021c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002080:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_OscConfig+0x57c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d118      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x57c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <HAL_RCC_OscConfig+0x57c>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c0:	f7ff fa0e 	bl	80014e0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7ff fa0a 	bl	80014e0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e184      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_RCC_OscConfig+0x57c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0x4d8>
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fe:	e024      	b.n	800214a <HAL_RCC_OscConfig+0x522>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d110      	bne.n	800212a <HAL_RCC_OscConfig+0x502>
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002128:	e00f      	b.n	800214a <HAL_RCC_OscConfig+0x522>
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff f9c5 	bl	80014e0 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff f9c1 	bl	80014e0 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e139      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x578>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ed      	beq.n	800215a <HAL_RCC_OscConfig+0x532>
 800217e:	e01a      	b.n	80021b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff f9ae 	bl	80014e0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002186:	e00f      	b.n	80021a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff f9aa 	bl	80014e0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d906      	bls.n	80021a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e122      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a8:	4b90      	ldr	r3, [pc, #576]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e8      	bne.n	8002188 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8108 	beq.w	80023e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f040 80d0 	bne.w	800237c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021dc:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d130      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	3b01      	subs	r3, #1
 80021fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d127      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d11f      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800221c:	2a07      	cmp	r2, #7
 800221e:	bf14      	ite	ne
 8002220:	2201      	movne	r2, #1
 8002222:	2200      	moveq	r2, #0
 8002224:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d109      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d06e      	beq.n	8002330 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d069      	beq.n	800232c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002258:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002264:	4b61      	ldr	r3, [pc, #388]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b7      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002274:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5c      	ldr	r2, [pc, #368]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800227a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002280:	f7ff f92e 	bl	80014e0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f92a 	bl	80014e0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0a4      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800229a:	4b54      	ldr	r3, [pc, #336]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a6:	4b51      	ldr	r3, [pc, #324]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <HAL_RCC_OscConfig+0x7c8>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022b6:	3a01      	subs	r2, #1
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022c0:	0212      	lsls	r2, r2, #8
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022c8:	0852      	lsrs	r2, r2, #1
 80022ca:	3a01      	subs	r2, #1
 80022cc:	0552      	lsls	r2, r2, #21
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022d4:	0852      	lsrs	r2, r2, #1
 80022d6:	3a01      	subs	r2, #1
 80022d8:	0652      	lsls	r2, r2, #25
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e0:	0912      	lsrs	r2, r2, #4
 80022e2:	0452      	lsls	r2, r2, #17
 80022e4:	430a      	orrs	r2, r1
 80022e6:	4941      	ldr	r1, [pc, #260]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022ec:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a3e      	ldr	r2, [pc, #248]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f8:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002304:	f7ff f8ec 	bl	80014e0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff f8e8 	bl	80014e0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e062      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800232a:	e05a      	b.n	80023e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e059      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d152      	bne.n	80023e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2a      	ldr	r2, [pc, #168]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a27      	ldr	r2, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002354:	f7ff f8c4 	bl	80014e0 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7ff f8c0 	bl	80014e0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e03a      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x734>
 800237a:	e032      	b.n	80023e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d02d      	beq.n	80023de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80023a0:	f023 0303 	bic.w	r3, r3, #3
 80023a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80023ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff f893 	bl	80014e0 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff f88f 	bl	80014e0 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e009      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_OscConfig+0x7c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x796>
 80023dc:	e001      	b.n	80023e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	f99d808c 	.word	0xf99d808c

080023f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0c8      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4961      	ldr	r1, [pc, #388]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b0      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d04c      	beq.n	80024de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d107      	bne.n	800245c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d121      	bne.n	800249c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e09e      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d107      	bne.n	8002474 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d115      	bne.n	800249c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e092      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e086      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e07e      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 0203 	bic.w	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	493f      	ldr	r1, [pc, #252]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ae:	f7ff f817 	bl	80014e0 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7ff f813 	bl	80014e0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e066      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 020c 	and.w	r2, r3, #12
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	429a      	cmp	r2, r3
 80024dc:	d1eb      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	492c      	ldr	r1, [pc, #176]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4924      	ldr	r1, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1b0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e036      	b.n	800259a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4918      	ldr	r1, [pc, #96]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4910      	ldr	r1, [pc, #64]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256a:	f000 f825 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490c      	ldr	r1, [pc, #48]	; (80025ac <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fe8e 	bl	80012b0 <HAL_InitTick>
 8002594:	4603      	mov	r3, r0
 8002596:	72fb      	strb	r3, [r7, #11]

  return status;
 8002598:	7afb      	ldrb	r3, [r7, #11]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08007560 	.word	0x08007560
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c6:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d0:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d121      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d11e      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ec:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e005      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d102      	bne.n	8002636 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e004      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d101      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCC_GetSysClockFreq+0x114>)
 800263e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d134      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0xa6>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d003      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xac>
 800265c:	e005      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002660:	617b      	str	r3, [r7, #20]
      break;
 8002662:	e005      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002666:	617b      	str	r3, [r7, #20]
      break;
 8002668:	e002      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	617b      	str	r3, [r7, #20]
      break;
 800266e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	3301      	adds	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	fb02 f203 	mul.w	r2, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	0e5b      	lsrs	r3, r3, #25
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	3301      	adds	r3, #1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026b0:	69bb      	ldr	r3, [r7, #24]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08007578 	.word	0x08007578
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08007570 	.word	0x08007570

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002718:	f7ff ffda 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0adb      	lsrs	r3, r3, #11
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCC_GetPCLK2Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08007570 	.word	0x08007570

08002740 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	220f      	movs	r2, #15
 800274e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_RCC_GetClockConfig+0x5c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_RCC_GetClockConfig+0x5c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_GetClockConfig+0x5c>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_GetClockConfig+0x5c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCC_GetClockConfig+0x60>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0207 	and.w	r2, r3, #7
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40022000 	.word	0x40022000

080027a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027b0:	4b2a      	ldr	r3, [pc, #168]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027bc:	f7ff f9d0 	bl	8001b60 <HAL_PWREx_GetVoltageRange>
 80027c0:	6178      	str	r0, [r7, #20]
 80027c2:	e014      	b.n	80027ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027dc:	f7ff f9c0 	bl	8001b60 <HAL_PWREx_GetVoltageRange>
 80027e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f4:	d10b      	bne.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d919      	bls.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002800:	d902      	bls.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002802:	2302      	movs	r3, #2
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e013      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002808:	2301      	movs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e010      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d902      	bls.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002814:	2303      	movs	r3, #3
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e00a      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d102      	bne.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002820:	2302      	movs	r3, #2
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	e004      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d101      	bne.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800282c:	2301      	movs	r3, #1
 800282e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 0207 	bic.w	r2, r3, #7
 8002838:	4909      	ldr	r1, [pc, #36]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800286c:	2300      	movs	r3, #0
 800286e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002870:	2300      	movs	r3, #0
 8002872:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287c:	2b00      	cmp	r3, #0
 800287e:	d041      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002888:	d02a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800288a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800288e:	d824      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800289a:	d81e      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a4:	d010      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028a6:	e018      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a8:	4b86      	ldr	r3, [pc, #536]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a85      	ldr	r2, [pc, #532]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b4:	e015      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 facb 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c6:	e00c      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3320      	adds	r3, #32
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fbb6 	bl	8003040 <RCCEx_PLLSAI2_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d8:	e003      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	74fb      	strb	r3, [r7, #19]
      break;
 80028de:	e000      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e8:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f6:	4973      	ldr	r1, [pc, #460]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028fe:	e001      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d041      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002914:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002918:	d02a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800291a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800291e:	d824      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002924:	d008      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800292a:	d81e      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002934:	d010      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002936:	e018      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002938:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002942:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002944:	e015      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fa83 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002956:	e00c      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3320      	adds	r3, #32
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fb6e 	bl	8003040 <RCCEx_PLLSAI2_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002968:	e003      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	74fb      	strb	r3, [r7, #19]
      break;
 800296e:	e000      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002978:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002986:	494f      	ldr	r1, [pc, #316]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800298e:	e001      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a0 	beq.w	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a3a      	ldr	r2, [pc, #232]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fd7c 	bl	80014e0 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ea:	e009      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ec:	f7fe fd78 	bl	80014e0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d902      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	74fb      	strb	r3, [r7, #19]
        break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a00:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ef      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d15c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a12:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01f      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d019      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fd37 	bl	80014e0 <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a74:	e00b      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe fd33 	bl	80014e0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d902      	bls.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a8c:	e006      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ec      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab2:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aba:	e009      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
 8002ac0:	e006      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad0:	7c7b      	ldrb	r3, [r7, #17]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b9e      	ldr	r3, [pc, #632]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	4a9d      	ldr	r2, [pc, #628]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aee:	4b98      	ldr	r3, [pc, #608]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 0203 	bic.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	4994      	ldr	r1, [pc, #592]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b10:	4b8f      	ldr	r3, [pc, #572]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 020c 	bic.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	498c      	ldr	r1, [pc, #560]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b32:	4b87      	ldr	r3, [pc, #540]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4983      	ldr	r1, [pc, #524]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b54:	4b7e      	ldr	r3, [pc, #504]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	497b      	ldr	r1, [pc, #492]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b76:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	4972      	ldr	r1, [pc, #456]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b98:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	496a      	ldr	r1, [pc, #424]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	4961      	ldr	r1, [pc, #388]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bdc:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	4959      	ldr	r1, [pc, #356]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfe:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	4950      	ldr	r1, [pc, #320]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c20:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	4948      	ldr	r1, [pc, #288]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	493f      	ldr	r1, [pc, #252]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d028      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	4937      	ldr	r1, [pc, #220]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c84:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8e:	60d3      	str	r3, [r2, #12]
 8002c90:	e011      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8d8 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d028      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	491f      	ldr	r1, [pc, #124]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cec:	60d3      	str	r3, [r2, #12]
 8002cee:	e011      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f8a9 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02b      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a02      	ldr	r2, [pc, #8]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4a:	60d3      	str	r3, [r2, #12]
 8002d4c:	e014      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f877 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02f      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d92:	4928      	ldr	r1, [pc, #160]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2102      	movs	r1, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f854 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	74bb      	strb	r3, [r7, #18]
 8002dbe:	e011      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3320      	adds	r3, #32
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f935 	bl	8003040 <RCCEx_PLLSAI2_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfe:	490d      	ldr	r1, [pc, #52]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e22:	4904      	ldr	r1, [pc, #16]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000

08002e38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e66:	4b75      	ldr	r3, [pc, #468]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
       ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d047      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e044      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d018      	beq.n	8002ede <RCCEx_PLLSAI1_Config+0x86>
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d825      	bhi.n	8002efc <RCCEx_PLLSAI1_Config+0xa4>
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x62>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d009      	beq.n	8002ecc <RCCEx_PLLSAI1_Config+0x74>
 8002eb8:	e020      	b.n	8002efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eba:	4b60      	ldr	r3, [pc, #384]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e01a      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e013      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efa:	e006      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e004      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4944      	ldr	r1, [pc, #272]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d17d      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a40      	ldr	r2, [pc, #256]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe face 	bl	80014e0 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f48:	f7fe faca 	bl	80014e0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e005      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ef      	bne.n	8002f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d160      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0912      	lsrs	r2, r2, #4
 8002f8c:	0452      	lsls	r2, r2, #17
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	492a      	ldr	r1, [pc, #168]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	610b      	str	r3, [r1, #16]
 8002f96:	e027      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d112      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	0211      	lsls	r1, r2, #8
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6912      	ldr	r2, [r2, #16]
 8002fb4:	0852      	lsrs	r2, r2, #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	0552      	lsls	r2, r2, #21
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	491f      	ldr	r1, [pc, #124]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	610b      	str	r3, [r1, #16]
 8002fc2:	e011      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6952      	ldr	r2, [r2, #20]
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0652      	lsls	r2, r2, #25
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	4916      	ldr	r1, [pc, #88]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fa74 	bl	80014e0 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffc:	f7fe fa70 	bl	80014e0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
          break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4904      	ldr	r1, [pc, #16]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0203 	and.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d10d      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
       ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
       ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d047      	beq.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e044      	b.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d018      	beq.n	80030c6 <RCCEx_PLLSAI2_Config+0x86>
 8003094:	2b03      	cmp	r3, #3
 8003096:	d825      	bhi.n	80030e4 <RCCEx_PLLSAI2_Config+0xa4>
 8003098:	2b01      	cmp	r3, #1
 800309a:	d002      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x62>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d009      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x74>
 80030a0:	e020      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a2:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11d      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b2:	e01a      	b.n	80030ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e013      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c6:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d2:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e2:	e006      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e004      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	430b      	orrs	r3, r1
 8003110:	4939      	ldr	r1, [pc, #228]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d167      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7fe f9da 	bl	80014e0 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800312e:	e009      	b.n	8003144 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003130:	f7fe f9d6 	bl	80014e0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	73fb      	strb	r3, [r7, #15]
        break;
 8003142:	e005      	b.n	8003150 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ef      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d14a      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	0211      	lsls	r1, r2, #8
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	0912      	lsrs	r2, r2, #4
 8003174:	0452      	lsls	r2, r2, #17
 8003176:	430a      	orrs	r2, r1
 8003178:	491f      	ldr	r1, [pc, #124]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	614b      	str	r3, [r1, #20]
 800317e:	e011      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003188:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6892      	ldr	r2, [r2, #8]
 8003190:	0211      	lsls	r1, r2, #8
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6912      	ldr	r2, [r2, #16]
 8003196:	0852      	lsrs	r2, r2, #1
 8003198:	3a01      	subs	r2, #1
 800319a:	0652      	lsls	r2, r2, #25
 800319c:	430a      	orrs	r2, r1
 800319e:	4916      	ldr	r1, [pc, #88]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe f996 	bl	80014e0 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b6:	e009      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031b8:	f7fe f992 	bl	80014e0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ca:	e005      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e049      	b.n	80032a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f841 	bl	80032aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 f9f8 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e04f      	b.n	8003378 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_TIM_Base_Start_IT+0xc4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0x76>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d018      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0x76>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_TIM_Base_Start_IT+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0x76>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_TIM_Base_Start_IT+0xcc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0x76>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_TIM_Base_Start_IT+0xd0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0x76>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_TIM_Base_Start_IT+0xd4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0x76>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_TIM_Base_Start_IT+0xd8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d115      	bne.n	8003362 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_TIM_Base_Start_IT+0xdc>)
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d015      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0xb4>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d011      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	e008      	b.n	8003374 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e000      	b.n	8003376 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40013400 	.word	0x40013400
 8003398:	40014000 	.word	0x40014000
 800339c:	00010007 	.word	0x00010007

080033a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0202 	mvn.w	r2, #2
 80033cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f905 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8f7 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f908 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d122      	bne.n	8003450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d11b      	bne.n	8003450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0204 	mvn.w	r2, #4
 8003420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8db 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8cd 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8de 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0208 	mvn.w	r2, #8
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2204      	movs	r2, #4
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8b1 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8a3 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8b4 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0210 	mvn.w	r2, #16
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2208      	movs	r2, #8
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f887 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f879 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f88a 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0201 	mvn.w	r2, #1
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fe20 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f914 	bl	8003778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d10e      	bne.n	800357e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d107      	bne.n	800357e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f907 	bl	800378c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d10e      	bne.n	80035aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d107      	bne.n	80035aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f838 	bl	800361a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d10e      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d107      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0220 	mvn.w	r2, #32
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8c7 	bl	8003764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a40      	ldr	r2, [pc, #256]	; (8003744 <TIM_Base_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d00f      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3d      	ldr	r2, [pc, #244]	; (8003748 <TIM_Base_SetConfig+0x118>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00b      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <TIM_Base_SetConfig+0x11c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <TIM_Base_SetConfig+0x120>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <TIM_Base_SetConfig+0x124>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2f      	ldr	r2, [pc, #188]	; (8003744 <TIM_Base_SetConfig+0x114>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d01b      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <TIM_Base_SetConfig+0x118>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d017      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2b      	ldr	r2, [pc, #172]	; (800374c <TIM_Base_SetConfig+0x11c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <TIM_Base_SetConfig+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <TIM_Base_SetConfig+0x124>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a28      	ldr	r2, [pc, #160]	; (8003758 <TIM_Base_SetConfig+0x128>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <TIM_Base_SetConfig+0x12c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a26      	ldr	r2, [pc, #152]	; (8003760 <TIM_Base_SetConfig+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <TIM_Base_SetConfig+0x114>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00f      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <TIM_Base_SetConfig+0x124>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <TIM_Base_SetConfig+0x128>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <TIM_Base_SetConfig+0x12c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <TIM_Base_SetConfig+0x130>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	615a      	str	r2, [r3, #20]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40013400 	.word	0x40013400
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800

08003764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e040      	b.n	8003834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fd0e 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa4e 	bl	8003c80 <UART_SetConfig>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e022      	b.n	8003834 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fccc 	bl	8004194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fd53 	bl	80042d8 <UART_CheckIdleState>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d113      	bne.n	8003894 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00e      	beq.n	8003894 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 81ce 	beq.w	8003c26 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
      }
      return;
 8003892:	e1c8      	b.n	8003c26 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80e3 	beq.w	8003a62 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4ba6      	ldr	r3, [pc, #664]	; (8003b44 <HAL_UART_IRQHandler+0x308>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80d8 	beq.w	8003a62 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_UART_IRQHandler+0xa2>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d4:	f043 0201 	orr.w	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_UART_IRQHandler+0xce>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <HAL_UART_IRQHandler+0xfa>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2204      	movs	r2, #4
 8003924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392c:	f043 0202 	orr.w	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2208      	movs	r2, #8
 800395a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	f043 0208 	orr.w	r2, r3, #8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_UART_IRQHandler+0x15e>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8142 	beq.w	8003c2a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d004      	beq.n	80039ea <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d031      	beq.n	8003a4e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fd39 	bl	8004462 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d123      	bne.n	8003a46 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d013      	beq.n	8003a3e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <HAL_UART_IRQHandler+0x30c>)
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fe88 	bl	8001738 <HAL_DMA_Abort_IT>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d017      	beq.n	8003a5e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	e00f      	b.n	8003a5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f908 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e00b      	b.n	8003a5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f904 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	e007      	b.n	8003a5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f900 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a5c:	e0e5      	b.n	8003c2a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5e:	bf00      	nop
    return;
 8003a60:	e0e3      	b.n	8003c2a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 80a9 	bne.w	8003bbe <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80a3 	beq.w	8003bbe <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 809d 	beq.w	8003bbe <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d158      	bne.n	8003b4c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80c1 	beq.w	8003c2e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ab2:	893a      	ldrh	r2, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f080 80ba 	bcs.w	8003c2e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d12a      	bne.n	8003b28 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b00:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0210 	bic.w	r2, r2, #16
 8003b1c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fdca 	bl	80016bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f893 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b42:	e074      	b.n	8003c2e <HAL_UART_IRQHandler+0x3f2>
 8003b44:	04000120 	.word	0x04000120
 8003b48:	080044c1 	.word	0x080044c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d060      	beq.n	8003c32 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0210 	bic.w	r2, r2, #16
 8003bb0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f856 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bbc:	e039      	b.n	8003c32 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <HAL_UART_IRQHandler+0x3a8>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fc9e 	bl	800451e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003be2:	e029      	b.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
    }
    return;
 8003c08:	e015      	b.n	8003c36 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fc64 	bl	80044ec <UART_EndTransmit_IT>
    return;
 8003c24:	e008      	b.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c26:	bf00      	nop
 8003c28:	e006      	b.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c2a:	bf00      	nop
 8003c2c:	e004      	b.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c2e:	bf00      	nop
 8003c30:	e002      	b.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop

08003c40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b5b0      	push	{r4, r5, r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4bad      	ldr	r3, [pc, #692]	; (8003f60 <UART_SetConfig+0x2e0>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4aa2      	ldr	r2, [pc, #648]	; (8003f64 <UART_SetConfig+0x2e4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a99      	ldr	r2, [pc, #612]	; (8003f68 <UART_SetConfig+0x2e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d121      	bne.n	8003d4a <UART_SetConfig+0xca>
 8003d06:	4b99      	ldr	r3, [pc, #612]	; (8003f6c <UART_SetConfig+0x2ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0xc4>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0x9c>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d39 	.word	0x08003d39
 8003d24:	08003d33 	.word	0x08003d33
 8003d28:	08003d3f 	.word	0x08003d3f
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	76fb      	strb	r3, [r7, #27]
 8003d30:	e0e7      	b.n	8003f02 <UART_SetConfig+0x282>
 8003d32:	2302      	movs	r3, #2
 8003d34:	76fb      	strb	r3, [r7, #27]
 8003d36:	e0e4      	b.n	8003f02 <UART_SetConfig+0x282>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	e0e1      	b.n	8003f02 <UART_SetConfig+0x282>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	76fb      	strb	r3, [r7, #27]
 8003d42:	e0de      	b.n	8003f02 <UART_SetConfig+0x282>
 8003d44:	2310      	movs	r3, #16
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	e0db      	b.n	8003f02 <UART_SetConfig+0x282>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a88      	ldr	r2, [pc, #544]	; (8003f70 <UART_SetConfig+0x2f0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d132      	bne.n	8003dba <UART_SetConfig+0x13a>
 8003d54:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <UART_SetConfig+0x2ec>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d828      	bhi.n	8003db4 <UART_SetConfig+0x134>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0xe8>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003db5 	.word	0x08003db5
 8003d70:	08003db5 	.word	0x08003db5
 8003d74:	08003db5 	.word	0x08003db5
 8003d78:	08003da9 	.word	0x08003da9
 8003d7c:	08003db5 	.word	0x08003db5
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003db5 	.word	0x08003db5
 8003d88:	08003da3 	.word	0x08003da3
 8003d8c:	08003db5 	.word	0x08003db5
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003db5 	.word	0x08003db5
 8003d98:	08003daf 	.word	0x08003daf
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	76fb      	strb	r3, [r7, #27]
 8003da0:	e0af      	b.n	8003f02 <UART_SetConfig+0x282>
 8003da2:	2302      	movs	r3, #2
 8003da4:	76fb      	strb	r3, [r7, #27]
 8003da6:	e0ac      	b.n	8003f02 <UART_SetConfig+0x282>
 8003da8:	2304      	movs	r3, #4
 8003daa:	76fb      	strb	r3, [r7, #27]
 8003dac:	e0a9      	b.n	8003f02 <UART_SetConfig+0x282>
 8003dae:	2308      	movs	r3, #8
 8003db0:	76fb      	strb	r3, [r7, #27]
 8003db2:	e0a6      	b.n	8003f02 <UART_SetConfig+0x282>
 8003db4:	2310      	movs	r3, #16
 8003db6:	76fb      	strb	r3, [r7, #27]
 8003db8:	e0a3      	b.n	8003f02 <UART_SetConfig+0x282>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6d      	ldr	r2, [pc, #436]	; (8003f74 <UART_SetConfig+0x2f4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d120      	bne.n	8003e06 <UART_SetConfig+0x186>
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <UART_SetConfig+0x2ec>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d013      	beq.n	8003dfa <UART_SetConfig+0x17a>
 8003dd2:	2b30      	cmp	r3, #48	; 0x30
 8003dd4:	d814      	bhi.n	8003e00 <UART_SetConfig+0x180>
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d009      	beq.n	8003dee <UART_SetConfig+0x16e>
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d810      	bhi.n	8003e00 <UART_SetConfig+0x180>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <UART_SetConfig+0x168>
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d006      	beq.n	8003df4 <UART_SetConfig+0x174>
 8003de6:	e00b      	b.n	8003e00 <UART_SetConfig+0x180>
 8003de8:	2300      	movs	r3, #0
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e089      	b.n	8003f02 <UART_SetConfig+0x282>
 8003dee:	2302      	movs	r3, #2
 8003df0:	76fb      	strb	r3, [r7, #27]
 8003df2:	e086      	b.n	8003f02 <UART_SetConfig+0x282>
 8003df4:	2304      	movs	r3, #4
 8003df6:	76fb      	strb	r3, [r7, #27]
 8003df8:	e083      	b.n	8003f02 <UART_SetConfig+0x282>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	76fb      	strb	r3, [r7, #27]
 8003dfe:	e080      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e00:	2310      	movs	r3, #16
 8003e02:	76fb      	strb	r3, [r7, #27]
 8003e04:	e07d      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5b      	ldr	r2, [pc, #364]	; (8003f78 <UART_SetConfig+0x2f8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d120      	bne.n	8003e52 <UART_SetConfig+0x1d2>
 8003e10:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <UART_SetConfig+0x2ec>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e1c:	d013      	beq.n	8003e46 <UART_SetConfig+0x1c6>
 8003e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e20:	d814      	bhi.n	8003e4c <UART_SetConfig+0x1cc>
 8003e22:	2b80      	cmp	r3, #128	; 0x80
 8003e24:	d009      	beq.n	8003e3a <UART_SetConfig+0x1ba>
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d810      	bhi.n	8003e4c <UART_SetConfig+0x1cc>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <UART_SetConfig+0x1b4>
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d006      	beq.n	8003e40 <UART_SetConfig+0x1c0>
 8003e32:	e00b      	b.n	8003e4c <UART_SetConfig+0x1cc>
 8003e34:	2300      	movs	r3, #0
 8003e36:	76fb      	strb	r3, [r7, #27]
 8003e38:	e063      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	76fb      	strb	r3, [r7, #27]
 8003e3e:	e060      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e40:	2304      	movs	r3, #4
 8003e42:	76fb      	strb	r3, [r7, #27]
 8003e44:	e05d      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e46:	2308      	movs	r3, #8
 8003e48:	76fb      	strb	r3, [r7, #27]
 8003e4a:	e05a      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	76fb      	strb	r3, [r7, #27]
 8003e50:	e057      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a49      	ldr	r2, [pc, #292]	; (8003f7c <UART_SetConfig+0x2fc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d125      	bne.n	8003ea8 <UART_SetConfig+0x228>
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <UART_SetConfig+0x2ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6a:	d017      	beq.n	8003e9c <UART_SetConfig+0x21c>
 8003e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e70:	d817      	bhi.n	8003ea2 <UART_SetConfig+0x222>
 8003e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e76:	d00b      	beq.n	8003e90 <UART_SetConfig+0x210>
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d811      	bhi.n	8003ea2 <UART_SetConfig+0x222>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <UART_SetConfig+0x20a>
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d006      	beq.n	8003e96 <UART_SetConfig+0x216>
 8003e88:	e00b      	b.n	8003ea2 <UART_SetConfig+0x222>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	76fb      	strb	r3, [r7, #27]
 8003e8e:	e038      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e90:	2302      	movs	r3, #2
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	e035      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e96:	2304      	movs	r3, #4
 8003e98:	76fb      	strb	r3, [r7, #27]
 8003e9a:	e032      	b.n	8003f02 <UART_SetConfig+0x282>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	76fb      	strb	r3, [r7, #27]
 8003ea0:	e02f      	b.n	8003f02 <UART_SetConfig+0x282>
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	76fb      	strb	r3, [r7, #27]
 8003ea6:	e02c      	b.n	8003f02 <UART_SetConfig+0x282>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <UART_SetConfig+0x2e4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d125      	bne.n	8003efe <UART_SetConfig+0x27e>
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <UART_SetConfig+0x2ec>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec0:	d017      	beq.n	8003ef2 <UART_SetConfig+0x272>
 8003ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec6:	d817      	bhi.n	8003ef8 <UART_SetConfig+0x278>
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ecc:	d00b      	beq.n	8003ee6 <UART_SetConfig+0x266>
 8003ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed2:	d811      	bhi.n	8003ef8 <UART_SetConfig+0x278>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <UART_SetConfig+0x260>
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d006      	beq.n	8003eec <UART_SetConfig+0x26c>
 8003ede:	e00b      	b.n	8003ef8 <UART_SetConfig+0x278>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e00d      	b.n	8003f02 <UART_SetConfig+0x282>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	76fb      	strb	r3, [r7, #27]
 8003eea:	e00a      	b.n	8003f02 <UART_SetConfig+0x282>
 8003eec:	2304      	movs	r3, #4
 8003eee:	76fb      	strb	r3, [r7, #27]
 8003ef0:	e007      	b.n	8003f02 <UART_SetConfig+0x282>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	76fb      	strb	r3, [r7, #27]
 8003ef6:	e004      	b.n	8003f02 <UART_SetConfig+0x282>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	76fb      	strb	r3, [r7, #27]
 8003efc:	e001      	b.n	8003f02 <UART_SetConfig+0x282>
 8003efe:	2310      	movs	r3, #16
 8003f00:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <UART_SetConfig+0x2e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	f040 8087 	bne.w	800401c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f0e:	7efb      	ldrb	r3, [r7, #27]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d837      	bhi.n	8003f84 <UART_SetConfig+0x304>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0x29c>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f85 	.word	0x08003f85
 8003f2c:	08003f4f 	.word	0x08003f4f
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	08003f85 	.word	0x08003f85
 8003f38:	08003f85 	.word	0x08003f85
 8003f3c:	08003f57 	.word	0x08003f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fbd2 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8003f44:	6178      	str	r0, [r7, #20]
        break;
 8003f46:	e022      	b.n	8003f8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <UART_SetConfig+0x300>)
 8003f4a:	617b      	str	r3, [r7, #20]
        break;
 8003f4c:	e01f      	b.n	8003f8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7fe fb33 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8003f52:	6178      	str	r0, [r7, #20]
        break;
 8003f54:	e01b      	b.n	8003f8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5a:	617b      	str	r3, [r7, #20]
        break;
 8003f5c:	e017      	b.n	8003f8e <UART_SetConfig+0x30e>
 8003f5e:	bf00      	nop
 8003f60:	efff69f3 	.word	0xefff69f3
 8003f64:	40008000 	.word	0x40008000
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40004400 	.word	0x40004400
 8003f74:	40004800 	.word	0x40004800
 8003f78:	40004c00 	.word	0x40004c00
 8003f7c:	40005000 	.word	0x40005000
 8003f80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	76bb      	strb	r3, [r7, #26]
        break;
 8003f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80f1 	beq.w	8004178 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d305      	bcc.n	8003fb2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d902      	bls.n	8003fb8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	76bb      	strb	r3, [r7, #26]
 8003fb6:	e0df      	b.n	8004178 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	020b      	lsls	r3, r1, #8
 8003fca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fce:	0202      	lsls	r2, r0, #8
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	6849      	ldr	r1, [r1, #4]
 8003fd4:	0849      	lsrs	r1, r1, #1
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	1814      	adds	r4, r2, r0
 8003fde:	eb43 0501 	adc.w	r5, r3, r1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	4620      	mov	r0, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	f7fc f8ee 	bl	80001d0 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004002:	d308      	bcc.n	8004016 <UART_SetConfig+0x396>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400a:	d204      	bcs.n	8004016 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	e0b0      	b.n	8004178 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	76bb      	strb	r3, [r7, #26]
 800401a:	e0ad      	b.n	8004178 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	d15c      	bne.n	80040e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004026:	7efb      	ldrb	r3, [r7, #27]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d828      	bhi.n	800407e <UART_SetConfig+0x3fe>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0x3b4>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004059 	.word	0x08004059
 8004038:	08004061 	.word	0x08004061
 800403c:	08004069 	.word	0x08004069
 8004040:	0800407f 	.word	0x0800407f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800407f 	.word	0x0800407f
 800404c:	0800407f 	.word	0x0800407f
 8004050:	0800407f 	.word	0x0800407f
 8004054:	08004077 	.word	0x08004077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe fb46 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 800405c:	6178      	str	r0, [r7, #20]
        break;
 800405e:	e013      	b.n	8004088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fe fb58 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8004064:	6178      	str	r0, [r7, #20]
        break;
 8004066:	e00f      	b.n	8004088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004068:	4b49      	ldr	r3, [pc, #292]	; (8004190 <UART_SetConfig+0x510>)
 800406a:	617b      	str	r3, [r7, #20]
        break;
 800406c:	e00c      	b.n	8004088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7fe faa3 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8004072:	6178      	str	r0, [r7, #20]
        break;
 8004074:	e008      	b.n	8004088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407a:	617b      	str	r3, [r7, #20]
        break;
 800407c:	e004      	b.n	8004088 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	76bb      	strb	r3, [r7, #26]
        break;
 8004086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d074      	beq.n	8004178 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005a      	lsls	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d916      	bls.n	80040da <UART_SetConfig+0x45a>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d212      	bcs.n	80040da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f023 030f 	bic.w	r3, r3, #15
 80040bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	89fb      	ldrh	r3, [r7, #14]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	89fa      	ldrh	r2, [r7, #14]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e04e      	b.n	8004178 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e04b      	b.n	8004178 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040e0:	7efb      	ldrb	r3, [r7, #27]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d827      	bhi.n	8004136 <UART_SetConfig+0x4b6>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x46c>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe faea 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8004114:	6178      	str	r0, [r7, #20]
        break;
 8004116:	e013      	b.n	8004140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fafc 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 800411c:	6178      	str	r0, [r7, #20]
        break;
 800411e:	e00f      	b.n	8004140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <UART_SetConfig+0x510>)
 8004122:	617b      	str	r3, [r7, #20]
        break;
 8004124:	e00c      	b.n	8004140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe fa47 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 800412a:	6178      	str	r0, [r7, #20]
        break;
 800412c:	e008      	b.n	8004140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	617b      	str	r3, [r7, #20]
        break;
 8004134:	e004      	b.n	8004140 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	76bb      	strb	r3, [r7, #26]
        break;
 800413e:	bf00      	nop
    }

    if (pclk != 0U)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085a      	lsrs	r2, r3, #1
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	b29b      	uxth	r3, r3
 800415a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b0f      	cmp	r3, #15
 8004160:	d908      	bls.n	8004174 <UART_SetConfig+0x4f4>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d204      	bcs.n	8004174 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e001      	b.n	8004178 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004184:	7ebb      	ldrb	r3, [r7, #26]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bdb0      	pop	{r4, r5, r7, pc}
 800418e:	bf00      	nop
 8004190:	00f42400 	.word	0x00f42400

08004194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004292:	d10a      	bne.n	80042aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e8:	f7fd f8fa 	bl	80014e0 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d10e      	bne.n	800431a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f82d 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e023      	b.n	8004362 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b04      	cmp	r3, #4
 8004326:	d10e      	bne.n	8004346 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f817 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e00d      	b.n	8004362 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437a:	e05e      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d05a      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fd f8ac 	bl	80014e0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <UART_WaitOnFlagUntilTimeout+0x30>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11b      	bne.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e043      	b.n	800445a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02c      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ee:	d124      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004408:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e00f      	b.n	800445a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	429a      	cmp	r2, r3
 8004448:	bf0c      	ite	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	2300      	movne	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	429a      	cmp	r2, r3
 8004456:	d091      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004478:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0210 	bic.w	r2, r2, #16
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fbb8 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004502:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fb95 	bl	8003c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004532:	b480      	push	{r7}
 8004534:	b08b      	sub	sp, #44	; 0x2c
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	613b      	str	r3, [r7, #16]
  return result;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004558:	2320      	movs	r3, #32
 800455a:	e003      	b.n	8004564 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2103      	movs	r1, #3
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	61fb      	str	r3, [r7, #28]
  return result;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004586:	2320      	movs	r3, #32
 8004588:	e003      	b.n	8004592 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	431a      	orrs	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	372c      	adds	r7, #44	; 0x2c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	43db      	mvns	r3, r3
 80045c0:	401a      	ands	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80045dc:	b480      	push	{r7}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	613b      	str	r3, [r7, #16]
  return result;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004602:	2320      	movs	r3, #32
 8004604:	e003      	b.n	800460e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	fab3 f383 	clz	r3, r3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2103      	movs	r1, #3
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	401a      	ands	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	61fb      	str	r3, [r7, #28]
  return result;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e003      	b.n	800463c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800464a:	bf00      	nop
 800464c:	372c      	adds	r7, #44	; 0x2c
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004656:	b480      	push	{r7}
 8004658:	b08b      	sub	sp, #44	; 0x2c
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	613b      	str	r3, [r7, #16]
  return result;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800467c:	2320      	movs	r3, #32
 800467e:	e003      	b.n	8004688 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	2103      	movs	r1, #3
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	61fb      	str	r3, [r7, #28]
  return result;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80046aa:	2320      	movs	r3, #32
 80046ac:	e003      	b.n	80046b6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	fab3 f383 	clz	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	431a      	orrs	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	60da      	str	r2, [r3, #12]
}
 80046c4:	bf00      	nop
 80046c6:	372c      	adds	r7, #44	; 0x2c
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b08b      	sub	sp, #44	; 0x2c
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	613b      	str	r3, [r7, #16]
  return result;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80046f6:	2320      	movs	r3, #32
 80046f8:	e003      	b.n	8004702 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	210f      	movs	r1, #15
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	401a      	ands	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	61fb      	str	r3, [r7, #28]
  return result;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004724:	2320      	movs	r3, #32
 8004726:	e003      	b.n	8004730 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	431a      	orrs	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800473e:	bf00      	nop
 8004740:	372c      	adds	r7, #44	; 0x2c
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800474a:	b480      	push	{r7}
 800474c:	b08b      	sub	sp, #44	; 0x2c
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	613b      	str	r3, [r7, #16]
  return result;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004772:	2320      	movs	r3, #32
 8004774:	e003      	b.n	800477e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	210f      	movs	r1, #15
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	401a      	ands	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	61fb      	str	r3, [r7, #28]
  return result;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80047a2:	2320      	movs	r3, #32
 80047a4:	e003      	b.n	80047ae <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80047bc:	bf00      	nop
 80047be:	372c      	adds	r7, #44	; 0x2c
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	60fb      	str	r3, [r7, #12]
  return result;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <LL_GPIO_Init+0x26>
    return 32U;
 80047ea:	2320      	movs	r3, #32
 80047ec:	e003      	b.n	80047f6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80047f8:	e048      	b.n	800488c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	fa01 f303 	lsl.w	r3, r1, r3
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d03a      	beq.n	8004886 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d003      	beq.n	8004820 <LL_GPIO_Init+0x58>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d10e      	bne.n	800483e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	461a      	mov	r2, r3
 8004826:	69b9      	ldr	r1, [r7, #24]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fed7 	bl	80045dc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff feb7 	bl	80045ac <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	461a      	mov	r2, r3
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff05 	bl	8004656 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d111      	bne.n	8004878 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2bff      	cmp	r3, #255	; 0xff
 8004858:	d807      	bhi.n	800486a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	461a      	mov	r2, r3
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ff34 	bl	80046d0 <LL_GPIO_SetAFPin_0_7>
 8004868:	e006      	b.n	8004878 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	461a      	mov	r2, r3
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff69 	bl	800474a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	461a      	mov	r2, r3
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff fe56 	bl	8004532 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3301      	adds	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1af      	bne.n	80047fa <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <LL_RCC_HSI_IsReady+0x24>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b4:	d101      	bne.n	80048ba <LL_RCC_HSI_IsReady+0x16>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <LL_RCC_HSI_IsReady+0x18>
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000

080048cc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <LL_RCC_LSE_IsReady+0x24>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d101      	bne.n	80048e2 <LL_RCC_LSE_IsReady+0x16>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <LL_RCC_LSE_IsReady+0x18>
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000

080048f4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d101      	bne.n	8004908 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40021000 	.word	0x40021000

08004918 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <LL_RCC_MSI_GetRange+0x18>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000

08004934 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40021000 	.word	0x40021000

08004950 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <LL_RCC_GetSysClkSource+0x18>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000

0800496c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <LL_RCC_GetAHBPrescaler+0x18>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000

08004988 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000

080049a4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000

080049c0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <LL_RCC_GetUSARTClockSource+0x24>)
 80049ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	401a      	ands	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4313      	orrs	r3, r2
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40021000 	.word	0x40021000

080049e8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <LL_RCC_GetUARTClockSource+0x24>)
 80049f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	401a      	ands	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	4313      	orrs	r3, r2
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40021000 	.word	0x40021000

08004a10 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <LL_RCC_PLL_GetMainSource+0x18>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0303 	and.w	r3, r3, #3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000

08004a2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <LL_RCC_PLL_GetN+0x18>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40021000 	.word	0x40021000

08004a48 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <LL_RCC_PLL_GetR+0x18>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000

08004a64 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <LL_RCC_PLL_GetDivider+0x18>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d137      	bne.n	8004b02 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ff94 	bl	80049c0 <LL_RCC_GetUSARTClockSource>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	f200 80b3 	bhi.w	8004c0a <LL_RCC_GetUSARTClockFreq+0x18a>
 8004aa4:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <LL_RCC_GetUSARTClockFreq+0x2c>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004abd 	.word	0x08004abd
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	08004ad7 	.word	0x08004ad7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004abc:	f000 f95c 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004ac0:	60f8      	str	r0, [r7, #12]
        break;
 8004ac2:	e0b5      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004ac4:	f7ff feee 	bl	80048a4 <LL_RCC_HSI_IsReady>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 809f 	beq.w	8004c0e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8004ad0:	4b5a      	ldr	r3, [pc, #360]	; (8004c3c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004ad2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004ad4:	e09b      	b.n	8004c0e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004ad6:	f7ff fef9 	bl	80048cc <LL_RCC_LSE_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8098 	beq.w	8004c12 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004ae8:	e093      	b.n	8004c12 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004aea:	f000 f945 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f9d1 	bl	8004e98 <RCC_GetHCLKClockFreq>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f9f7 	bl	8004eec <RCC_GetPCLK2ClockFreq>
 8004afe:	60f8      	str	r0, [r7, #12]
        break;
 8004b00:	e096      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d146      	bne.n	8004b96 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff59 	bl	80049c0 <LL_RCC_GetUSARTClockSource>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d87e      	bhi.n	8004c16 <LL_RCC_GetUSARTClockFreq+0x196>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b7f 	.word	0x08004b7f
 8004b24:	08004c17 	.word	0x08004c17
 8004b28:	08004c17 	.word	0x08004c17
 8004b2c:	08004c17 	.word	0x08004c17
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004c17 	.word	0x08004c17
 8004b38:	08004c17 	.word	0x08004c17
 8004b3c:	08004c17 	.word	0x08004c17
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	08004c17 	.word	0x08004c17
 8004b48:	08004c17 	.word	0x08004c17
 8004b4c:	08004c17 	.word	0x08004c17
 8004b50:	08004b6d 	.word	0x08004b6d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004b54:	f000 f910 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004b58:	60f8      	str	r0, [r7, #12]
        break;
 8004b5a:	e069      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004b5c:	f7ff fea2 	bl	80048a4 <LL_RCC_HSI_IsReady>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d059      	beq.n	8004c1a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8004b66:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004b68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b6a:	e056      	b.n	8004c1a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004b6c:	f7ff feae 	bl	80048cc <LL_RCC_LSE_IsReady>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d053      	beq.n	8004c1e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b7c:	e04f      	b.n	8004c1e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b7e:	f000 f8fb 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f987 	bl	8004e98 <RCC_GetHCLKClockFreq>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f999 	bl	8004ec4 <RCC_GetPCLK1ClockFreq>
 8004b92:	60f8      	str	r0, [r7, #12]
        break;
 8004b94:	e04c      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b30      	cmp	r3, #48	; 0x30
 8004b9a:	d142      	bne.n	8004c22 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff0f 	bl	80049c0 <LL_RCC_GetUSARTClockSource>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004ba8:	d01a      	beq.n	8004be0 <LL_RCC_GetUSARTClockFreq+0x160>
 8004baa:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004bae:	d83a      	bhi.n	8004c26 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004bb0:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00c      	beq.n	8004bd0 <LL_RCC_GetUSARTClockFreq+0x150>
 8004bb6:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d834      	bhi.n	8004c26 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004bbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bc0:	d017      	beq.n	8004bf2 <LL_RCC_GetUSARTClockFreq+0x172>
 8004bc2:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d12e      	bne.n	8004c26 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004bc8:	f000 f8d6 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004bcc:	60f8      	str	r0, [r7, #12]
          break;
 8004bce:	e02f      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004bd0:	f7ff fe68 	bl	80048a4 <LL_RCC_HSI_IsReady>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d027      	beq.n	8004c2a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8004bda:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004bdc:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004bde:	e024      	b.n	8004c2a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004be0:	f7ff fe74 	bl	80048cc <LL_RCC_LSE_IsReady>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d021      	beq.n	8004c2e <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004bf0:	e01d      	b.n	8004c2e <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004bf2:	f000 f8c1 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 f94d 	bl	8004e98 <RCC_GetHCLKClockFreq>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f95f 	bl	8004ec4 <RCC_GetPCLK1ClockFreq>
 8004c06:	60f8      	str	r0, [r7, #12]
          break;
 8004c08:	e012      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e010      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e00e      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004c12:	bf00      	nop
 8004c14:	e00c      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004c16:	bf00      	nop
 8004c18:	e00a      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e008      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e006      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8004c22:	bf00      	nop
 8004c24:	e004      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004c2e:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	00300020 	.word	0x00300020
 8004c44:	00300010 	.word	0x00300010

08004c48 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2bc0      	cmp	r3, #192	; 0xc0
 8004c58:	d136      	bne.n	8004cc8 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fec4 	bl	80049e8 <LL_RCC_GetUARTClockSource>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004c66:	d01a      	beq.n	8004c9e <LL_RCC_GetUARTClockFreq+0x56>
 8004c68:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004c6c:	d82e      	bhi.n	8004ccc <LL_RCC_GetUARTClockFreq+0x84>
 8004c6e:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00c      	beq.n	8004c8e <LL_RCC_GetUARTClockFreq+0x46>
 8004c74:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d828      	bhi.n	8004ccc <LL_RCC_GetUARTClockFreq+0x84>
 8004c7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c7e:	d017      	beq.n	8004cb0 <LL_RCC_GetUARTClockFreq+0x68>
 8004c80:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <LL_RCC_GetUARTClockFreq+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d122      	bne.n	8004ccc <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004c86:	f000 f877 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004c8a:	60f8      	str	r0, [r7, #12]
        break;
 8004c8c:	e023      	b.n	8004cd6 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004c8e:	f7ff fe09 	bl	80048a4 <LL_RCC_HSI_IsReady>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8004c98:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <LL_RCC_GetUARTClockFreq+0x124>)
 8004c9a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004c9c:	e018      	b.n	8004cd0 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004c9e:	f7ff fe15 	bl	80048cc <LL_RCC_LSE_IsReady>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8004ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cac:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004cae:	e011      	b.n	8004cd4 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004cb0:	f000 f862 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f8ee 	bl	8004e98 <RCC_GetHCLKClockFreq>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f900 	bl	8004ec4 <RCC_GetPCLK1ClockFreq>
 8004cc4:	60f8      	str	r0, [r7, #12]
        break;
 8004cc6:	e006      	b.n	8004cd6 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8004cc8:	bf00      	nop
 8004cca:	e004      	b.n	8004cd6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004cd4:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cdc:	d136      	bne.n	8004d4c <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fe82 	bl	80049e8 <LL_RCC_GetUARTClockSource>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004cea:	d01a      	beq.n	8004d22 <LL_RCC_GetUARTClockFreq+0xda>
 8004cec:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004cf0:	d82e      	bhi.n	8004d50 <LL_RCC_GetUARTClockFreq+0x108>
 8004cf2:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <LL_RCC_GetUARTClockFreq+0x128>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00c      	beq.n	8004d12 <LL_RCC_GetUARTClockFreq+0xca>
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <LL_RCC_GetUARTClockFreq+0x128>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d828      	bhi.n	8004d50 <LL_RCC_GetUARTClockFreq+0x108>
 8004cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d02:	d017      	beq.n	8004d34 <LL_RCC_GetUARTClockFreq+0xec>
 8004d04:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <LL_RCC_GetUARTClockFreq+0x12c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d122      	bne.n	8004d50 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004d0a:	f000 f835 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004d0e:	60f8      	str	r0, [r7, #12]
        break;
 8004d10:	e023      	b.n	8004d5a <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004d12:	f7ff fdc7 	bl	80048a4 <LL_RCC_HSI_IsReady>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <LL_RCC_GetUARTClockFreq+0x124>)
 8004d1e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004d20:	e018      	b.n	8004d54 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004d22:	f7ff fdd3 	bl	80048cc <LL_RCC_LSE_IsReady>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8004d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d30:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004d32:	e011      	b.n	8004d58 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d34:	f000 f820 	bl	8004d78 <RCC_GetSystemClockFreq>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f8ac 	bl	8004e98 <RCC_GetHCLKClockFreq>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f8be 	bl	8004ec4 <RCC_GetPCLK1ClockFreq>
 8004d48:	60f8      	str	r0, [r7, #12]
        break;
 8004d4a:	e006      	b.n	8004d5a <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8004d4c:	bf00      	nop
 8004d4e:	e004      	b.n	8004d5a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004d50:	bf00      	nop
 8004d52:	e002      	b.n	8004d5a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004d58:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	00c00080 	.word	0x00c00080
 8004d68:	00c00040 	.word	0x00c00040
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	03000200 	.word	0x03000200
 8004d74:	03000100 	.word	0x03000100

08004d78 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004d7e:	f7ff fde7 	bl	8004950 <LL_RCC_GetSysClkSource>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d851      	bhi.n	8004e2c <RCC_GetSystemClockFreq+0xb4>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <RCC_GetSystemClockFreq+0x18>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004e2d 	.word	0x08004e2d
 8004d98:	08004e2d 	.word	0x08004e2d
 8004d9c:	08004e2d 	.word	0x08004e2d
 8004da0:	08004e19 	.word	0x08004e19
 8004da4:	08004e2d 	.word	0x08004e2d
 8004da8:	08004e2d 	.word	0x08004e2d
 8004dac:	08004e2d 	.word	0x08004e2d
 8004db0:	08004e1f 	.word	0x08004e1f
 8004db4:	08004e2d 	.word	0x08004e2d
 8004db8:	08004e2d 	.word	0x08004e2d
 8004dbc:	08004e2d 	.word	0x08004e2d
 8004dc0:	08004e25 	.word	0x08004e25
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004dc4:	f7ff fd96 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d111      	bne.n	8004df2 <RCC_GetSystemClockFreq+0x7a>
 8004dce:	f7ff fd91 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <RCC_GetSystemClockFreq+0x6a>
 8004dd8:	f7ff fd9e 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	e003      	b.n	8004dea <RCC_GetSystemClockFreq+0x72>
 8004de2:	f7ff fda7 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004de6:	4603      	mov	r3, r0
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <RCC_GetSystemClockFreq+0x114>)
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	e010      	b.n	8004e14 <RCC_GetSystemClockFreq+0x9c>
 8004df2:	f7ff fd7f 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <RCC_GetSystemClockFreq+0x8e>
 8004dfc:	f7ff fd8c 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004e00:	4603      	mov	r3, r0
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	e003      	b.n	8004e0e <RCC_GetSystemClockFreq+0x96>
 8004e06:	f7ff fd95 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <RCC_GetSystemClockFreq+0x114>)
 8004e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e14:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004e16:	e033      	b.n	8004e80 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <RCC_GetSystemClockFreq+0x118>)
 8004e1a:	607b      	str	r3, [r7, #4]
      break;
 8004e1c:	e030      	b.n	8004e80 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <RCC_GetSystemClockFreq+0x11c>)
 8004e20:	607b      	str	r3, [r7, #4]
      break;
 8004e22:	e02d      	b.n	8004e80 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004e24:	f000 f876 	bl	8004f14 <RCC_PLL_GetFreqDomain_SYS>
 8004e28:	6078      	str	r0, [r7, #4]
      break;
 8004e2a:	e029      	b.n	8004e80 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004e2c:	f7ff fd62 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d111      	bne.n	8004e5a <RCC_GetSystemClockFreq+0xe2>
 8004e36:	f7ff fd5d 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <RCC_GetSystemClockFreq+0xd2>
 8004e40:	f7ff fd6a 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004e44:	4603      	mov	r3, r0
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	e003      	b.n	8004e52 <RCC_GetSystemClockFreq+0xda>
 8004e4a:	f7ff fd73 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <RCC_GetSystemClockFreq+0x114>)
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	e010      	b.n	8004e7c <RCC_GetSystemClockFreq+0x104>
 8004e5a:	f7ff fd4b 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <RCC_GetSystemClockFreq+0xf6>
 8004e64:	f7ff fd58 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	e003      	b.n	8004e76 <RCC_GetSystemClockFreq+0xfe>
 8004e6e:	f7ff fd61 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e72:	4603      	mov	r3, r0
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <RCC_GetSystemClockFreq+0x114>)
 8004e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004e7e:	bf00      	nop
  }

  return frequency;
 8004e80:	687b      	ldr	r3, [r7, #4]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08007578 	.word	0x08007578
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200

08004e98 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004ea0:	f7ff fd64 	bl	800496c <LL_RCC_GetAHBPrescaler>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <RCC_GetHCLKClockFreq+0x28>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	40d3      	lsrs	r3, r2
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08007560 	.word	0x08007560

08004ec4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004ecc:	f7ff fd5c 	bl	8004988 <LL_RCC_GetAPB1Prescaler>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <RCC_GetPCLK1ClockFreq+0x24>)
 8004ed6:	5cd3      	ldrb	r3, [r2, r3]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	40d3      	lsrs	r3, r2
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08007570 	.word	0x08007570

08004eec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004ef4:	f7ff fd56 	bl	80049a4 <LL_RCC_GetAPB2Prescaler>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <RCC_GetPCLK2ClockFreq+0x24>)
 8004efe:	5cd3      	ldrb	r3, [r2, r3]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	40d3      	lsrs	r3, r2
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	08007570 	.word	0x08007570

08004f14 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004f1a:	f7ff fd79 	bl	8004a10 <LL_RCC_PLL_GetMainSource>
 8004f1e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d036      	beq.n	8004f94 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d836      	bhi.n	8004f9a <RCC_PLL_GetFreqDomain_SYS+0x86>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d003      	beq.n	8004f3a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d02a      	beq.n	8004f8e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8004f38:	e02f      	b.n	8004f9a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f3a:	f7ff fcdb 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d111      	bne.n	8004f68 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8004f44:	f7ff fcd6 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8004f4e:	f7ff fce3 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004f52:	4603      	mov	r3, r0
 8004f54:	0a1b      	lsrs	r3, r3, #8
 8004f56:	e003      	b.n	8004f60 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8004f58:	f7ff fcec 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	4a2f      	ldr	r2, [pc, #188]	; (8005020 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f66:	e010      	b.n	8004f8a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8004f68:	f7ff fcc4 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8004f72:	f7ff fcd1 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004f76:	4603      	mov	r3, r0
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	e003      	b.n	8004f84 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8004f7c:	f7ff fcda 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004f80:	4603      	mov	r3, r0
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004f8c:	e02f      	b.n	8004fee <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004f8e:	4b25      	ldr	r3, [pc, #148]	; (8005024 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8004f90:	607b      	str	r3, [r7, #4]
      break;
 8004f92:	e02c      	b.n	8004fee <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8004f96:	607b      	str	r3, [r7, #4]
      break;
 8004f98:	e029      	b.n	8004fee <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f9a:	f7ff fcab 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d111      	bne.n	8004fc8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8004fa4:	f7ff fca6 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8004fae:	f7ff fcb3 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	e003      	b.n	8004fc0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8004fb8:	f7ff fcbc 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	4a17      	ldr	r2, [pc, #92]	; (8005020 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc6:	e010      	b.n	8004fea <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8004fc8:	f7ff fc94 	bl	80048f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8004fd2:	f7ff fca1 	bl	8004918 <LL_RCC_MSI_GetRange>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	e003      	b.n	8004fe4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8004fdc:	f7ff fcaa 	bl	8004934 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fea:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004fec:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004fee:	f7ff fd39 	bl	8004a64 <LL_RCC_PLL_GetDivider>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	fbb2 f4f3 	udiv	r4, r2, r3
 8004ffe:	f7ff fd15 	bl	8004a2c <LL_RCC_PLL_GetN>
 8005002:	4603      	mov	r3, r0
 8005004:	fb03 f404 	mul.w	r4, r3, r4
 8005008:	f7ff fd1e 	bl	8004a48 <LL_RCC_PLL_GetR>
 800500c:	4603      	mov	r3, r0
 800500e:	0e5b      	lsrs	r3, r3, #25
 8005010:	3301      	adds	r3, #1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	08007578 	.word	0x08007578
 8005024:	00f42400 	.word	0x00f42400
 8005028:	007a1200 	.word	0x007a1200

0800502c <LL_USART_IsEnabled>:
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <LL_USART_IsEnabled+0x18>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <LL_USART_IsEnabled+0x1a>
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_USART_SetStopBitsLength>:
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	605a      	str	r2, [r3, #4]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_USART_SetHWFlowCtrl>:
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_USART_SetBaudRate>:
{
 800509e:	b480      	push	{r7}
 80050a0:	b087      	sub	sp, #28
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b2:	d11a      	bne.n	80050ea <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	005a      	lsls	r2, r3, #1
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80050ce:	4013      	ands	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	60da      	str	r2, [r3, #12]
}
 80050e8:	e00a      	b.n	8005100 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	085a      	lsrs	r2, r3, #1
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	441a      	add	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	60da      	str	r2, [r3, #12]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ff84 	bl	800502c <LL_USART_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d15b      	bne.n	80051e2 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <LL_USART_Init+0xe0>)
 8005130:	4013      	ands	r3, r2
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	6851      	ldr	r1, [r2, #4]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	68d2      	ldr	r2, [r2, #12]
 800513a:	4311      	orrs	r1, r2
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	6912      	ldr	r2, [r2, #16]
 8005140:	4311      	orrs	r1, r2
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	6992      	ldr	r2, [r2, #24]
 8005146:	430a      	orrs	r2, r1
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ff7c 	bl	8005052 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff89 	bl	8005078 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <LL_USART_Init+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d104      	bne.n	8005178 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800516e:	2003      	movs	r0, #3
 8005170:	f7ff fc86 	bl	8004a80 <LL_RCC_GetUSARTClockFreq>
 8005174:	60b8      	str	r0, [r7, #8]
 8005176:	e023      	b.n	80051c0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <LL_USART_Init+0xe8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d104      	bne.n	800518a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005180:	200c      	movs	r0, #12
 8005182:	f7ff fc7d 	bl	8004a80 <LL_RCC_GetUSARTClockFreq>
 8005186:	60b8      	str	r0, [r7, #8]
 8005188:	e01a      	b.n	80051c0 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <LL_USART_Init+0xec>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d104      	bne.n	800519c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005192:	2030      	movs	r0, #48	; 0x30
 8005194:	f7ff fc74 	bl	8004a80 <LL_RCC_GetUSARTClockFreq>
 8005198:	60b8      	str	r0, [r7, #8]
 800519a:	e011      	b.n	80051c0 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a17      	ldr	r2, [pc, #92]	; (80051fc <LL_USART_Init+0xf0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d104      	bne.n	80051ae <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80051a4:	20c0      	movs	r0, #192	; 0xc0
 80051a6:	f7ff fd4f 	bl	8004c48 <LL_RCC_GetUARTClockFreq>
 80051aa:	60b8      	str	r0, [r7, #8]
 80051ac:	e008      	b.n	80051c0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <LL_USART_Init+0xf4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d104      	bne.n	80051c0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80051b6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80051ba:	f7ff fd45 	bl	8004c48 <LL_RCC_GetUARTClockFreq>
 80051be:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff5e 	bl	800509e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	efff69f3 	.word	0xefff69f3
 80051f0:	40013800 	.word	0x40013800
 80051f4:	40004400 	.word	0x40004400
 80051f8:	40004800 	.word	0x40004800
 80051fc:	40004c00 	.word	0x40004c00
 8005200:	40005000 	.word	0x40005000

08005204 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005216:	2b84      	cmp	r3, #132	; 0x84
 8005218:	d005      	beq.n	8005226 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800521a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	3303      	adds	r3, #3
 8005224:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005238:	f000 ffde 	bl	80061f8 <vTaskStartScheduler>
  
  return osOK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	bd80      	pop	{r7, pc}

08005242 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005244:	b089      	sub	sp, #36	; 0x24
 8005246:	af04      	add	r7, sp, #16
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <osThreadCreate+0x54>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685c      	ldr	r4, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681d      	ldr	r5, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691e      	ldr	r6, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ffc8 	bl	8005204 <makeFreeRtosPriority>
 8005274:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800527e:	9202      	str	r2, [sp, #8]
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	9100      	str	r1, [sp, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4632      	mov	r2, r6
 8005288:	4629      	mov	r1, r5
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fdec 	bl	8005e68 <xTaskCreateStatic>
 8005290:	4603      	mov	r3, r0
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e01c      	b.n	80052d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685c      	ldr	r4, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a2:	b29e      	uxth	r6, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ffaa 	bl	8005204 <makeFreeRtosPriority>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f107 030c 	add.w	r3, r7, #12
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	9200      	str	r2, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4632      	mov	r2, r6
 80052be:	4629      	mov	r1, r5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fe2e 	bl	8005f22 <xTaskCreate>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052d0:	68fb      	ldr	r3, [r7, #12]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <osDelay+0x16>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	e000      	b.n	80052f2 <osDelay+0x18>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 ff4c 	bl	8006190 <vTaskDelay>
  
  return osOK;
 80052f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f103 0208 	add.w	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 32ff 	mov.w	r2, #4294967295
 800531a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f103 0208 	add.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d103      	bne.n	80053c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e00c      	b.n	80053de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3308      	adds	r3, #8
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e002      	b.n	80053d2 <vListInsert+0x2e>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d2f6      	bcs.n	80053cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6852      	ldr	r2, [r2, #4]
 8005436:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d103      	bne.n	800544a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	1e5a      	subs	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005496:	f001 fce5 	bl	8006e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	441a      	add	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	3b01      	subs	r3, #1
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	22ff      	movs	r2, #255	; 0xff
 80054da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	22ff      	movs	r2, #255	; 0xff
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d114      	bne.n	8005516 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01a      	beq.n	800552a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3310      	adds	r3, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 f8bf 	bl	800667c <xTaskRemoveFromEventList>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <xQueueGenericReset+0xcc>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	e009      	b.n	800552a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3310      	adds	r3, #16
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fef1 	bl	8005302 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3324      	adds	r3, #36	; 0x24
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff feec 	bl	8005302 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800552a:	f001 fccb 	bl	8006ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800552e:	2301      	movs	r3, #1
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	3348      	adds	r3, #72	; 0x48
 8005574:	4618      	mov	r0, r3
 8005576:	f001 fd97 	bl	80070a8 <pvPortMalloc>
 800557a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d011      	beq.n	80055a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3348      	adds	r3, #72	; 0x48
 800558a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005594:	79fa      	ldrb	r2, [r7, #7]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4613      	mov	r3, r2
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f805 	bl	80055b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a6:	69bb      	ldr	r3, [r7, #24]
	}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055de:	2101      	movs	r1, #1
 80055e0:	69b8      	ldr	r0, [r7, #24]
 80055e2:	f7ff ff43 	bl	800546c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800560e:	2300      	movs	r3, #0
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f81d 	bl	8005654 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	461a      	mov	r2, r3
 8005638:	6939      	ldr	r1, [r7, #16]
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f7ff ff7e 	bl	800553c <xQueueGenericCreate>
 8005640:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff ffd3 	bl	80055ee <prvInitialiseMutex>

		return xNewQueue;
 8005648:	68fb      	ldr	r3, [r7, #12]
	}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005662:	2300      	movs	r3, #0
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xQueueGenericSend+0x32>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <xQueueGenericSend+0x40>
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <xQueueGenericSend+0x44>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <xQueueGenericSend+0x46>
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <xQueueGenericSend+0x60>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d103      	bne.n	80056c2 <xQueueGenericSend+0x6e>
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <xQueueGenericSend+0x72>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <xQueueGenericSend+0x74>
 80056c6:	2300      	movs	r3, #0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	623b      	str	r3, [r7, #32]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056e2:	f001 f987 	bl	80069f4 <xTaskGetSchedulerState>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <xQueueGenericSend+0x9e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <xQueueGenericSend+0xa2>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <xQueueGenericSend+0xa4>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <xQueueGenericSend+0xbe>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	61fb      	str	r3, [r7, #28]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005712:	f001 fba7 	bl	8006e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <xQueueGenericSend+0xd4>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d129      	bne.n	800577c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572e:	f000 fa8b 	bl	8005c48 <prvCopyDataToQueue>
 8005732:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d010      	beq.n	800575e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	4618      	mov	r0, r3
 8005742:	f000 ff9b 	bl	800667c <xTaskRemoveFromEventList>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d013      	beq.n	8005774 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800574c:	4b3f      	ldr	r3, [pc, #252]	; (800584c <xQueueGenericSend+0x1f8>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	e00a      	b.n	8005774 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005764:	4b39      	ldr	r3, [pc, #228]	; (800584c <xQueueGenericSend+0x1f8>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005774:	f001 fba6 	bl	8006ec4 <vPortExitCritical>
				return pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	e063      	b.n	8005844 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005782:	f001 fb9f 	bl	8006ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005786:	2300      	movs	r3, #0
 8005788:	e05c      	b.n	8005844 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005790:	f107 0314 	add.w	r3, r7, #20
 8005794:	4618      	mov	r0, r3
 8005796:	f000 ffd3 	bl	8006740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800579a:	2301      	movs	r3, #1
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800579e:	f001 fb91 	bl	8006ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a2:	f000 fd89 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a6:	f001 fb5d 	bl	8006e64 <vPortEnterCritical>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d103      	bne.n	80057c0 <xQueueGenericSend+0x16c>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c6:	b25b      	sxtb	r3, r3
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d103      	bne.n	80057d6 <xQueueGenericSend+0x182>
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d6:	f001 fb75 	bl	8006ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057da:	1d3a      	adds	r2, r7, #4
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 ffc2 	bl	800676c <xTaskCheckForTimeOut>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d124      	bne.n	8005838 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f0:	f000 fb22 	bl	8005e38 <prvIsQueueFull>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d018      	beq.n	800582c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	3310      	adds	r3, #16
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 ff16 	bl	8006634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580a:	f000 faad 	bl	8005d68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800580e:	f000 fd61 	bl	80062d4 <xTaskResumeAll>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	f47f af7c 	bne.w	8005712 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <xQueueGenericSend+0x1f8>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	e772      	b.n	8005712 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800582c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582e:	f000 fa9b 	bl	8005d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005832:	f000 fd4f 	bl	80062d4 <xTaskResumeAll>
 8005836:	e76c      	b.n	8005712 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583a:	f000 fa95 	bl	8005d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583e:	f000 fd49 	bl	80062d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005844:	4618      	mov	r0, r3
 8005846:	3738      	adds	r7, #56	; 0x38
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b090      	sub	sp, #64	; 0x40
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <xQueueGenericSendFromISR+0x3c>
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xQueueGenericSendFromISR+0x40>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <xQueueGenericSendFromISR+0x42>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSendFromISR+0x6a>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <xQueueGenericSendFromISR+0x6e>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericSendFromISR+0x70>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058da:	f001 fba5 	bl	8007028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058de:	f3ef 8211 	mrs	r2, BASEPRI
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	61fa      	str	r2, [r7, #28]
 80058f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <xQueueGenericSendFromISR+0xbc>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d12f      	bne.n	800596c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005922:	f000 f991 	bl	8005c48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005926:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d112      	bne.n	8005956 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d016      	beq.n	8005966 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fe9d 	bl	800667c <xTaskRemoveFromEventList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e007      	b.n	8005966 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800595a:	3301      	adds	r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	b25a      	sxtb	r2, r3
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800596a:	e001      	b.n	8005970 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800596c:	2300      	movs	r3, #0
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800597a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800597e:	4618      	mov	r0, r3
 8005980:	3740      	adds	r7, #64	; 0x40
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	; 0x30
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <xQueueReceive+0x30>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	623b      	str	r3, [r7, #32]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <xQueueReceive+0x3e>
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <xQueueReceive+0x42>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <xQueueReceive+0x44>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <xQueueReceive+0x5e>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	61fb      	str	r3, [r7, #28]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e6:	f001 f805 	bl	80069f4 <xTaskGetSchedulerState>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <xQueueReceive+0x6e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <xQueueReceive+0x72>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <xQueueReceive+0x74>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueReceive+0x8e>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	61bb      	str	r3, [r7, #24]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a16:	f001 fa25 	bl	8006e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01f      	beq.n	8005a66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a2a:	f000 f977 	bl	8005d1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1e5a      	subs	r2, r3, #1
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00f      	beq.n	8005a5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	3310      	adds	r3, #16
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fe1a 	bl	800667c <xTaskRemoveFromEventList>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a4e:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <xQueueReceive+0x1bc>)
 8005a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a5e:	f001 fa31 	bl	8006ec4 <vPortExitCritical>
				return pdPASS;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e069      	b.n	8005b3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a6c:	f001 fa2a 	bl	8006ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e062      	b.n	8005b3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a7a:	f107 0310 	add.w	r3, r7, #16
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fe5e 	bl	8006740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a88:	f001 fa1c 	bl	8006ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8c:	f000 fc14 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a90:	f001 f9e8 	bl	8006e64 <vPortEnterCritical>
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a9a:	b25b      	sxtb	r3, r3
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d103      	bne.n	8005aaa <xQueueReceive+0x122>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d103      	bne.n	8005ac0 <xQueueReceive+0x138>
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac0:	f001 fa00 	bl	8006ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac4:	1d3a      	adds	r2, r7, #4
 8005ac6:	f107 0310 	add.w	r3, r7, #16
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fe4d 	bl	800676c <xTaskCheckForTimeOut>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d123      	bne.n	8005b20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ada:	f000 f997 	bl	8005e0c <prvIsQueueEmpty>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d017      	beq.n	8005b14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	3324      	adds	r3, #36	; 0x24
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fda1 	bl	8006634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af4:	f000 f938 	bl	8005d68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005af8:	f000 fbec 	bl	80062d4 <xTaskResumeAll>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d189      	bne.n	8005a16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <xQueueReceive+0x1bc>)
 8005b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	e780      	b.n	8005a16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b16:	f000 f927 	bl	8005d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1a:	f000 fbdb 	bl	80062d4 <xTaskResumeAll>
 8005b1e:	e77a      	b.n	8005a16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b22:	f000 f921 	bl	8005d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b26:	f000 fbd5 	bl	80062d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2c:	f000 f96e 	bl	8005e0c <prvIsQueueEmpty>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f43f af6f 	beq.w	8005a16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3730      	adds	r7, #48	; 0x30
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08e      	sub	sp, #56	; 0x38
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	623b      	str	r3, [r7, #32]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <xQueueReceiveFromISR+0x3a>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <xQueueReceiveFromISR+0x3e>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <xQueueReceiveFromISR+0x40>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	61fb      	str	r3, [r7, #28]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ba2:	f001 fa41 	bl	8007028 <vPortValidateInterruptPriority>
	__asm volatile
 8005ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61ba      	str	r2, [r7, #24]
 8005bbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02f      	beq.n	8005c2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bdc:	f000 f89e 	bl	8005d1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	1e5a      	subs	r2, r3, #1
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005be8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d112      	bne.n	8005c18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d016      	beq.n	8005c28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fd3c 	bl	800667c <xTaskRemoveFromEventList>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e007      	b.n	8005c28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	b25a      	sxtb	r2, r3
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2c:	e001      	b.n	8005c32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f383 8811 	msr	BASEPRI, r3
}
 8005c3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3738      	adds	r7, #56	; 0x38
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d14d      	bne.n	8005d0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fedc 	bl	8006a30 <xTaskPriorityDisinherit>
 8005c78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	609a      	str	r2, [r3, #8]
 8005c80:	e043      	b.n	8005d0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d119      	bne.n	8005cbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6858      	ldr	r0, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	461a      	mov	r2, r3
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	f001 fc16 	bl	80074c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d32b      	bcc.n	8005d0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e026      	b.n	8005d0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68d8      	ldr	r0, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	f001 fbfc 	bl	80074c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	441a      	add	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d207      	bcs.n	8005cf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d105      	bne.n	8005d0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d12:	697b      	ldr	r3, [r7, #20]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	441a      	add	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d303      	bcc.n	8005d50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68d9      	ldr	r1, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6838      	ldr	r0, [r7, #0]
 8005d5c:	f001 fbb2 	bl	80074c4 <memcpy>
	}
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d70:	f001 f878 	bl	8006e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d7c:	e011      	b.n	8005da2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d012      	beq.n	8005dac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3324      	adds	r3, #36	; 0x24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fc76 	bl	800667c <xTaskRemoveFromEventList>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d96:	f000 fd4b 	bl	8006830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dce9      	bgt.n	8005d7e <prvUnlockQueue+0x16>
 8005daa:	e000      	b.n	8005dae <prvUnlockQueue+0x46>
					break;
 8005dac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	22ff      	movs	r2, #255	; 0xff
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005db6:	f001 f885 	bl	8006ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dba:	f001 f853 	bl	8006e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dc6:	e011      	b.n	8005dec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d012      	beq.n	8005df6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fc51 	bl	800667c <xTaskRemoveFromEventList>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005de0:	f000 fd26 	bl	8006830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dce9      	bgt.n	8005dc8 <prvUnlockQueue+0x60>
 8005df4:	e000      	b.n	8005df8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005df6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e00:	f001 f860 	bl	8006ec4 <vPortExitCritical>
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e14:	f001 f826 	bl	8006e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e001      	b.n	8005e2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e2a:	f001 f84b 	bl	8006ec4 <vPortExitCritical>

	return xReturn;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e40:	f001 f810 	bl	8006e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d102      	bne.n	8005e56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e001      	b.n	8005e5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e5a:	f001 f833 	bl	8006ec4 <vPortExitCritical>

	return xReturn;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af04      	add	r7, sp, #16
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	623b      	str	r3, [r7, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xTaskCreateStatic+0x46>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61fb      	str	r3, [r7, #28]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eae:	2354      	movs	r3, #84	; 0x54
 8005eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b54      	cmp	r3, #84	; 0x54
 8005eb6:	d00a      	beq.n	8005ece <xTaskCreateStatic+0x66>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	61bb      	str	r3, [r7, #24]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01e      	beq.n	8005f14 <xTaskCreateStatic+0xac>
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	9302      	str	r3, [sp, #8]
 8005ef6:	f107 0314 	add.w	r3, r7, #20
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f850 	bl	8005fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0e:	f000 f8d5 	bl	80060bc <prvAddNewTaskToReadyList>
 8005f12:	e001      	b.n	8005f18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f18:	697b      	ldr	r3, [r7, #20]
	}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3728      	adds	r7, #40	; 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08c      	sub	sp, #48	; 0x30
 8005f26:	af04      	add	r7, sp, #16
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f8b6 	bl	80070a8 <pvPortMalloc>
 8005f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f44:	2054      	movs	r0, #84	; 0x54
 8005f46:	f001 f8af 	bl	80070a8 <pvPortMalloc>
 8005f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
 8005f58:	e005      	b.n	8005f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f001 f970 	bl	8007240 <vPortFree>
 8005f60:	e001      	b.n	8005f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9303      	str	r3, [sp, #12]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	9302      	str	r3, [sp, #8]
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f80e 	bl	8005fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f90:	69f8      	ldr	r0, [r7, #28]
 8005f92:	f000 f893 	bl	80060bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f96:	2301      	movs	r3, #1
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e002      	b.n	8005fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3720      	adds	r7, #32
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f023 0307 	bic.w	r3, r3, #7
 8005fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01f      	beq.n	800603a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e012      	b.n	8006026 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	7819      	ldrb	r1, [r3, #0]
 8006008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	3334      	adds	r3, #52	; 0x34
 8006010:	460a      	mov	r2, r1
 8006012:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d9e9      	bls.n	8006000 <prvInitialiseNewTask+0x54>
 800602c:	e000      	b.n	8006030 <prvInitialiseNewTask+0x84>
			{
				break;
 800602e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006038:	e003      	b.n	8006042 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2b06      	cmp	r3, #6
 8006046:	d901      	bls.n	800604c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006048:	2306      	movs	r3, #6
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2200      	movs	r2, #0
 800605c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f96d 	bl	8005342 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	3318      	adds	r3, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f968 	bl	8005342 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f1c3 0207 	rsb	r2, r3, #7
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2200      	movs	r2, #0
 800608c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	69b8      	ldr	r0, [r7, #24]
 800609c:	f000 fdb4 	bl	8006c08 <pxPortInitialiseStack>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b2:	bf00      	nop
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c4:	f000 fece 	bl	8006e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c8:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <prvAddNewTaskToReadyList+0xb8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	4a29      	ldr	r2, [pc, #164]	; (8006174 <prvAddNewTaskToReadyList+0xb8>)
 80060d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060d2:	4b29      	ldr	r3, [pc, #164]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060da:	4a27      	ldr	r2, [pc, #156]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e0:	4b24      	ldr	r3, [pc, #144]	; (8006174 <prvAddNewTaskToReadyList+0xb8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d110      	bne.n	800610a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e8:	f000 fbc6 	bl	8006878 <prvInitialiseTaskLists>
 80060ec:	e00d      	b.n	800610a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060ee:	4b23      	ldr	r3, [pc, #140]	; (800617c <prvAddNewTaskToReadyList+0xc0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060f6:	4b20      	ldr	r3, [pc, #128]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d802      	bhi.n	800610a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006104:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3301      	adds	r3, #1
 8006110:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 8006112:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4313      	orrs	r3, r2
 8006122:	4a18      	ldr	r2, [pc, #96]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <prvAddNewTaskToReadyList+0xcc>)
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7ff f90d 	bl	800535c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006142:	f000 febf 	bl	8006ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <prvAddNewTaskToReadyList+0xc0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00e      	beq.n	800616c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800614e:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	429a      	cmp	r2, r3
 800615a:	d207      	bcs.n	800616c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800615c:	4b0b      	ldr	r3, [pc, #44]	; (800618c <prvAddNewTaskToReadyList+0xd0>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000388 	.word	0x20000388
 8006178:	20000288 	.word	0x20000288
 800617c:	20000394 	.word	0x20000394
 8006180:	200003a4 	.word	0x200003a4
 8006184:	20000390 	.word	0x20000390
 8006188:	2000028c 	.word	0x2000028c
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <vTaskDelay+0x60>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vTaskDelay+0x30>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60bb      	str	r3, [r7, #8]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c0:	f000 f87a 	bl	80062b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fcb8 	bl	8006b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061cc:	f000 f882 	bl	80062d4 <xTaskResumeAll>
 80061d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d107      	bne.n	80061e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <vTaskDelay+0x64>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200003b0 	.word	0x200003b0
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006206:	463a      	mov	r2, r7
 8006208:	1d39      	adds	r1, r7, #4
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa f95a 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	460a      	mov	r2, r1
 8006226:	491e      	ldr	r1, [pc, #120]	; (80062a0 <vTaskStartScheduler+0xa8>)
 8006228:	481e      	ldr	r0, [pc, #120]	; (80062a4 <vTaskStartScheduler+0xac>)
 800622a:	f7ff fe1d 	bl	8005e68 <xTaskCreateStatic>
 800622e:	4603      	mov	r3, r0
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <vTaskStartScheduler+0xb0>)
 8006232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <vTaskStartScheduler+0xb0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e001      	b.n	8006246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d116      	bne.n	800627a <vTaskStartScheduler+0x82>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <vTaskStartScheduler+0xb4>)
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <vTaskStartScheduler+0xb8>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <vTaskStartScheduler+0xbc>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006274:	f000 fd54 	bl	8006d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006278:	e00e      	b.n	8006298 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d10a      	bne.n	8006298 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60fb      	str	r3, [r7, #12]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vTaskStartScheduler+0x9e>
}
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	08007550 	.word	0x08007550
 80062a4:	08006849 	.word	0x08006849
 80062a8:	200003ac 	.word	0x200003ac
 80062ac:	200003a8 	.word	0x200003a8
 80062b0:	20000394 	.word	0x20000394
 80062b4:	2000038c 	.word	0x2000038c

080062b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a03      	ldr	r2, [pc, #12]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	200003b0 	.word	0x200003b0

080062d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062e2:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <xTaskResumeAll+0x114>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xTaskResumeAll+0x2c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	603b      	str	r3, [r7, #0]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006300:	f000 fdb0 	bl	8006e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006304:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <xTaskResumeAll+0x114>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a37      	ldr	r2, [pc, #220]	; (80063e8 <xTaskResumeAll+0x114>)
 800630c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630e:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <xTaskResumeAll+0x114>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d161      	bne.n	80063da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006316:	4b35      	ldr	r3, [pc, #212]	; (80063ec <xTaskResumeAll+0x118>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05d      	beq.n	80063da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631e:	e02e      	b.n	800637e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006320:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <xTaskResumeAll+0x11c>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3318      	adds	r3, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f872 	bl	8005416 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff f86d 	bl	8005416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	2201      	movs	r2, #1
 8006342:	409a      	lsls	r2, r3
 8006344:	4b2b      	ldr	r3, [pc, #172]	; (80063f4 <xTaskResumeAll+0x120>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4313      	orrs	r3, r2
 800634a:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <xTaskResumeAll+0x120>)
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <xTaskResumeAll+0x124>)
 800635c:	441a      	add	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe fff9 	bl	800535c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	4b23      	ldr	r3, [pc, #140]	; (80063fc <xTaskResumeAll+0x128>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	429a      	cmp	r2, r3
 8006376:	d302      	bcc.n	800637e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006378:	4b21      	ldr	r3, [pc, #132]	; (8006400 <xTaskResumeAll+0x12c>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <xTaskResumeAll+0x11c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1cc      	bne.n	8006320 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800638c:	f000 fb12 	bl	80069b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xTaskResumeAll+0x130>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800639c:	f000 f836 	bl	800640c <xTaskIncrementTick>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063a6:	4b16      	ldr	r3, [pc, #88]	; (8006400 <xTaskResumeAll+0x12c>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f1      	bne.n	800639c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <xTaskResumeAll+0x130>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xTaskResumeAll+0x12c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <xTaskResumeAll+0x134>)
 80063cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063da:	f000 fd73 	bl	8006ec4 <vPortExitCritical>

	return xAlreadyYielded;
 80063de:	68bb      	ldr	r3, [r7, #8]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	200003b0 	.word	0x200003b0
 80063ec:	20000388 	.word	0x20000388
 80063f0:	20000348 	.word	0x20000348
 80063f4:	20000390 	.word	0x20000390
 80063f8:	2000028c 	.word	0x2000028c
 80063fc:	20000288 	.word	0x20000288
 8006400:	2000039c 	.word	0x2000039c
 8006404:	20000398 	.word	0x20000398
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006416:	4b4e      	ldr	r3, [pc, #312]	; (8006550 <xTaskIncrementTick+0x144>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 808e 	bne.w	800653c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006420:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <xTaskIncrementTick+0x148>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006428:	4a4a      	ldr	r2, [pc, #296]	; (8006554 <xTaskIncrementTick+0x148>)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d120      	bne.n	8006476 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006434:	4b48      	ldr	r3, [pc, #288]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <xTaskIncrementTick+0x48>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <xTaskIncrementTick+0x46>
 8006454:	4b40      	ldr	r3, [pc, #256]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <xTaskIncrementTick+0x150>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a3e      	ldr	r2, [pc, #248]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4a3e      	ldr	r2, [pc, #248]	; (800655c <xTaskIncrementTick+0x150>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	4b3d      	ldr	r3, [pc, #244]	; (8006560 <xTaskIncrementTick+0x154>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	4a3c      	ldr	r2, [pc, #240]	; (8006560 <xTaskIncrementTick+0x154>)
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	f000 fa9f 	bl	80069b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006476:	4b3b      	ldr	r3, [pc, #236]	; (8006564 <xTaskIncrementTick+0x158>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d348      	bcc.n	8006512 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006480:	4b35      	ldr	r3, [pc, #212]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <xTaskIncrementTick+0x158>)
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	601a      	str	r2, [r3, #0]
					break;
 8006492:	e03e      	b.n	8006512 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006494:	4b30      	ldr	r3, [pc, #192]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d203      	bcs.n	80064b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xTaskIncrementTick+0x158>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064b2:	e02e      	b.n	8006512 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe ffac 	bl	8005416 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3318      	adds	r3, #24
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe ffa3 	bl	8005416 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	2201      	movs	r2, #1
 80064d6:	409a      	lsls	r2, r3
 80064d8:	4b23      	ldr	r3, [pc, #140]	; (8006568 <xTaskIncrementTick+0x15c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <xTaskIncrementTick+0x15c>)
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a1f      	ldr	r2, [pc, #124]	; (800656c <xTaskIncrementTick+0x160>)
 80064f0:	441a      	add	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7fe ff2f 	bl	800535c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <xTaskIncrementTick+0x164>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	429a      	cmp	r2, r3
 800650a:	d3b9      	bcc.n	8006480 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006510:	e7b6      	b.n	8006480 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <xTaskIncrementTick+0x164>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4914      	ldr	r1, [pc, #80]	; (800656c <xTaskIncrementTick+0x160>)
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d901      	bls.n	800652e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <xTaskIncrementTick+0x168>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e004      	b.n	8006546 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <xTaskIncrementTick+0x16c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3301      	adds	r3, #1
 8006542:	4a0d      	ldr	r2, [pc, #52]	; (8006578 <xTaskIncrementTick+0x16c>)
 8006544:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200003b0 	.word	0x200003b0
 8006554:	2000038c 	.word	0x2000038c
 8006558:	20000340 	.word	0x20000340
 800655c:	20000344 	.word	0x20000344
 8006560:	200003a0 	.word	0x200003a0
 8006564:	200003a8 	.word	0x200003a8
 8006568:	20000390 	.word	0x20000390
 800656c:	2000028c 	.word	0x2000028c
 8006570:	20000288 	.word	0x20000288
 8006574:	2000039c 	.word	0x2000039c
 8006578:	20000398 	.word	0x20000398

0800657c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <vTaskSwitchContext+0xa4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <vTaskSwitchContext+0xa8>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006590:	e03f      	b.n	8006612 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <vTaskSwitchContext+0xa8>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006598:	4b23      	ldr	r3, [pc, #140]	; (8006628 <vTaskSwitchContext+0xac>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	fab3 f383 	clz	r3, r3
 80065a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	f1c3 031f 	rsb	r3, r3, #31
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	491f      	ldr	r1, [pc, #124]	; (800662c <vTaskSwitchContext+0xb0>)
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskSwitchContext+0x5a>
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4a12      	ldr	r2, [pc, #72]	; (800662c <vTaskSwitchContext+0xb0>)
 80065e4:	4413      	add	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3308      	adds	r3, #8
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d104      	bne.n	8006608 <vTaskSwitchContext+0x8c>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	4a08      	ldr	r2, [pc, #32]	; (8006630 <vTaskSwitchContext+0xb4>)
 8006610:	6013      	str	r3, [r2, #0]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	200003b0 	.word	0x200003b0
 8006624:	2000039c 	.word	0x2000039c
 8006628:	20000390 	.word	0x20000390
 800662c:	2000028c 	.word	0x2000028c
 8006630:	20000288 	.word	0x20000288

08006634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <vTaskPlaceOnEventList+0x44>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3318      	adds	r3, #24
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fe fe9e 	bl	80053a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006668:	2101      	movs	r1, #1
 800666a:	6838      	ldr	r0, [r7, #0]
 800666c:	f000 fa66 	bl	8006b3c <prvAddCurrentTaskToDelayedList>
}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000288 	.word	0x20000288

0800667c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60fb      	str	r3, [r7, #12]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3318      	adds	r3, #24
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe feb2 	bl	8005416 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <xTaskRemoveFromEventList+0xac>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d11c      	bne.n	80066f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3304      	adds	r3, #4
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe fea9 	bl	8005416 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	2201      	movs	r2, #1
 80066ca:	409a      	lsls	r2, r3
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <xTaskRemoveFromEventList+0xb0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	4a16      	ldr	r2, [pc, #88]	; (800672c <xTaskRemoveFromEventList+0xb0>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a13      	ldr	r2, [pc, #76]	; (8006730 <xTaskRemoveFromEventList+0xb4>)
 80066e4:	441a      	add	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f7fe fe35 	bl	800535c <vListInsertEnd>
 80066f2:	e005      	b.n	8006700 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4619      	mov	r1, r3
 80066fa:	480e      	ldr	r0, [pc, #56]	; (8006734 <xTaskRemoveFromEventList+0xb8>)
 80066fc:	f7fe fe2e 	bl	800535c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <xTaskRemoveFromEventList+0xbc>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	429a      	cmp	r2, r3
 800670c:	d905      	bls.n	800671a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006712:	4b0a      	ldr	r3, [pc, #40]	; (800673c <xTaskRemoveFromEventList+0xc0>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e001      	b.n	800671e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800671e:	697b      	ldr	r3, [r7, #20]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	200003b0 	.word	0x200003b0
 800672c:	20000390 	.word	0x20000390
 8006730:	2000028c 	.word	0x2000028c
 8006734:	20000348 	.word	0x20000348
 8006738:	20000288 	.word	0x20000288
 800673c:	2000039c 	.word	0x2000039c

08006740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <vTaskInternalSetTimeOutState+0x24>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <vTaskInternalSetTimeOutState+0x28>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	605a      	str	r2, [r3, #4]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	200003a0 	.word	0x200003a0
 8006768:	2000038c 	.word	0x2000038c

0800676c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	613b      	str	r3, [r7, #16]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067ae:	f000 fb59 	bl	8006e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <xTaskCheckForTimeOut+0xbc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d102      	bne.n	80067d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e023      	b.n	800681a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <xTaskCheckForTimeOut+0xc0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d007      	beq.n	80067ee <xTaskCheckForTimeOut+0x82>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d302      	bcc.n	80067ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	e015      	b.n	800681a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d20b      	bcs.n	8006810 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff9b 	bl	8006740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e004      	b.n	800681a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800681a:	f000 fb53 	bl	8006ec4 <vPortExitCritical>

	return xReturn;
 800681e:	69fb      	ldr	r3, [r7, #28]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	2000038c 	.word	0x2000038c
 800682c:	200003a0 	.word	0x200003a0

08006830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <vTaskMissedYield+0x14>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	2000039c 	.word	0x2000039c

08006848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006850:	f000 f852 	bl	80068f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvIdleTask+0x28>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d9f9      	bls.n	8006850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <prvIdleTask+0x2c>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800686c:	e7f0      	b.n	8006850 <prvIdleTask+0x8>
 800686e:	bf00      	nop
 8006870:	2000028c 	.word	0x2000028c
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	e00c      	b.n	800689e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <prvInitialiseTaskLists+0x60>)
 8006890:	4413      	add	r3, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fd35 	bl	8005302 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3301      	adds	r3, #1
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	d9ef      	bls.n	8006884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068a4:	480d      	ldr	r0, [pc, #52]	; (80068dc <prvInitialiseTaskLists+0x64>)
 80068a6:	f7fe fd2c 	bl	8005302 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068aa:	480d      	ldr	r0, [pc, #52]	; (80068e0 <prvInitialiseTaskLists+0x68>)
 80068ac:	f7fe fd29 	bl	8005302 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068b0:	480c      	ldr	r0, [pc, #48]	; (80068e4 <prvInitialiseTaskLists+0x6c>)
 80068b2:	f7fe fd26 	bl	8005302 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068b6:	480c      	ldr	r0, [pc, #48]	; (80068e8 <prvInitialiseTaskLists+0x70>)
 80068b8:	f7fe fd23 	bl	8005302 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068bc:	480b      	ldr	r0, [pc, #44]	; (80068ec <prvInitialiseTaskLists+0x74>)
 80068be:	f7fe fd20 	bl	8005302 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvInitialiseTaskLists+0x78>)
 80068c4:	4a05      	ldr	r2, [pc, #20]	; (80068dc <prvInitialiseTaskLists+0x64>)
 80068c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvInitialiseTaskLists+0x7c>)
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <prvInitialiseTaskLists+0x68>)
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000028c 	.word	0x2000028c
 80068dc:	20000318 	.word	0x20000318
 80068e0:	2000032c 	.word	0x2000032c
 80068e4:	20000348 	.word	0x20000348
 80068e8:	2000035c 	.word	0x2000035c
 80068ec:	20000374 	.word	0x20000374
 80068f0:	20000340 	.word	0x20000340
 80068f4:	20000344 	.word	0x20000344

080068f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068fe:	e019      	b.n	8006934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006900:	f000 fab0 	bl	8006e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <prvCheckTasksWaitingTermination+0x50>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fd80 	bl	8005416 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <prvCheckTasksWaitingTermination+0x54>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a0b      	ldr	r2, [pc, #44]	; (800694c <prvCheckTasksWaitingTermination+0x54>)
 800691e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3b01      	subs	r3, #1
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800692a:	f000 facb 	bl	8006ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f810 	bl	8006954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e1      	bne.n	8006900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	2000035c 	.word	0x2000035c
 800694c:	20000388 	.word	0x20000388
 8006950:	20000370 	.word	0x20000370

08006954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fc68 	bl	8007240 <vPortFree>
				vPortFree( pxTCB );
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc65 	bl	8007240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006976:	e018      	b.n	80069aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800697e:	2b01      	cmp	r3, #1
 8006980:	d103      	bne.n	800698a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc5c 	bl	8007240 <vPortFree>
	}
 8006988:	e00f      	b.n	80069aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006990:	2b02      	cmp	r3, #2
 8006992:	d00a      	beq.n	80069aa <prvDeleteTCB+0x56>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <prvDeleteTCB+0x54>
	}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069cc:	e008      	b.n	80069e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ce:	4b07      	ldr	r3, [pc, #28]	; (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069de:	6013      	str	r3, [r2, #0]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000340 	.word	0x20000340
 80069f0:	200003a8 	.word	0x200003a8

080069f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <xTaskGetSchedulerState+0x34>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a02:	2301      	movs	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e008      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a08:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <xTaskGetSchedulerState+0x38>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a10:	2302      	movs	r3, #2
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e001      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a1a:	687b      	ldr	r3, [r7, #4]
	}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	20000394 	.word	0x20000394
 8006a2c:	200003b0 	.word	0x200003b0

08006a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d06e      	beq.n	8006b24 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a46:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <xTaskPriorityDisinherit+0x100>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d00a      	beq.n	8006a66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60bb      	str	r3, [r7, #8]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d044      	beq.n	8006b24 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d140      	bne.n	8006b24 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fcb5 	bl	8005416 <uxListRemove>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d115      	bne.n	8006ade <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	491f      	ldr	r1, [pc, #124]	; (8006b34 <xTaskPriorityDisinherit+0x104>)
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xTaskPriorityDisinherit+0xae>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	2201      	movs	r2, #1
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	43da      	mvns	r2, r3
 8006ad4:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <xTaskPriorityDisinherit+0x108>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <xTaskPriorityDisinherit+0x108>)
 8006adc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f1c3 0207 	rsb	r2, r3, #7
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	2201      	movs	r2, #1
 8006af8:	409a      	lsls	r2, r3
 8006afa:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <xTaskPriorityDisinherit+0x108>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <xTaskPriorityDisinherit+0x108>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <xTaskPriorityDisinherit+0x104>)
 8006b12:	441a      	add	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7fe fc1e 	bl	800535c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b24:	697b      	ldr	r3, [r7, #20]
	}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000288 	.word	0x20000288
 8006b34:	2000028c 	.word	0x2000028c
 8006b38:	20000390 	.word	0x20000390

08006b3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fc5f 	bl	8005416 <uxListRemove>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b5e:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	2201      	movs	r2, #1
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	43da      	mvns	r2, r3
 8006b6c:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4013      	ands	r3, r2
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d10a      	bne.n	8006b94 <prvAddCurrentTaskToDelayedList+0x58>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	481a      	ldr	r0, [pc, #104]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b8e:	f7fe fbe5 	bl	800535c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b92:	e026      	b.n	8006be2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b9c:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d209      	bcs.n	8006bc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bac:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe fbf3 	bl	80053a4 <vListInsert>
}
 8006bbe:	e010      	b.n	8006be2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bc0:	4b0f      	ldr	r3, [pc, #60]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7fe fbe9 	bl	80053a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d202      	bcs.n	8006be2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bdc:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6013      	str	r3, [r2, #0]
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000038c 	.word	0x2000038c
 8006bf0:	20000288 	.word	0x20000288
 8006bf4:	20000390 	.word	0x20000390
 8006bf8:	20000374 	.word	0x20000374
 8006bfc:	20000344 	.word	0x20000344
 8006c00:	20000340 	.word	0x20000340
 8006c04:	200003a8 	.word	0x200003a8

08006c08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b04      	subs	r3, #4
 8006c18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3b04      	subs	r3, #4
 8006c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0201 	bic.w	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c38:	4a0c      	ldr	r2, [pc, #48]	; (8006c6c <pxPortInitialiseStack+0x64>)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b14      	subs	r3, #20
 8006c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b04      	subs	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f06f 0202 	mvn.w	r2, #2
 8006c56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3b20      	subs	r3, #32
 8006c5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	08006c71 	.word	0x08006c71

08006c70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <prvTaskExitError+0x54>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d00a      	beq.n	8006c9a <prvTaskExitError+0x2a>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <prvTaskExitError+0x28>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	60bb      	str	r3, [r7, #8]
}
 8006cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cae:	bf00      	nop
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0fc      	beq.n	8006cb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	2000000c 	.word	0x2000000c
	...

08006cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <pxCurrentTCBConst2>)
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6808      	ldr	r0, [r1, #0]
 8006cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cda:	f380 8809 	msr	PSP, r0
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f380 8811 	msr	BASEPRI, r0
 8006cea:	4770      	bx	lr
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst2>:
 8006cf0:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cf8:	4808      	ldr	r0, [pc, #32]	; (8006d1c <prvPortStartFirstTask+0x24>)
 8006cfa:	6800      	ldr	r0, [r0, #0]
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f380 8808 	msr	MSP, r0
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8814 	msr	CONTROL, r0
 8006d0a:	b662      	cpsie	i
 8006d0c:	b661      	cpsie	f
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	df00      	svc	0
 8006d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d1a:	bf00      	nop
 8006d1c:	e000ed08 	.word	0xe000ed08

08006d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d26:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <xPortStartScheduler+0x120>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a46      	ldr	r2, [pc, #280]	; (8006e44 <xPortStartScheduler+0x124>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d10a      	bne.n	8006d46 <xPortStartScheduler+0x26>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d46:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <xPortStartScheduler+0x120>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	; (8006e48 <xPortStartScheduler+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10a      	bne.n	8006d66 <xPortStartScheduler+0x46>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60fb      	str	r3, [r7, #12]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <xPortStartScheduler+0x12c>)
 8006d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	22ff      	movs	r2, #255	; 0xff
 8006d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <xPortStartScheduler+0x130>)
 8006d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d8e:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <xPortStartScheduler+0x134>)
 8006d90:	2207      	movs	r2, #7
 8006d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d94:	e009      	b.n	8006daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d96:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <xPortStartScheduler+0x134>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4a2d      	ldr	r2, [pc, #180]	; (8006e54 <xPortStartScheduler+0x134>)
 8006d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d0ef      	beq.n	8006d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006db6:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <xPortStartScheduler+0x134>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1c3 0307 	rsb	r3, r3, #7
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d00a      	beq.n	8006dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60bb      	str	r3, [r7, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <xPortStartScheduler+0x134>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <xPortStartScheduler+0x134>)
 8006de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <xPortStartScheduler+0x134>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dea:	4a1a      	ldr	r2, [pc, #104]	; (8006e54 <xPortStartScheduler+0x134>)
 8006dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006df6:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <xPortStartScheduler+0x138>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <xPortStartScheduler+0x138>)
 8006dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <xPortStartScheduler+0x138>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <xPortStartScheduler+0x138>)
 8006e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e0e:	f000 f8dd 	bl	8006fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <xPortStartScheduler+0x13c>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e18:	f000 f8fc 	bl	8007014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <xPortStartScheduler+0x140>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <xPortStartScheduler+0x140>)
 8006e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e28:	f7ff ff66 	bl	8006cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e2c:	f7ff fba6 	bl	800657c <vTaskSwitchContext>
	prvTaskExitError();
 8006e30:	f7ff ff1e 	bl	8006c70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	e000ed00 	.word	0xe000ed00
 8006e44:	410fc271 	.word	0x410fc271
 8006e48:	410fc270 	.word	0x410fc270
 8006e4c:	e000e400 	.word	0xe000e400
 8006e50:	200003b4 	.word	0x200003b4
 8006e54:	200003b8 	.word	0x200003b8
 8006e58:	e000ed20 	.word	0xe000ed20
 8006e5c:	2000000c 	.word	0x2000000c
 8006e60:	e000ef34 	.word	0xe000ef34

08006e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	607b      	str	r3, [r7, #4]
}
 8006e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <vPortEnterCritical+0x58>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	4a0d      	ldr	r2, [pc, #52]	; (8006ebc <vPortEnterCritical+0x58>)
 8006e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <vPortEnterCritical+0x58>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d10f      	bne.n	8006eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <vPortEnterCritical+0x5c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	603b      	str	r3, [r7, #0]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <vPortEnterCritical+0x4a>
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	2000000c 	.word	0x2000000c
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <vPortExitCritical+0x50>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <vPortExitCritical+0x24>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	607b      	str	r3, [r7, #4]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <vPortExitCritical+0x50>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <vPortExitCritical+0x50>)
 8006ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <vPortExitCritical+0x50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <vPortExitCritical+0x42>
 8006efa:	2300      	movs	r3, #0
 8006efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	f383 8811 	msr	BASEPRI, r3
}
 8006f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	2000000c 	.word	0x2000000c
	...

08006f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f20:	f3ef 8009 	mrs	r0, PSP
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <pxCurrentTCBConst>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	f01e 0f10 	tst.w	lr, #16
 8006f30:	bf08      	it	eq
 8006f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	6010      	str	r0, [r2, #0]
 8006f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f44:	f380 8811 	msr	BASEPRI, r0
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f7ff fb14 	bl	800657c <vTaskSwitchContext>
 8006f54:	f04f 0000 	mov.w	r0, #0
 8006f58:	f380 8811 	msr	BASEPRI, r0
 8006f5c:	bc09      	pop	{r0, r3}
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	6808      	ldr	r0, [r1, #0]
 8006f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f66:	f01e 0f10 	tst.w	lr, #16
 8006f6a:	bf08      	it	eq
 8006f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f70:	f380 8809 	msr	PSP, r0
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst>:
 8006f80:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	607b      	str	r3, [r7, #4]
}
 8006fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fa2:	f7ff fa33 	bl	800640c <xTaskIncrementTick>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <SysTick_Handler+0x40>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f383 8811 	msr	BASEPRI, r3
}
 8006fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <vPortSetupTimerInterrupt+0x34>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <vPortSetupTimerInterrupt+0x38>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <vPortSetupTimerInterrupt+0x3c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <vPortSetupTimerInterrupt+0x40>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <vPortSetupTimerInterrupt+0x44>)
 8006fea:	3b01      	subs	r3, #1
 8006fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <vPortSetupTimerInterrupt+0x34>)
 8006ff0:	2207      	movs	r2, #7
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	e000e010 	.word	0xe000e010
 8007004:	e000e018 	.word	0xe000e018
 8007008:	20000000 	.word	0x20000000
 800700c:	10624dd3 	.word	0x10624dd3
 8007010:	e000e014 	.word	0xe000e014

08007014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007024 <vPortEnableVFP+0x10>
 8007018:	6801      	ldr	r1, [r0, #0]
 800701a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800701e:	6001      	str	r1, [r0, #0]
 8007020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007022:	bf00      	nop
 8007024:	e000ed88 	.word	0xe000ed88

08007028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800702e:	f3ef 8305 	mrs	r3, IPSR
 8007032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d914      	bls.n	8007064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <vPortValidateInterruptPriority+0x70>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007044:	4b15      	ldr	r3, [pc, #84]	; (800709c <vPortValidateInterruptPriority+0x74>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	7afa      	ldrb	r2, [r7, #11]
 800704a:	429a      	cmp	r2, r3
 800704c:	d20a      	bcs.n	8007064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <vPortValidateInterruptPriority+0x78>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <vPortValidateInterruptPriority+0x7c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d90a      	bls.n	800708a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	603b      	str	r3, [r7, #0]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <vPortValidateInterruptPriority+0x60>
	}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	e000e3f0 	.word	0xe000e3f0
 800709c:	200003b4 	.word	0x200003b4
 80070a0:	e000ed0c 	.word	0xe000ed0c
 80070a4:	200003b8 	.word	0x200003b8

080070a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070b4:	f7ff f900 	bl	80062b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070b8:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <pvPortMalloc+0x180>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070c0:	f000 f920 	bl	8007304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070c4:	4b59      	ldr	r3, [pc, #356]	; (800722c <pvPortMalloc+0x184>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8093 	bne.w	80071f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01d      	beq.n	8007114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070d8:	2208      	movs	r2, #8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d014      	beq.n	8007114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f023 0307 	bic.w	r3, r3, #7
 80070f0:	3308      	adds	r3, #8
 80070f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <pvPortMalloc+0x6c>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d06e      	beq.n	80071f8 <pvPortMalloc+0x150>
 800711a:	4b45      	ldr	r3, [pc, #276]	; (8007230 <pvPortMalloc+0x188>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d869      	bhi.n	80071f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007124:	4b43      	ldr	r3, [pc, #268]	; (8007234 <pvPortMalloc+0x18c>)
 8007126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007128:	4b42      	ldr	r3, [pc, #264]	; (8007234 <pvPortMalloc+0x18c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800712e:	e004      	b.n	800713a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <pvPortMalloc+0xa4>
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f1      	bne.n	8007130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800714c:	4b36      	ldr	r3, [pc, #216]	; (8007228 <pvPortMalloc+0x180>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	429a      	cmp	r2, r3
 8007154:	d050      	beq.n	80071f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2208      	movs	r2, #8
 800715c:	4413      	add	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	2308      	movs	r3, #8
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	429a      	cmp	r2, r3
 8007176:	d91f      	bls.n	80071b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <pvPortMalloc+0xf8>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	613b      	str	r3, [r7, #16]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071b2:	69b8      	ldr	r0, [r7, #24]
 80071b4:	f000 f908 	bl	80073c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071b8:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <pvPortMalloc+0x188>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	4a1b      	ldr	r2, [pc, #108]	; (8007230 <pvPortMalloc+0x188>)
 80071c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071c6:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <pvPortMalloc+0x188>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <pvPortMalloc+0x190>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d203      	bcs.n	80071da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071d2:	4b17      	ldr	r3, [pc, #92]	; (8007230 <pvPortMalloc+0x188>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a18      	ldr	r2, [pc, #96]	; (8007238 <pvPortMalloc+0x190>)
 80071d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4b13      	ldr	r3, [pc, #76]	; (800722c <pvPortMalloc+0x184>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <pvPortMalloc+0x194>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3301      	adds	r3, #1
 80071f4:	4a11      	ldr	r2, [pc, #68]	; (800723c <pvPortMalloc+0x194>)
 80071f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071f8:	f7ff f86c 	bl	80062d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <pvPortMalloc+0x174>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60fb      	str	r3, [r7, #12]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <pvPortMalloc+0x172>
	return pvReturn;
 800721c:	69fb      	ldr	r3, [r7, #28]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3728      	adds	r7, #40	; 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000f7c 	.word	0x20000f7c
 800722c:	20000f90 	.word	0x20000f90
 8007230:	20000f80 	.word	0x20000f80
 8007234:	20000f74 	.word	0x20000f74
 8007238:	20000f84 	.word	0x20000f84
 800723c:	20000f88 	.word	0x20000f88

08007240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d04d      	beq.n	80072ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007252:	2308      	movs	r3, #8
 8007254:	425b      	negs	r3, r3
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4413      	add	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <vPortFree+0xb8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4013      	ands	r3, r2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <vPortFree+0x44>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <vPortFree+0x62>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	60bb      	str	r3, [r7, #8]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <vPortFree+0xb8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01e      	beq.n	80072ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d11a      	bne.n	80072ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <vPortFree+0xb8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072c8:	f7fe fff6 	bl	80062b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <vPortFree+0xbc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	4a09      	ldr	r2, [pc, #36]	; (80072fc <vPortFree+0xbc>)
 80072d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072da:	6938      	ldr	r0, [r7, #16]
 80072dc:	f000 f874 	bl	80073c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <vPortFree+0xc0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	4a06      	ldr	r2, [pc, #24]	; (8007300 <vPortFree+0xc0>)
 80072e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072ea:	f7fe fff3 	bl	80062d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072ee:	bf00      	nop
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000f90 	.word	0x20000f90
 80072fc:	20000f80 	.word	0x20000f80
 8007300:	20000f8c 	.word	0x20000f8c

08007304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800730a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800730e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007310:	4b27      	ldr	r3, [pc, #156]	; (80073b0 <prvHeapInit+0xac>)
 8007312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3307      	adds	r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <prvHeapInit+0xac>)
 8007334:	4413      	add	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800733c:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <prvHeapInit+0xb0>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007342:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <prvHeapInit+0xb0>)
 8007344:	2200      	movs	r2, #0
 8007346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007350:	2208      	movs	r2, #8
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <prvHeapInit+0xb4>)
 8007364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <prvHeapInit+0xb4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <prvHeapInit+0xb4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvHeapInit+0xb4>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <prvHeapInit+0xb8>)
 8007392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <prvHeapInit+0xbc>)
 800739a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <prvHeapInit+0xc0>)
 800739e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	200003bc 	.word	0x200003bc
 80073b4:	20000f74 	.word	0x20000f74
 80073b8:	20000f7c 	.word	0x20000f7c
 80073bc:	20000f84 	.word	0x20000f84
 80073c0:	20000f80 	.word	0x20000f80
 80073c4:	20000f90 	.word	0x20000f90

080073c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073d0:	4b28      	ldr	r3, [pc, #160]	; (8007474 <prvInsertBlockIntoFreeList+0xac>)
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <prvInsertBlockIntoFreeList+0x14>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d8f7      	bhi.n	80073d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d108      	bne.n	800740a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	441a      	add	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d118      	bne.n	8007450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <prvInsertBlockIntoFreeList+0xb0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d00d      	beq.n	8007446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	441a      	add	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	e008      	b.n	8007458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <prvInsertBlockIntoFreeList+0xb0>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e003      	b.n	8007458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d002      	beq.n	8007466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000f74 	.word	0x20000f74
 8007478:	20000f7c 	.word	0x20000f7c

0800747c <__libc_init_array>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4d0d      	ldr	r5, [pc, #52]	; (80074b4 <__libc_init_array+0x38>)
 8007480:	4c0d      	ldr	r4, [pc, #52]	; (80074b8 <__libc_init_array+0x3c>)
 8007482:	1b64      	subs	r4, r4, r5
 8007484:	10a4      	asrs	r4, r4, #2
 8007486:	2600      	movs	r6, #0
 8007488:	42a6      	cmp	r6, r4
 800748a:	d109      	bne.n	80074a0 <__libc_init_array+0x24>
 800748c:	4d0b      	ldr	r5, [pc, #44]	; (80074bc <__libc_init_array+0x40>)
 800748e:	4c0c      	ldr	r4, [pc, #48]	; (80074c0 <__libc_init_array+0x44>)
 8007490:	f000 f82e 	bl	80074f0 <_init>
 8007494:	1b64      	subs	r4, r4, r5
 8007496:	10a4      	asrs	r4, r4, #2
 8007498:	2600      	movs	r6, #0
 800749a:	42a6      	cmp	r6, r4
 800749c:	d105      	bne.n	80074aa <__libc_init_array+0x2e>
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a4:	4798      	blx	r3
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7ee      	b.n	8007488 <__libc_init_array+0xc>
 80074aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ae:	4798      	blx	r3
 80074b0:	3601      	adds	r6, #1
 80074b2:	e7f2      	b.n	800749a <__libc_init_array+0x1e>
 80074b4:	080075b0 	.word	0x080075b0
 80074b8:	080075b0 	.word	0x080075b0
 80074bc:	080075b0 	.word	0x080075b0
 80074c0:	080075b4 	.word	0x080075b4

080074c4 <memcpy>:
 80074c4:	440a      	add	r2, r1
 80074c6:	4291      	cmp	r1, r2
 80074c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074cc:	d100      	bne.n	80074d0 <memcpy+0xc>
 80074ce:	4770      	bx	lr
 80074d0:	b510      	push	{r4, lr}
 80074d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074da:	4291      	cmp	r1, r2
 80074dc:	d1f9      	bne.n	80074d2 <memcpy+0xe>
 80074de:	bd10      	pop	{r4, pc}

080074e0 <memset>:
 80074e0:	4402      	add	r2, r0
 80074e2:	4603      	mov	r3, r0
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d100      	bne.n	80074ea <memset+0xa>
 80074e8:	4770      	bx	lr
 80074ea:	f803 1b01 	strb.w	r1, [r3], #1
 80074ee:	e7f9      	b.n	80074e4 <memset+0x4>

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr
