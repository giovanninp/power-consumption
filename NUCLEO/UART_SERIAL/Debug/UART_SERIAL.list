
UART_SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095cc  080095cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080095d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  20000074  08009648  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  08009648  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002359b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045bf  00000000  00000000  0004363f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  00047c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c28  00000000  00000000  000499e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfcf  00000000  00000000  0004b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef06  00000000  00000000  000795d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c975  00000000  00000000  000984dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4e52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008290  00000000  00000000  001b4ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094ac 	.word	0x080094ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080094ac 	.word	0x080094ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	200000e4 	.word	0x200000e4

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f043 0201 	orr.w	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	609a      	str	r2, [r3, #8]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	2b20      	cmp	r3, #32
 800070c:	d101      	bne.n	8000712 <LL_USART_IsActiveFlag_RXNE+0x18>
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000730:	2b80      	cmp	r3, #128	; 0x80
 8000732:	d101      	bne.n	8000738 <LL_USART_IsActiveFlag_TXE+0x18>
 8000734:	2301      	movs	r3, #1
 8000736:	e000      	b.n	800073a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f043 0220 	orr.w	r2, r3, #32
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4013      	ands	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <LL_APB1_GRP1_EnableClock+0x2c>)
 800081e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <LL_APB1_GRP1_EnableClock+0x2c>)
 800082a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4013      	ands	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	4413      	add	r3, r2
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000868:	f023 0310 	bic.w	r3, r3, #16
 800086c:	4908      	ldr	r1, [pc, #32]	; (8000890 <LL_DMA_SetDataTransferDirection+0x4c>)
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	440a      	add	r2, r1
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	4611      	mov	r1, r2
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	440a      	add	r2, r1
 800087a:	4611      	mov	r1, r2
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4313      	orrs	r3, r2
 8000880:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000882:	bf00      	nop
 8000884:	371c      	adds	r7, #28
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	08009540 	.word	0x08009540

08000894 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LL_DMA_SetMode+0x48>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f023 0220 	bic.w	r2, r3, #32
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <LL_DMA_SetMode+0x48>)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	440b      	add	r3, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	440b      	add	r3, r1
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80008ce:	bf00      	nop
 80008d0:	371c      	adds	r7, #28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08009540 	.word	0x08009540

080008e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LL_DMA_SetPeriphIncMode+0x48>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000904:	4908      	ldr	r1, [pc, #32]	; (8000928 <LL_DMA_SetPeriphIncMode+0x48>)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	440b      	add	r3, r1
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	08009540 	.word	0x08009540

0800092c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LL_DMA_SetMemoryIncMode+0x48>)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	4413      	add	r3, r2
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000950:	4908      	ldr	r1, [pc, #32]	; (8000974 <LL_DMA_SetMemoryIncMode+0x48>)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	440b      	add	r3, r1
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	440b      	add	r3, r1
 800095e:	4619      	mov	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4313      	orrs	r3, r2
 8000964:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000966:	bf00      	nop
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	08009540 	.word	0x08009540

08000978 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LL_DMA_SetPeriphSize+0x48>)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	4413      	add	r3, r2
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800099c:	4908      	ldr	r1, [pc, #32]	; (80009c0 <LL_DMA_SetPeriphSize+0x48>)
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	440b      	add	r3, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	440b      	add	r3, r1
 80009aa:	4619      	mov	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80009b2:	bf00      	nop
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	08009540 	.word	0x08009540

080009c4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <LL_DMA_SetMemorySize+0x48>)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	4413      	add	r3, r2
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80009e8:	4908      	ldr	r1, [pc, #32]	; (8000a0c <LL_DMA_SetMemorySize+0x48>)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	440b      	add	r3, r1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	440b      	add	r3, r1
 80009f6:	4619      	mov	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80009fe:	bf00      	nop
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	08009540 	.word	0x08009540

08000a10 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	440b      	add	r3, r1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	440b      	add	r3, r1
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	08009540 	.word	0x08009540

08000a5c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	33a8      	adds	r3, #168	; 0xa8
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	210f      	movs	r1, #15
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	210f      	movs	r1, #15
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	e003      	b.n	8000aa6 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	fab3 f383 	clz	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	408b      	lsls	r3, r1
 8000aac:	68f9      	ldr	r1, [r7, #12]
 8000aae:	31a8      	adds	r1, #168	; 0xa8
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8000ab4:	bf00      	nop
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <read_voltage>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

uint16_t read_voltage(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <read_voltage+0x2c>)
 8000ac8:	f001 fa0a 	bl	8001ee0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <read_voltage+0x2c>)
 8000ad2:	f001 fabf 	bl	8002054 <HAL_ADC_PollForConversion>

	uint16_t input = HAL_ADC_GetValue(&hadc1);
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <read_voltage+0x2c>)
 8000ad8:	f001 fb94 	bl	8002204 <HAL_ADC_GetValue>
 8000adc:	4603      	mov	r3, r0
 8000ade:	80fb      	strh	r3, [r7, #6]

	return input;
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000100c 	.word	0x2000100c

08000af0 <sendchar>:

void sendchar(char c, char usart){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d10b      	bne.n	8000b1e <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <sendchar+0x54>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	1df9      	adds	r1, r7, #7
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b12:	f006 f95b 	bl	8006dcc <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <sendchar+0x58>)
 8000b18:	f7ff fe25 	bl	8000766 <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 8000b1c:	e00d      	b.n	8000b3a <sendchar+0x4a>
	else if( usart == USART_2){
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d10a      	bne.n	8000b3a <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <sendchar+0x5c>)
 8000b26:	6818      	ldr	r0, [r3, #0]
 8000b28:	1df9      	adds	r1, r7, #7
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	f006 f94c 	bl	8006dcc <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <sendchar+0x60>)
 8000b36:	f7ff fe16 	bl	8000766 <LL_USART_EnableIT_TXE>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200010fc 	.word	0x200010fc
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	200010f4 	.word	0x200010f4
 8000b50:	40004400 	.word	0x40004400

08000b54 <sendString>:

void sendString(char * str, char usart){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 8000b60:	e009      	b.n	8000b76 <sendString+0x22>
		sendchar(*str, usart);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	78fa      	ldrb	r2, [r7, #3]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffc0 	bl	8000af0 <sendchar>
		str++;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f1      	bne.n	8000b62 <sendString+0xe>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <readchar>:

char readchar(char usart){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d109      	bne.n	8000bb0 <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <readchar+0x4c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f107 010f 	add.w	r1, r7, #15
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 faa9 	bl	8007100 <xQueueReceive>
 8000bae:	e00b      	b.n	8000bc8 <readchar+0x40>
	else if(usart == USART_2)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d108      	bne.n	8000bc8 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <readchar+0x50>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f107 010f 	add.w	r1, r7, #15
 8000bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f006 fa9c 	bl	8007100 <xQueueReceive>
	return caracter;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20001008 	.word	0x20001008
 8000bd8:	200010f8 	.word	0x200010f8

08000bdc <voltage_scanner>:

void voltage_scanner(void * vParam) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	uint16_t potentiometer_buff;
	char potentiometer_result_buff[13];

	int countdown = 1000;
 8000be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be8:	61fb      	str	r3, [r7, #28]

	while(TRUE) {
		potentiometer_buff = read_voltage();
 8000bea:	f7ff ff69 	bl	8000ac0 <read_voltage>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	837b      	strh	r3, [r7, #26]

		if(!countdown) {
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d114      	bne.n	8000c22 <voltage_scanner+0x46>
			sprintf(potentiometer_result_buff, "%d", potentiometer_buff);
 8000bf8:	8b7a      	ldrh	r2, [r7, #26]
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	490b      	ldr	r1, [pc, #44]	; (8000c2c <voltage_scanner+0x50>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f833 	bl	8008c6c <siprintf>
			sendString(potentiometer_result_buff, USART_1);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffa1 	bl	8000b54 <sendString>
			sendString(";\r", USART_1);
 8000c12:	2101      	movs	r1, #1
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <voltage_scanner+0x54>)
 8000c16:	f7ff ff9d 	bl	8000b54 <sendString>
			countdown = 1000;
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	e7e3      	b.n	8000bea <voltage_scanner+0xe>
		} else {
			countdown--;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
		potentiometer_buff = read_voltage();
 8000c28:	e7df      	b.n	8000bea <voltage_scanner+0xe>
 8000c2a:	bf00      	nop
 8000c2c:	080094d0 	.word	0x080094d0
 8000c30:	080094d4 	.word	0x080094d4

08000c34 <cli>:
		}
	}
}

void cli(void * vParam)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint8_t caracter;

	while(TRUE)
	{
		caracter = readchar(USART_2);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff ffa3 	bl	8000b88 <readchar>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]
		if(caracter == 'h' || caracter == 'H'){
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b68      	cmp	r3, #104	; 0x68
 8000c4a:	d002      	beq.n	8000c52 <cli+0x1e>
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	2b48      	cmp	r3, #72	; 0x48
 8000c50:	d104      	bne.n	8000c5c <cli+0x28>
			sendString("Teste Serial\r\n", USART_1);
 8000c52:	2101      	movs	r1, #1
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <cli+0x38>)
 8000c56:	f7ff ff7d 	bl	8000b54 <sendString>
 8000c5a:	e006      	b.n	8000c6a <cli+0x36>
		} else if(caracter == 't') {
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	2b74      	cmp	r3, #116	; 0x74
 8000c60:	d1ec      	bne.n	8000c3c <cli+0x8>
			sendString("Teste Terminal\r\n", USART_2);
 8000c62:	2102      	movs	r1, #2
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <cli+0x3c>)
 8000c66:	f7ff ff75 	bl	8000b54 <sendString>
		caracter = readchar(USART_2);
 8000c6a:	e7e7      	b.n	8000c3c <cli+0x8>
 8000c6c:	080094d8 	.word	0x080094d8
 8000c70:	080094e8 	.word	0x080094e8

08000c74 <usart_1_fcn>:
		}
	}
}

void usart_1_fcn(void * vParam){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	char c;
	while(TRUE){
		c = readchar(USART_1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff ff83 	bl	8000b88 <readchar>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
		if( c != 0){
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f7      	beq.n	8000c7c <usart_1_fcn+0x8>
			sendchar(c, USART_2);
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	2102      	movs	r1, #2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff2d 	bl	8000af0 <sendchar>
		c = readchar(USART_1);
 8000c96:	e7f1      	b.n	8000c7c <usart_1_fcn+0x8>

08000c98 <USART_2_IRQHandler>:
		}
	}
}

void USART_2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000c9e:	482a      	ldr	r0, [pc, #168]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000ca0:	f7ff fd3e 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d026      	beq.n	8000cf8 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000caa:	e014      	b.n	8000cd6 <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <USART_2_IRQHandler+0xb4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	f107 010b 	add.w	r1, r7, #11
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fb01 	bl	80072c0 <xQueueReceiveFromISR>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d103      	bne.n	8000ccc <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 8000cc4:	4820      	ldr	r0, [pc, #128]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000cc6:	f7ff fd5e 	bl	8000786 <LL_USART_DisableIT_TXE>
 8000cca:	e00a      	b.n	8000ce2 <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000ccc:	7afb      	ldrb	r3, [r7, #11]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481d      	ldr	r0, [pc, #116]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000cd2:	f7ff fd76 	bl	80007c2 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000cd6:	481c      	ldr	r0, [pc, #112]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000cd8:	f7ff fd22 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1e4      	bne.n	8000cac <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <USART_2_IRQHandler+0x60>
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <USART_2_IRQHandler+0xb8>)
 8000cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000cfa:	f7ff fcfe 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d01d      	beq.n	8000d40 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000d04:	e00b      	b.n	8000d1e <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 8000d06:	4810      	ldr	r0, [pc, #64]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000d08:	f7ff fd4d 	bl	80007a6 <LL_USART_ReceiveData8>
 8000d0c:	4603      	mov	r3, r0
        	uint8_t byte =
 8000d0e:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <USART_2_IRQHandler+0xbc>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	1d3a      	adds	r2, r7, #4
 8000d16:	1cf9      	adds	r1, r7, #3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f006 f955 	bl	8006fc8 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <USART_2_IRQHandler+0xb0>)
 8000d20:	f7ff fceb 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ed      	bne.n	8000d06 <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d007      	beq.n	8000d40 <USART_2_IRQHandler+0xa8>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <USART_2_IRQHandler+0xb8>)
 8000d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
    }
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	200010f4 	.word	0x200010f4
 8000d50:	e000ed04 	.word	0xe000ed04
 8000d54:	200010f8 	.word	0x200010f8

08000d58 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000d5e:	482a      	ldr	r0, [pc, #168]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000d60:	f7ff fcde 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d026      	beq.n	8000db8 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000d6a:	e014      	b.n	8000d96 <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <USART_1_IRQHandler+0xb4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f107 020c 	add.w	r2, r7, #12
 8000d74:	f107 010b 	add.w	r1, r7, #11
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 faa1 	bl	80072c0 <xQueueReceiveFromISR>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 8000d84:	4820      	ldr	r0, [pc, #128]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000d86:	f7ff fcfe 	bl	8000786 <LL_USART_DisableIT_TXE>
 8000d8a:	e00a      	b.n	8000da2 <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481d      	ldr	r0, [pc, #116]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000d92:	f7ff fd16 	bl	80007c2 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000d96:	481c      	ldr	r0, [pc, #112]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000d98:	f7ff fcc2 	bl	8000720 <LL_USART_IsActiveFlag_TXE>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1e4      	bne.n	8000d6c <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <USART_1_IRQHandler+0x60>
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <USART_1_IRQHandler+0xb8>)
 8000daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000dba:	f7ff fc9e 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d01d      	beq.n	8000e00 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000dc4:	e00b      	b.n	8000dde <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000dc8:	f7ff fced 	bl	80007a6 <LL_USART_ReceiveData8>
 8000dcc:	4603      	mov	r3, r0
        	uint8_t byte =
 8000dce:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <USART_1_IRQHandler+0xbc>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	1d3a      	adds	r2, r7, #4
 8000dd6:	1cf9      	adds	r1, r7, #3
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f006 f8f5 	bl	8006fc8 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <USART_1_IRQHandler+0xb0>)
 8000de0:	f7ff fc8b 	bl	80006fa <LL_USART_IsActiveFlag_RXNE>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1ed      	bne.n	8000dc6 <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d007      	beq.n	8000e00 <USART_1_IRQHandler+0xa8>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <USART_1_IRQHandler+0xb8>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
    }
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	200010fc 	.word	0x200010fc
 8000e10:	e000ed04 	.word	0xe000ed04
 8000e14:	20001008 	.word	0x20001008

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fcec 	bl	80017fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f85d 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fa57 	bl	80012d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e2a:	f000 f955 	bl	80010d8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000e2e:	f000 fa2d 	bl	800128c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e32:	f000 f921 	bl	8001078 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e36:	f000 f8a9 	bl	8000f8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f005 ffad 	bl	8006d9a <xQueueCreateMutex>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <main+0xa0>)
 8000e44:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 8000e46:	2001      	movs	r0, #1
 8000e48:	f005 ffa7 	bl	8006d9a <xQueueCreateMutex>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <main+0xa4>)
 8000e50:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <main+0xa8>)
 8000e54:	1d3c      	adds	r4, r7, #4
 8000e56:	461d      	mov	r5, r3
 8000e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fda6 	bl	80069ba <osThreadCreate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <main+0xac>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 8000e74:	2300      	movs	r3, #0
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	4911      	ldr	r1, [pc, #68]	; (8000ec8 <main+0xb0>)
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <main+0xb4>)
 8000e84:	f006 fc09 	bl	800769a <xTaskCreate>
 			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
 			  NULL,       /* parametro para a task */
 			  1,          /* nivel de prioridade */
 			  NULL);      /* ponteiro para o handle da task */

  xTaskCreate(voltage_scanner,    /* Nome da funcao que contem a task */
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <main+0xb8>)
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <main+0xbc>)
 8000e98:	f006 fbff 	bl	800769a <xTaskCreate>
 			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
 			  NULL,       /* parametro para a task */
 			  1,          /* nivel de prioridade */
 			  NULL);      /* ponteiro para o handle da task */

  xTaskCreate(usart_1_fcn,    /* Nome da funcao que contem a task */
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	490b      	ldr	r1, [pc, #44]	; (8000ed8 <main+0xc0>)
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <main+0xc4>)
 8000eac:	f006 fbf5 	bl	800769a <xTaskCreate>
			  NULL);      /* ponteiro para o handle da task */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000eb0:	f005 fd7c 	bl	80069ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <main+0x9c>
 8000eb6:	bf00      	nop
 8000eb8:	200002e4 	.word	0x200002e4
 8000ebc:	200002e8 	.word	0x200002e8
 8000ec0:	0800951c 	.word	0x0800951c
 8000ec4:	20001004 	.word	0x20001004
 8000ec8:	080094fc 	.word	0x080094fc
 8000ecc:	08000c35 	.word	0x08000c35
 8000ed0:	08009500 	.word	0x08009500
 8000ed4:	08000bdd 	.word	0x08000bdd
 8000ed8:	08009510 	.word	0x08009510
 8000edc:	08000c75 	.word	0x08000c75

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2244      	movs	r2, #68	; 0x44
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 feb4 	bl	8008c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f06:	f002 f9f5 	bl	80032f4 <HAL_PWREx_ControlVoltageScaling>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f10:	f000 fa56 	bl	80013c0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f14:	f002 f9d0 	bl	80032b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <SystemClock_Config+0xa8>)
 8000f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <SystemClock_Config+0xa8>)
 8000f20:	f023 0318 	bic.w	r3, r3, #24
 8000f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f28:	2314      	movs	r3, #20
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f38:	2360      	movs	r3, #96	; 0x60
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fa2b 	bl	80033a0 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f50:	f000 fa36 	bl	80013c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fdfd 	bl	8003b6c <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f78:	f000 fa22 	bl	80013c0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f7c:	f003 fb18 	bl	80045b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f80:	bf00      	nop
 8000f82:	3758      	adds	r7, #88	; 0x58
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_ADC1_Init+0xe0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_ADC1_Init+0xe0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_ADC1_Init+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_ADC1_Init+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_ADC1_Init+0xe0>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <MX_ADC1_Init+0xe0>)
 8001010:	f000 fe10 	bl	8001c34 <HAL_ADC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800101a:	f000 f9d1 	bl	80013c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <MX_ADC1_Init+0xe0>)
 800102a:	f001 fd71 	bl	8002b10 <HAL_ADCEx_MultiModeConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001034:	f000 f9c4 	bl	80013c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_ADC1_Init+0xe8>)
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2306      	movs	r3, #6
 800103e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001044:	237f      	movs	r3, #127	; 0x7f
 8001046:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001048:	2304      	movs	r3, #4
 800104a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_ADC1_Init+0xe0>)
 8001056:	f001 f8e3 	bl	8002220 <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001060:	f000 f9ae 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000100c 	.word	0x2000100c
 8001070:	50040000 	.word	0x50040000
 8001074:	14f00020 	.word	0x14f00020

08001078 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_USART1_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART1_UART_Init+0x58>)
 80010bc:	f003 ff2c 	bl	8004f18 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f97b 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20001070 	.word	0x20001070
 80010d4:	40013800 	.word	0x40013800

080010d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0b0      	sub	sp, #192	; 0xc0
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	tx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 80010de:	2200      	movs	r2, #0
 80010e0:	2101      	movs	r1, #1
 80010e2:	200a      	movs	r0, #10
 80010e4:	f005 fde6 	bl	8006cb4 <xQueueGenericCreate>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a62      	ldr	r2, [pc, #392]	; (8001274 <MX_USART2_UART_Init+0x19c>)
 80010ec:	6013      	str	r3, [r2, #0]
	rx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 80010ee:	2200      	movs	r2, #0
 80010f0:	2101      	movs	r1, #1
 80010f2:	200a      	movs	r0, #10
 80010f4:	f005 fdde 	bl	8006cb4 <xQueueGenericCreate>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a5f      	ldr	r2, [pc, #380]	; (8001278 <MX_USART2_UART_Init+0x1a0>)
 80010fc:	6013      	str	r3, [r2, #0]
	LL_USART_EnableIT_RXNE(USART2);
 80010fe:	485f      	ldr	r0, [pc, #380]	; (800127c <MX_USART2_UART_Init+0x1a4>)
 8001100:	f7ff fb21 	bl	8000746 <LL_USART_EnableIT_RXNE>


  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001104:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2288      	movs	r2, #136	; 0x88
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f007 fd93 	bl	8008c5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001136:	2302      	movs	r3, #2
 8001138:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800113a:	2300      	movs	r3, #0
 800113c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f002 ff4b 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 800114c:	f000 f938 	bl	80013c0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001150:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001154:	f7ff fb5e 	bl	8000814 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fb43 	bl	80007e4 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800115e:	230c      	movs	r3, #12
 8001160:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800117c:	2307      	movs	r3, #7
 800117e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f004 fed8 	bl	8005f40 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001190:	2202      	movs	r2, #2
 8001192:	2105      	movs	r1, #5
 8001194:	483a      	ldr	r0, [pc, #232]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 8001196:	f7ff fc61 	bl	8000a5c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800119a:	2200      	movs	r2, #0
 800119c:	2105      	movs	r1, #5
 800119e:	4838      	ldr	r0, [pc, #224]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011a0:	f7ff fb50 	bl	8000844 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2105      	movs	r1, #5
 80011a8:	4835      	ldr	r0, [pc, #212]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011aa:	f7ff fc31 	bl	8000a10 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80011ae:	2220      	movs	r2, #32
 80011b0:	2105      	movs	r1, #5
 80011b2:	4833      	ldr	r0, [pc, #204]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011b4:	f7ff fb6e 	bl	8000894 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2105      	movs	r1, #5
 80011bc:	4830      	ldr	r0, [pc, #192]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011be:	f7ff fb8f 	bl	80008e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	2105      	movs	r1, #5
 80011c6:	482e      	ldr	r0, [pc, #184]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011c8:	f7ff fbb0 	bl	800092c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2105      	movs	r1, #5
 80011d0:	482b      	ldr	r0, [pc, #172]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011d2:	f7ff fbd1 	bl	8000978 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	4829      	ldr	r0, [pc, #164]	; (8001280 <MX_USART2_UART_Init+0x1a8>)
 80011dc:	f7ff fbf2 	bl	80009c4 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80011e0:	f7ff f9dc 	bl	800059c <__NVIC_GetPriorityGrouping>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2200      	movs	r2, #0
 80011e8:	2105      	movs	r1, #5
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fa2c 	bl	8000648 <NVIC_EncodePriority>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4619      	mov	r1, r3
 80011f4:	2026      	movs	r0, #38	; 0x26
 80011f6:	f7ff f9fd 	bl	80005f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80011fa:	2026      	movs	r0, #38	; 0x26
 80011fc:	f7ff f9dc 	bl	80005b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001200:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800121a:	230c      	movs	r3, #12
 800121c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 800122c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001230:	4619      	mov	r1, r3
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <MX_USART2_UART_Init+0x1a4>)
 8001234:	f005 fb26 	bl	8006884 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <MX_USART2_UART_Init+0x1a4>)
 800123a:	f7ff fa48 	bl	80006ce <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <MX_USART2_UART_Init+0x1a4>)
 8001240:	f7ff fa35 	bl	80006ae <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8001244:	2200      	movs	r2, #0
 8001246:	2101      	movs	r1, #1
 8001248:	2080      	movs	r0, #128	; 0x80
 800124a:	f005 fd33 	bl	8006cb4 <xQueueGenericCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x1ac>)
 8001252:	6013      	str	r3, [r2, #0]
  rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	2005      	movs	r0, #5
 800125a:	f005 fd2b 	bl	8006cb4 <xQueueGenericCreate>
 800125e:	4603      	mov	r3, r0
 8001260:	4a09      	ldr	r2, [pc, #36]	; (8001288 <MX_USART2_UART_Init+0x1b0>)
 8001262:	6013      	str	r3, [r2, #0]

  LL_USART_EnableIT_RXNE(USART2);
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART2_UART_Init+0x1a4>)
 8001266:	f7ff fa6e 	bl	8000746 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	37c0      	adds	r7, #192	; 0xc0
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200010fc 	.word	0x200010fc
 8001278:	20001008 	.word	0x20001008
 800127c:	40004400 	.word	0x40004400
 8001280:	40020000 	.word	0x40020000
 8001284:	200010f4 	.word	0x200010f4
 8001288:	200010f8 	.word	0x200010f8

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_DMA_Init+0x48>)
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <MX_DMA_Init+0x48>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6493      	str	r3, [r2, #72]	; 0x48
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_DMA_Init+0x48>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80012aa:	f7ff f977 	bl	800059c <__NVIC_GetPriorityGrouping>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2200      	movs	r2, #0
 80012b2:	2105      	movs	r1, #5
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f9c7 	bl	8000648 <NVIC_EncodePriority>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	2010      	movs	r0, #16
 80012c0:	f7ff f998 	bl	80005f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012c4:	2010      	movs	r0, #16
 80012c6:	f7ff f977 	bl	80005b8 <__NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_GPIO_Init+0xac>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <MX_GPIO_Init+0xac>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_GPIO_Init+0xac>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_GPIO_Init+0xac>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_GPIO_Init+0xac>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_GPIO_Init+0xac>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_GPIO_Init+0xac>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_GPIO_Init+0xac>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_GPIO_Init+0xac>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2120      	movs	r1, #32
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f001 ffa3 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_GPIO_Init+0xb0>)
 8001358:	f001 fdec 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800135c:	2320      	movs	r3, #32
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f001 fddd 	bl	8002f34 <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	48000800 	.word	0x48000800

0800138c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f005 fb5c 	bl	8006a52 <osDelay>
 800139a:	e7fb      	b.n	8001394 <StartDefaultTask+0x8>

0800139c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ae:	f000 fa3d 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40012c00 	.word	0x40012c00

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_MspInit+0x4c>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6613      	str	r3, [r2, #96]	; 0x60
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_MspInit+0x4c>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_MspInit+0x4c>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6593      	str	r3, [r2, #88]	; 0x58
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	210f      	movs	r1, #15
 8001406:	f06f 0001 	mvn.w	r0, #1
 800140a:	f001 fce9 	bl	8002de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0ac      	sub	sp, #176	; 0xb0
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2288      	movs	r2, #136	; 0x88
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f007 fc0d 	bl	8008c5c <memset>
  if(hadc->Instance==ADC1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_ADC_MspInit+0xc8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d147      	bne.n	80014dc <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800144c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001450:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001452:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001462:	2308      	movs	r3, #8
 8001464:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001466:	2307      	movs	r3, #7
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fdad 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001488:	f7ff ff9a 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_ADC_MspInit+0xcc>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_ADC_MspInit+0xcc>)
 8001492:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_ADC_MspInit+0xcc>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_ADC_MspInit+0xcc>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_ADC_MspInit+0xcc>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_ADC_MspInit+0xcc>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014c2:	230b      	movs	r3, #11
 80014c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f001 fd2c 	bl	8002f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	37b0      	adds	r7, #176	; 0xb0
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	50040000 	.word	0x50040000
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ac      	sub	sp, #176	; 0xb0
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2288      	movs	r2, #136	; 0x88
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f007 fba5 	bl	8008c5c <memset>
  if(huart->Instance==USART1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <HAL_UART_MspInit+0xc4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d144      	bne.n	80015a6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001520:	2300      	movs	r3, #0
 8001522:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fd57 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff ff44 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 800153a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 800153e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001542:	6613      	str	r3, [r2, #96]	; 0x60
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001568:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800156c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001582:	2307      	movs	r3, #7
 8001584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f001 fccf 	bl	8002f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	2025      	movs	r0, #37	; 0x25
 800159c:	f001 fc20 	bl	8002de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015a0:	2025      	movs	r0, #37	; 0x25
 80015a2:	f001 fc39 	bl	8002e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	37b0      	adds	r7, #176	; 0xb0
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2019      	movs	r0, #25
 80015ce:	f001 fc07 	bl	8002de0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015d2:	2019      	movs	r0, #25
 80015d4:	f001 fc20 	bl	8002e18 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_InitTick+0x9c>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_InitTick+0x9c>)
 80015de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e2:	6613      	str	r3, [r2, #96]	; 0x60
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_InitTick+0x9c>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	f107 0210 	add.w	r2, r7, #16
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fc5c 	bl	8003eb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001600:	f002 fc44 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8001604:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_InitTick+0xa0>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_InitTick+0xa4>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_InitTick+0xa8>)
 8001618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_InitTick+0xa4>)
 800161c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_InitTick+0xa4>)
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_InitTick+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_InitTick+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_InitTick+0xa4>)
 8001636:	f003 f99d 	bl	8004974 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <HAL_InitTick+0xa4>)
 8001642:	f003 f9f9 	bl	8004a38 <HAL_TIM_Base_Start_IT>
 8001646:	4603      	mov	r3, r0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	431bde83 	.word	0x431bde83
 800165c:	20001100 	.word	0x20001100
 8001660:	40012c00 	.word	0x40012c00

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016a6:	f003 fa37 	bl	8004b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20001100 	.word	0x20001100

080016b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 80016b8:	f7ff fb4e 	bl	8000d58 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USART1_IRQHandler+0x14>)
 80016be:	f003 fc79 	bl	8004fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20001070 	.word	0x20001070

080016cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 80016d0:	f7ff fae2 	bl	8000c98 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f007 fa70 	bl	8008bec <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20018000 	.word	0x20018000
 8001738:	00000400 	.word	0x00000400
 800173c:	200002ec 	.word	0x200002ec
 8001740:	20001160 	.word	0x20001160

08001744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <SystemInit+0x5c>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <SystemInit+0x5c>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <SystemInit+0x60>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <SystemInit+0x60>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <SystemInit+0x60>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <SystemInit+0x60>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <SystemInit+0x60>)
 8001770:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001774:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001778:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <SystemInit+0x60>)
 800177c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001780:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <SystemInit+0x60>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <SystemInit+0x60>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SystemInit+0x60>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	40021000 	.word	0x40021000

080017a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ac:	f7ff ffca 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017b2:	e003      	b.n	80017bc <LoopCopyDataInit>

080017b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ba:	3104      	adds	r1, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80017c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017c4:	d3f6      	bcc.n	80017b4 <CopyDataInit>
	ldr	r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017c8:	e002      	b.n	80017d0 <LoopFillZerobss>

080017ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017cc:	f842 3b04 	str.w	r3, [r2], #4

080017d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <LoopForever+0x16>)
	cmp	r2, r3
 80017d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017d4:	d3f9      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d6:	f007 fa0f 	bl	8008bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017da:	f7ff fb1d 	bl	8000e18 <main>

080017de <LoopForever>:

LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017e4:	080095d4 	.word	0x080095d4
	ldr	r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017ec:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80017f0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80017f4:	20001160 	.word	0x20001160

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>

080017fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f001 fae0 	bl	8002dca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	200f      	movs	r0, #15
 800180c:	f7ff fed4 	bl	80015b8 <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	e001      	b.n	8001820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181c:	f7ff fdd6 	bl	80013cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001820:	79fb      	ldrb	r3, [r7, #7]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	2000114c 	.word	0x2000114c

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	2000114c 	.word	0x2000114c

0800186c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3360      	adds	r3, #96	; 0x60
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <LL_ADC_SetOffset+0x44>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	4313      	orrs	r3, r2
 8001904:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	03fff000 	.word	0x03fff000

0800191c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3360      	adds	r3, #96	; 0x60
 800192a:	461a      	mov	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3360      	adds	r3, #96	; 0x60
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001972:	bf00      	nop
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3330      	adds	r3, #48	; 0x30
 80019b4:	461a      	mov	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	4413      	add	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	211f      	movs	r1, #31
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0e9b      	lsrs	r3, r3, #26
 80019dc:	f003 011f 	and.w	r1, r3, #31
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3314      	adds	r3, #20
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0e5b      	lsrs	r3, r3, #25
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	0d1b      	lsrs	r3, r3, #20
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2107      	movs	r1, #7
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0d1b      	lsrs	r3, r3, #20
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0318 	and.w	r3, r3, #24
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	0007ffff 	.word	0x0007ffff

08001a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_IsEnabled+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_IsEnabled+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd2:	f043 0204 	orr.w	r2, r3, #4
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d101      	bne.n	8001c24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e136      	b.n	8001ebc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fbdd 	bl	800141c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff3f 	bl	8001af8 <LL_ADC_IsDeepPowerDownEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff25 	bl	8001ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff5a 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff3e 	bl	8001b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_ADC_Init+0x290>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	4a87      	ldr	r2, [pc, #540]	; (8001ec8 <HAL_ADC_Init+0x294>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f9      	bne.n	8001cba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff3c 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff75 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8001cfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80cf 	bne.w	8001eaa <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 80cb 	bne.w	8001eaa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d1c:	f043 0202 	orr.w	r2, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff35 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d115      	bne.n	8001d60 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d34:	4865      	ldr	r0, [pc, #404]	; (8001ecc <HAL_ADC_Init+0x298>)
 8001d36:	f7ff ff2f 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4864      	ldr	r0, [pc, #400]	; (8001ed0 <HAL_ADC_Init+0x29c>)
 8001d3e:	f7ff ff2b 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	431c      	orrs	r4, r3
 8001d46:	4863      	ldr	r0, [pc, #396]	; (8001ed4 <HAL_ADC_Init+0x2a0>)
 8001d48:	f7ff ff26 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4323      	orrs	r3, r4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	485f      	ldr	r0, [pc, #380]	; (8001ed8 <HAL_ADC_Init+0x2a4>)
 8001d5c:	f7ff fd86 	bl	800186c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e5b      	ldrb	r3, [r3, #25]
 8001d64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	3b01      	subs	r3, #1
 8001d94:	045b      	lsls	r3, r3, #17
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_ADC_Init+0x2a8>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff08 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff15 	bl	8001c0c <LL_ADC_INJ_IsConversionOngoing>
 8001de2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d13d      	bne.n	8001e66 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d13a      	bne.n	8001e66 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001df4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e0c:	f023 0302 	bic.w	r3, r3, #2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	430b      	orrs	r3, r1
 8001e18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d118      	bne.n	8001e56 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e46:	430a      	orrs	r2, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	611a      	str	r2, [r3, #16]
 8001e54:	e007      	b.n	8001e66 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10c      	bne.n	8001e88 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	f023 010f 	bic.w	r1, r3, #15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
 8001e86:	e007      	b.n	8001e98 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 020f 	bic.w	r2, r2, #15
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f023 0303 	bic.w	r3, r3, #3
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea8:	e007      	b.n	8001eba <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3724      	adds	r7, #36	; 0x24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	053e2d63 	.word	0x053e2d63
 8001ecc:	50040000 	.word	0x50040000
 8001ed0:	50040100 	.word	0x50040100
 8001ed4:	50040200 	.word	0x50040200
 8001ed8:	50040300 	.word	0x50040300
 8001edc:	fff0c007 	.word	0xfff0c007

08001ee0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee8:	4857      	ldr	r0, [pc, #348]	; (8002048 <HAL_ADC_Start+0x168>)
 8001eea:	f7ff fdd7 	bl	8001a9c <LL_ADC_GetMultimode>
 8001eee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fe76 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 809c 	bne.w	800203a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_Start+0x30>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e097      	b.n	8002040 <HAL_ADC_Start+0x160>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fd71 	bl	8002a00 <ADC_Enable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 8083 	bne.w	8002030 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_ADC_Start+0x16c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d002      	beq.n	8001f4e <HAL_ADC_Start+0x6e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e000      	b.n	8001f50 <HAL_ADC_Start+0x70>
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <HAL_ADC_Start+0x170>)
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d002      	beq.n	8001f5e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f76:	d106      	bne.n	8001f86 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	f023 0206 	bic.w	r2, r3, #6
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58
 8001f84:	e002      	b.n	8001f8c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	221c      	movs	r2, #28
 8001f92:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_ADC_Start+0x16c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d002      	beq.n	8001fac <HAL_ADC_Start+0xcc>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e000      	b.n	8001fae <HAL_ADC_Start+0xce>
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_ADC_Start+0x170>)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d008      	beq.n	8001fc8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d002      	beq.n	8001fc8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	d114      	bne.n	8001ff2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fde7 	bl	8001bbe <LL_ADC_REG_StartConversion>
 8001ff0:	e025      	b.n	800203e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_ADC_Start+0x16c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d002      	beq.n	800200e <HAL_ADC_Start+0x12e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	e000      	b.n	8002010 <HAL_ADC_Start+0x130>
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_ADC_Start+0x170>)
 8002010:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00f      	beq.n	800203e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002026:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
 800202e:	e006      	b.n	800203e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002038:	e001      	b.n	800203e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	50040300 	.word	0x50040300
 800204c:	50040100 	.word	0x50040100
 8002050:	50040000 	.word	0x50040000

08002054 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800205e:	4866      	ldr	r0, [pc, #408]	; (80021f8 <HAL_ADC_PollForConversion+0x1a4>)
 8002060:	f7ff fd1c 	bl	8001a9c <LL_ADC_GetMultimode>
 8002064:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b08      	cmp	r3, #8
 800206c:	d102      	bne.n	8002074 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800206e:	2308      	movs	r3, #8
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e02a      	b.n	80020ca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d002      	beq.n	8002086 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d111      	bne.n	80020aa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0a4      	b.n	80021ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020a4:	2304      	movs	r3, #4
 80020a6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020a8:	e00f      	b.n	80020ca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020aa:	4853      	ldr	r0, [pc, #332]	; (80021f8 <HAL_ADC_PollForConversion+0x1a4>)
 80020ac:	f7ff fd04 	bl	8001ab8 <LL_ADC_GetMultiDMATransfer>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e093      	b.n	80021ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020c6:	2304      	movs	r3, #4
 80020c8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020ca:	f7ff fbc3 	bl	8001854 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020d0:	e021      	b.n	8002116 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d01d      	beq.n	8002116 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020da:	f7ff fbbb 	bl	8001854 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <HAL_ADC_PollForConversion+0x9c>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d112      	bne.n	8002116 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e06b      	b.n	80021ee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0d6      	beq.n	80020d2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fc22 	bl	800197e <LL_ADC_REG_IsTriggerSourceSWStart>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01c      	beq.n	800217a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e5b      	ldrb	r3, [r3, #25]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d118      	bne.n	800217a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d111      	bne.n	800217a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_ADC_PollForConversion+0x1a8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d002      	beq.n	800218a <HAL_ADC_PollForConversion+0x136>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	e000      	b.n	800218c <HAL_ADC_PollForConversion+0x138>
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_ADC_PollForConversion+0x1ac>)
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4293      	cmp	r3, r2
 8002192:	d008      	beq.n	80021a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d002      	beq.n	80021a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b09      	cmp	r3, #9
 80021a4:	d104      	bne.n	80021b0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e00c      	b.n	80021ca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_ADC_PollForConversion+0x1a8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d002      	beq.n	80021c0 <HAL_ADC_PollForConversion+0x16c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e000      	b.n	80021c2 <HAL_ADC_PollForConversion+0x16e>
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_ADC_PollForConversion+0x1ac>)
 80021c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d104      	bne.n	80021da <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2208      	movs	r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e008      	b.n	80021ec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	220c      	movs	r2, #12
 80021ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	50040300 	.word	0x50040300
 80021fc:	50040100 	.word	0x50040100
 8002200:	50040000 	.word	0x50040000

08002204 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0b6      	sub	sp, #216	; 0xd8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x22>
 800223e:	2302      	movs	r3, #2
 8002240:	e3c7      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7b2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fcc9 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 83a8 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d824      	bhi.n	80022ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	3b02      	subs	r3, #2
 800226a:	2b03      	cmp	r3, #3
 800226c:	d81b      	bhi.n	80022a6 <HAL_ADC_ConfigChannel+0x86>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_ADC_ConfigChannel+0x54>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002285 	.word	0x08002285
 8002278:	0800228d 	.word	0x0800228d
 800227c:	08002295 	.word	0x08002295
 8002280:	0800229d 	.word	0x0800229d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	220c      	movs	r2, #12
 8002288:	605a      	str	r2, [r3, #4]
          break;
 800228a:	e011      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2212      	movs	r2, #18
 8002290:	605a      	str	r2, [r3, #4]
          break;
 8002292:	e00d      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2218      	movs	r2, #24
 8002298:	605a      	str	r2, [r3, #4]
          break;
 800229a:	e009      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a2:	605a      	str	r2, [r3, #4]
          break;
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2206      	movs	r2, #6
 80022aa:	605a      	str	r2, [r3, #4]
          break;
 80022ac:	e000      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022ae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	f7ff fb71 	bl	80019a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fc8d 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 80022cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fc99 	bl	8001c0c <LL_ADC_INJ_IsConversionOngoing>
 80022da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 81a6 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 81a1 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7ff fb7c 	bl	80019fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00a      	beq.n	800233c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6919      	ldr	r1, [r3, #16]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002336:	f7ff facd 	bl	80018d4 <LL_ADC_SetOffset>
 800233a:	e17b      	b.n	8002634 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff faea 	bl	800191c <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x148>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fadf 	bl	800191c <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	e01e      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x186>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fad4 	bl	800191c <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800238a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800238e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e004      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 800239a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_ConfigChannel+0x19e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	e018      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e004      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80023e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff faa3 	bl	8001948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fa87 	bl	800191c <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_ADC_ConfigChannel+0x20e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fa7c 	bl	800191c <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	e01e      	b.n	800246c <HAL_ADC_ConfigChannel+0x24c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fa71 	bl	800191c <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800244c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e004      	b.n	800246a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x264>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	e018      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x296>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002498:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800249c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e004      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80024ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d106      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	2101      	movs	r1, #1
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fa40 	bl	8001948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fa24 	bl	800191c <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x2d4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fa19 	bl	800191c <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	f003 021f 	and.w	r2, r3, #31
 80024f2:	e01e      	b.n	8002532 <HAL_ADC_ConfigChannel+0x312>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fa0e 	bl	800191c <LL_ADC_GetOffsetChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800251a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e004      	b.n	8002530 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <HAL_ADC_ConfigChannel+0x32a>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	e016      	b.n	8002578 <HAL_ADC_ConfigChannel+0x358>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800255c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800255e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800256e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f9df 	bl	8001948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2103      	movs	r1, #3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f9c3 	bl	800191c <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x396>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2103      	movs	r1, #3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f9b8 	bl	800191c <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e017      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x3c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2103      	movs	r1, #3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f9ad 	bl	800191c <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80025dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x3de>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e011      	b.n	8002622 <HAL_ADC_ConfigChannel+0x402>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800260c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800260e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002622:	429a      	cmp	r2, r3
 8002624:	d106      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	2103      	movs	r1, #3
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f98a 	bl	8001948 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff faad 	bl	8001b98 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 813f 	bne.w	80028c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff f9fe 	bl	8001a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a8e      	ldr	r2, [pc, #568]	; (8002898 <HAL_ADC_ConfigChannel+0x678>)
 800265e:	4293      	cmp	r3, r2
 8002660:	f040 8130 	bne.w	80028c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_ADC_ConfigChannel+0x46c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2b09      	cmp	r3, #9
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e019      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x4a0>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800269a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e003      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80026a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	bf94      	ite	ls
 80026ba:	2301      	movls	r3, #1
 80026bc:	2300      	movhi	r3, #0
 80026be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d079      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x4c0>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	069b      	lsls	r3, r3, #26
 80026da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026de:	e015      	b.n	800270c <HAL_ADC_ConfigChannel+0x4ec>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_ADC_ConfigChannel+0x50c>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	e017      	b.n	800275c <HAL_ADC_ConfigChannel+0x53c>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800273e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	ea42 0103 	orr.w	r1, r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x562>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	e018      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x594>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800279e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
 80027b6:	e080      	b.n	80028ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x5b4>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	3301      	adds	r3, #1
 80027cc:	069b      	lsls	r3, r3, #26
 80027ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d2:	e015      	b.n	8002800 <HAL_ADC_ConfigChannel+0x5e0>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e003      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x600>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	3301      	adds	r3, #1
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	e017      	b.n	8002850 <HAL_ADC_ConfigChannel+0x630>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	61fb      	str	r3, [r7, #28]
  return result;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	ea42 0103 	orr.w	r1, r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_ADC_ConfigChannel+0x65c>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	3b1e      	subs	r3, #30
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800287a:	e01d      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x698>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	613b      	str	r3, [r7, #16]
  return result;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e005      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x684>
 8002898:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f003 021f 	and.w	r2, r3, #31
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	3b1e      	subs	r3, #30
 80028b2:	051b      	lsls	r3, r3, #20
 80028b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b8:	430b      	orrs	r3, r1
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	6892      	ldr	r2, [r2, #8]
 80028be:	4619      	mov	r1, r3
 80028c0:	f7ff f89c 	bl	80019fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_ADC_ConfigChannel+0x7bc>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d07a      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d0:	4843      	ldr	r0, [pc, #268]	; (80029e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80028d2:	f7fe fff1 	bl	80018b8 <LL_ADC_GetCommonPathInternalCh>
 80028d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a41      	ldr	r2, [pc, #260]	; (80029e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d12c      	bne.n	800293e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d126      	bne.n	800293e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x6e4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <HAL_ADC_ConfigChannel+0x7cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d15d      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800290c:	4619      	mov	r1, r3
 800290e:	4834      	ldr	r0, [pc, #208]	; (80029e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002910:	f7fe ffbf 	bl	8001892 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	4a36      	ldr	r2, [pc, #216]	; (80029f4 <HAL_ADC_ConfigChannel+0x7d4>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800292e:	e002      	b.n	8002936 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3b01      	subs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f9      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800293c:	e040      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d118      	bne.n	800297a <HAL_ADC_ConfigChannel+0x75a>
 8002948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d112      	bne.n	800297a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_ADC_ConfigChannel+0x7c8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x748>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_ADC_ConfigChannel+0x7cc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d12d      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002970:	4619      	mov	r1, r3
 8002972:	481b      	ldr	r0, [pc, #108]	; (80029e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002974:	f7fe ff8d 	bl	8001892 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002978:	e024      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_ADC_ConfigChannel+0x7dc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d120      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11a      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d115      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a2:	4619      	mov	r1, r3
 80029a4:	480e      	ldr	r0, [pc, #56]	; (80029e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80029a6:	f7fe ff74 	bl	8001892 <LL_ADC_SetCommonPathInternalCh>
 80029aa:	e00c      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80029be:	e002      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c0:	bf00      	nop
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	37d8      	adds	r7, #216	; 0xd8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	80080000 	.word	0x80080000
 80029e0:	50040300 	.word	0x50040300
 80029e4:	c7520000 	.word	0xc7520000
 80029e8:	50040000 	.word	0x50040000
 80029ec:	50040200 	.word	0x50040200
 80029f0:	20000000 	.word	0x20000000
 80029f4:	053e2d63 	.word	0x053e2d63
 80029f8:	cb840000 	.word	0xcb840000
 80029fc:	80000001 	.word	0x80000001

08002a00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f8c3 	bl	8001b98 <LL_ADC_IsEnabled>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d14d      	bne.n	8002ab4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <ADC_Enable+0xc0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e039      	b.n	8002ab6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f892 	bl	8001b70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe ff02 	bl	8001854 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a52:	e028      	b.n	8002aa6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f89d 	bl	8001b98 <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f881 	bl	8001b70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a6e:	f7fe fef1 	bl	8001854 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d914      	bls.n	8002aa6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d00d      	beq.n	8002aa6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d1cf      	bne.n	8002a54 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	8000003f 	.word	0x8000003f

08002ac4 <LL_ADC_IsEnabled>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <LL_ADC_IsEnabled+0x18>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <LL_ADC_IsEnabled+0x1a>
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_REG_IsConversionOngoing>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d101      	bne.n	8002b02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b09f      	sub	sp, #124	; 0x7c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e093      	b.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b36:	2300      	movs	r3, #0
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a47      	ldr	r2, [pc, #284]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d102      	bne.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	e001      	b.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10b      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e072      	b.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffb9 	bl	8002aea <LL_ADC_REG_IsConversionOngoing>
 8002b78:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ffb3 	bl	8002aea <LL_ADC_REG_IsConversionOngoing>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d154      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d151      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b92:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bae:	035b      	lsls	r3, r3, #13
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb8:	4829      	ldr	r0, [pc, #164]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bba:	f7ff ff83 	bl	8002ac4 <LL_ADC_IsEnabled>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4828      	ldr	r0, [pc, #160]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bc2:	f7ff ff7f 	bl	8002ac4 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	431c      	orrs	r4, r3
 8002bca:	4828      	ldr	r0, [pc, #160]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bcc:	f7ff ff7a 	bl	8002ac4 <LL_ADC_IsEnabled>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4323      	orrs	r3, r4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d137      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002be0:	f023 030f 	bic.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6811      	ldr	r1, [r2, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf4:	e028      	b.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c02:	4817      	ldr	r0, [pc, #92]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c04:	f7ff ff5e 	bl	8002ac4 <LL_ADC_IsEnabled>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	4816      	ldr	r0, [pc, #88]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c0c:	f7ff ff5a 	bl	8002ac4 <LL_ADC_IsEnabled>
 8002c10:	4603      	mov	r3, r0
 8002c12:	431c      	orrs	r4, r3
 8002c14:	4815      	ldr	r0, [pc, #84]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c16:	f7ff ff55 	bl	8002ac4 <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d112      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c2a:	f023 030f 	bic.w	r3, r3, #15
 8002c2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c32:	e009      	b.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c46:	e000      	b.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	377c      	adds	r7, #124	; 0x7c
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	50040000 	.word	0x50040000
 8002c64:	50040100 	.word	0x50040100
 8002c68:	50040300 	.word	0x50040300
 8002c6c:	50040200 	.word	0x50040200

08002c70 <__NVIC_SetPriorityGrouping>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ff4c 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df2:	f7ff ff61 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002df6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f7ff ffb1 	bl	8002d64 <NVIC_EncodePriority>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff80 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e10:	bf00      	nop
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff54 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d008      	beq.n	8002e5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 020e 	bic.w	r2, r2, #14
 8002e6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f003 021c 	and.w	r2, r3, #28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d005      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	e029      	b.n	8002f28 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 020e 	bic.w	r2, r2, #14
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f003 021c 	and.w	r2, r3, #28
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f202 	lsl.w	r2, r1, r2
 8002f06:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
    }
  }
  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f42:	e17f      	b.n	8003244 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8171 	beq.w	800323e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d00b      	beq.n	8002f7c <HAL_GPIO_Init+0x48>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d007      	beq.n	8002f7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f70:	2b11      	cmp	r3, #17
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b12      	cmp	r3, #18
 8002f7a:	d130      	bne.n	8002fde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0201 	and.w	r2, r3, #1
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d118      	bne.n	800301c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f003 0201 	and.w	r2, r3, #1
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x128>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b12      	cmp	r3, #18
 800305a:	d123      	bne.n	80030a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	6939      	ldr	r1, [r7, #16]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80ac 	beq.w	800323e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_GPIO_Init+0x330>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	4a5e      	ldr	r2, [pc, #376]	; (8003264 <HAL_GPIO_Init+0x330>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6613      	str	r3, [r2, #96]	; 0x60
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <HAL_GPIO_Init+0x330>)
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030fe:	4a5a      	ldr	r2, [pc, #360]	; (8003268 <HAL_GPIO_Init+0x334>)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003128:	d025      	beq.n	8003176 <HAL_GPIO_Init+0x242>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4f      	ldr	r2, [pc, #316]	; (800326c <HAL_GPIO_Init+0x338>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_GPIO_Init+0x23e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <HAL_GPIO_Init+0x33c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x23a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4d      	ldr	r2, [pc, #308]	; (8003274 <HAL_GPIO_Init+0x340>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x236>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_GPIO_Init+0x344>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x232>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_GPIO_Init+0x348>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x22e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x34c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x22a>
 800315a:	2306      	movs	r3, #6
 800315c:	e00c      	b.n	8003178 <HAL_GPIO_Init+0x244>
 800315e:	2307      	movs	r3, #7
 8003160:	e00a      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003162:	2305      	movs	r3, #5
 8003164:	e008      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003166:	2304      	movs	r3, #4
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x244>
 800316a:	2303      	movs	r3, #3
 800316c:	e004      	b.n	8003178 <HAL_GPIO_Init+0x244>
 800316e:	2302      	movs	r3, #2
 8003170:	e002      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003176:	2300      	movs	r3, #0
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	f002 0203 	and.w	r2, r2, #3
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	4093      	lsls	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_GPIO_Init+0x334>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ba:	4a32      	ldr	r2, [pc, #200]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003238:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_GPIO_Init+0x350>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3301      	adds	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f ae78 	bne.w	8002f44 <HAL_GPIO_Init+0x10>
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40010000 	.word	0x40010000
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800
 8003274:	48000c00 	.word	0x48000c00
 8003278:	48001000 	.word	0x48001000
 800327c:	48001400 	.word	0x48001400
 8003280:	48001800 	.word	0x48001800
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a4:	e002      	b.n	80032ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40007000 	.word	0x40007000

080032d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000

080032f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003302:	d130      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800330c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003310:	d038      	beq.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2232      	movs	r2, #50	; 0x32
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003338:	e002      	b.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334c:	d102      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f2      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003360:	d110      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d007      	beq.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40007000 	.word	0x40007000
 8003398:	20000000 	.word	0x20000000
 800339c:	431bde83 	.word	0x431bde83

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e3d4      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4ba1      	ldr	r3, [pc, #644]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b9e      	ldr	r3, [pc, #632]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80e4 	beq.w	800359c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_RCC_OscConfig+0x4a>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	f040 808b 	bne.w	80034f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 8087 	bne.w	80034f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ea:	4b93      	ldr	r3, [pc, #588]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e3ac      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1a      	ldr	r2, [r3, #32]
 8003406:	4b8c      	ldr	r3, [pc, #560]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_RCC_OscConfig+0x7c>
 8003412:	4b89      	ldr	r3, [pc, #548]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341a:	e005      	b.n	8003428 <HAL_RCC_OscConfig+0x88>
 800341c:	4b86      	ldr	r3, [pc, #536]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003428:	4293      	cmp	r3, r2
 800342a:	d223      	bcs.n	8003474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fd73 	bl	8003f1c <RCC_SetFlashLatencyFromMSIRange>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e38d      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003440:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003446:	f043 0308 	orr.w	r3, r3, #8
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b7a      	ldr	r3, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4977      	ldr	r1, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	4972      	ldr	r1, [pc, #456]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
 8003472:	e025      	b.n	80034c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b70      	ldr	r3, [pc, #448]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6f      	ldr	r2, [pc, #444]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b6d      	ldr	r3, [pc, #436]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	496a      	ldr	r1, [pc, #424]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4b69      	ldr	r3, [pc, #420]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	4965      	ldr	r1, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fd33 	bl	8003f1c <RCC_SetFlashLatencyFromMSIRange>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e34d      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c0:	f000 fc36 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	495a      	ldr	r1, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x29c>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x2a0>)
 80034de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034e0:	4b58      	ldr	r3, [pc, #352]	; (8003644 <HAL_RCC_OscConfig+0x2a4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe f867 	bl	80015b8 <HAL_InitTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d052      	beq.n	800359a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	e331      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d032      	beq.n	8003566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003500:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350c:	f7fe f9a2 	bl	8001854 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003514:	f7fe f99e 	bl	8001854 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e31a      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003526:	4b44      	ldr	r3, [pc, #272]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	493b      	ldr	r1, [pc, #236]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4936      	ldr	r1, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	e01a      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a33      	ldr	r2, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003572:	f7fe f96f 	bl	8001854 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800357a:	f7fe f96b 	bl	8001854 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e2e7      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358c:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x1da>
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800359a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d074      	beq.n	8003692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x21a>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d10b      	bne.n	80035d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d064      	beq.n	8003690 <HAL_RCC_OscConfig+0x2f0>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d160      	bne.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e2c4      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x24a>
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e01d      	b.n	8003626 <HAL_RCC_OscConfig+0x286>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f2:	d10c      	bne.n	800360e <HAL_RCC_OscConfig+0x26e>
 80035f4:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 80035fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0x286>
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a06      	ldr	r2, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x298>)
 8003620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01c      	beq.n	8003668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe f911 	bl	8001854 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003634:	e011      	b.n	800365a <HAL_RCC_OscConfig+0x2ba>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	08009548 	.word	0x08009548
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe f904 	bl	8001854 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e280      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	4baf      	ldr	r3, [pc, #700]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x2a8>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe f8f4 	bl	8001854 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe f8f0 	bl	8001854 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e26c      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003682:	4ba5      	ldr	r3, [pc, #660]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x2d0>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d060      	beq.n	8003760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x310>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d119      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d116      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	4b99      	ldr	r3, [pc, #612]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_OscConfig+0x328>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e249      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b93      	ldr	r3, [pc, #588]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	4990      	ldr	r1, [pc, #576]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036dc:	e040      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d023      	beq.n	800372e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e6:	4b8c      	ldr	r3, [pc, #560]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a8b      	ldr	r2, [pc, #556]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe f8af 	bl	8001854 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe f8ab 	bl	8001854 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e227      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370c:	4b82      	ldr	r3, [pc, #520]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	497c      	ldr	r1, [pc, #496]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
 800372c:	e018      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a79      	ldr	r2, [pc, #484]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe f88b 	bl	8001854 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003742:	f7fe f887 	bl	8001854 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e203      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003754:	4b70      	ldr	r3, [pc, #448]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003774:	4b68      	ldr	r3, [pc, #416]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	4a67      	ldr	r2, [pc, #412]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe f866 	bl	8001854 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378c:	f7fe f862 	bl	8001854 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1de      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379e:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x3ec>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ae:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe f849 	bl	8001854 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe f845 	bl	8001854 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1c1      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80a6 	beq.w	8003940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037f8:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b44      	ldr	r3, [pc, #272]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a43      	ldr	r2, [pc, #268]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	4b3e      	ldr	r3, [pc, #248]	; (800391c <HAL_RCC_OscConfig+0x57c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d118      	bne.n	800385e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x57c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3a      	ldr	r2, [pc, #232]	; (800391c <HAL_RCC_OscConfig+0x57c>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003838:	f7fe f80c 	bl	8001854 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe f808 	bl	8001854 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e184      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_RCC_OscConfig+0x57c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_RCC_OscConfig+0x4d8>
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003876:	e024      	b.n	80038c2 <HAL_RCC_OscConfig+0x522>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d110      	bne.n	80038a2 <HAL_RCC_OscConfig+0x502>
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a20      	ldr	r2, [pc, #128]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a0:	e00f      	b.n	80038c2 <HAL_RCC_OscConfig+0x522>
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b2:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fd ffc3 	bl	8001854 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fd ffbf 	bl	8001854 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e139      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x578>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ed      	beq.n	80038d2 <HAL_RCC_OscConfig+0x532>
 80038f6:	e01a      	b.n	800392e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fd ffac 	bl	8001854 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fe:	e00f      	b.n	8003920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd ffa8 	bl	8001854 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d906      	bls.n	8003920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e122      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003920:	4b90      	ldr	r3, [pc, #576]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e8      	bne.n	8003900 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392e:	7ffb      	ldrb	r3, [r7, #31]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a8a      	ldr	r2, [pc, #552]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8108 	beq.w	8003b5a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	2b02      	cmp	r3, #2
 8003950:	f040 80d0 	bne.w	8003af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003954:	4b83      	ldr	r3, [pc, #524]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	429a      	cmp	r2, r3
 8003966:	d130      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	3b01      	subs	r3, #1
 8003974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d127      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d11f      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003994:	2a07      	cmp	r2, #7
 8003996:	bf14      	ite	ne
 8003998:	2201      	movne	r2, #1
 800399a:	2200      	moveq	r2, #0
 800399c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d06e      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d069      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b7      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039ec:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5c      	ldr	r2, [pc, #368]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f8:	f7fd ff2c 	bl	8001854 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd ff28 	bl	8001854 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0a4      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a12:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1e:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_RCC_OscConfig+0x7c8>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	4311      	orrs	r1, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a38:	0212      	lsls	r2, r2, #8
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a4c:	0852      	lsrs	r2, r2, #1
 8003a4e:	3a01      	subs	r2, #1
 8003a50:	0652      	lsls	r2, r2, #25
 8003a52:	4311      	orrs	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a58:	0912      	lsrs	r2, r2, #4
 8003a5a:	0452      	lsls	r2, r2, #17
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4941      	ldr	r1, [pc, #260]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3e      	ldr	r2, [pc, #248]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a7c:	f7fd feea 	bl	8001854 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fee6 	bl	8001854 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e062      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa2:	e05a      	b.n	8003b5a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e059      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d152      	bne.n	8003b5a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003acc:	f7fd fec2 	bl	8001854 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd febe 	bl	8001854 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e03a      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x734>
 8003af2:	e032      	b.n	8003b5a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d02d      	beq.n	8003b56 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b04:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b06:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b18:	f023 0303 	bic.w	r3, r3, #3
 8003b1c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fe91 	bl	8001854 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fe8d 	bl	8001854 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e009      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_OscConfig+0x7c4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x796>
 8003b54:	e001      	b.n	8003b5a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	f99d808c 	.word	0xf99d808c

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0c8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b66      	ldr	r3, [pc, #408]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d910      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 0207 	bic.w	r2, r3, #7
 8003b96:	4961      	ldr	r1, [pc, #388]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b0      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d04c      	beq.n	8003c56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc4:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d121      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e09e      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d115      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e092      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e086      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c04:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e07e      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 0203 	bic.w	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	493f      	ldr	r1, [pc, #252]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c26:	f7fd fe15 	bl	8001854 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2e:	f7fd fe11 	bl	8001854 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e066      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 020c 	and.w	r2, r3, #12
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d1eb      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	492c      	ldr	r1, [pc, #176]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d210      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	4924      	ldr	r1, [pc, #144]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCC_ClockConfig+0x1b0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e036      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4918      	ldr	r1, [pc, #96]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4910      	ldr	r1, [pc, #64]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ce2:	f000 f825 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_ClockConfig+0x1b4>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490c      	ldr	r1, [pc, #48]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fc56 	bl	80015b8 <HAL_InitTick>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d10:	7afb      	ldrb	r3, [r7, #11]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40022000 	.word	0x40022000
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08009548 	.word	0x08009548
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3e:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d48:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x34>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d121      	bne.n	8003da2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d11e      	bne.n	8003da2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d64:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d70:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e005      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d80:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10d      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d102      	bne.n	8003dae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003da8:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	e004      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003db6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d134      	bne.n	8003e28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d003      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0xac>
 8003dd4:	e005      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dd8:	617b      	str	r3, [r7, #20]
      break;
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dde:	617b      	str	r3, [r7, #20]
      break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	617b      	str	r3, [r7, #20]
      break;
 8003de6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	3301      	adds	r3, #1
 8003df4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	fb02 f203 	mul.w	r2, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	0e5b      	lsrs	r3, r3, #25
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e28:	69bb      	ldr	r3, [r7, #24]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3724      	adds	r7, #36	; 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	08009560 	.word	0x08009560
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200

08003e48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000000 	.word	0x20000000

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	08009558 	.word	0x08009558

08003e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e90:	f7ff ffda 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0adb      	lsrs	r3, r3, #11
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08009558 	.word	0x08009558

08003eb8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_GetClockConfig+0x5c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0203 	and.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	08db      	lsrs	r3, r3, #3
 8003ef2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <HAL_RCC_GetClockConfig+0x60>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0207 	and.w	r2, r3, #7
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40022000 	.word	0x40022000

08003f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f34:	f7ff f9d0 	bl	80032d8 <HAL_PWREx_GetVoltageRange>
 8003f38:	6178      	str	r0, [r7, #20]
 8003f3a:	e014      	b.n	8003f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6593      	str	r3, [r2, #88]	; 0x58
 8003f48:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f54:	f7ff f9c0 	bl	80032d8 <HAL_PWREx_GetVoltageRange>
 8003f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6c:	d10b      	bne.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d919      	bls.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2ba0      	cmp	r3, #160	; 0xa0
 8003f78:	d902      	bls.n	8003f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e013      	b.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f80:	2301      	movs	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	e010      	b.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d902      	bls.n	8003f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	e00a      	b.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b80      	cmp	r3, #128	; 0x80
 8003f96:	d102      	bne.n	8003f9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f98:	2302      	movs	r3, #2
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	e004      	b.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b70      	cmp	r3, #112	; 0x70
 8003fa2:	d101      	bne.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 0207 	bic.w	r2, r3, #7
 8003fb0:	4909      	ldr	r1, [pc, #36]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d001      	beq.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40022000 	.word	0x40022000

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d041      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004000:	d02a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004006:	d824      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800400c:	d008      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800400e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004012:	d81e      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401c:	d010      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401e:	e018      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004020:	4b86      	ldr	r3, [pc, #536]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a85      	ldr	r2, [pc, #532]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800402c:	e015      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 facb 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800403e:	e00c      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3320      	adds	r3, #32
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fbb6 	bl	80047b8 <RCCEx_PLLSAI2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004050:	e003      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	74fb      	strb	r3, [r7, #19]
      break;
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004060:	4b76      	ldr	r3, [pc, #472]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406e:	4973      	ldr	r1, [pc, #460]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d041      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800408c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004090:	d02a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004096:	d824      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800409e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a2:	d81e      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ac:	d010      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040ae:	e018      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a61      	ldr	r2, [pc, #388]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040bc:	e015      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fa83 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040ce:	e00c      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3320      	adds	r3, #32
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb6e 	bl	80047b8 <RCCEx_PLLSAI2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	74fb      	strb	r3, [r7, #19]
      break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040f0:	4b52      	ldr	r3, [pc, #328]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fe:	494f      	ldr	r1, [pc, #316]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004106:	e001      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a0 	beq.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	4a40      	ldr	r2, [pc, #256]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413e:	6593      	str	r3, [r2, #88]	; 0x58
 8004140:	4b3e      	ldr	r3, [pc, #248]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004150:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800415c:	f7fd fb7a 	bl	8001854 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004162:	e009      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004164:	f7fd fb76 	bl	8001854 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d902      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	74fb      	strb	r3, [r7, #19]
        break;
 8004176:	e005      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004178:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ef      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d15c      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01f      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d019      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a20      	ldr	r2, [pc, #128]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c4:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fd fb35 	bl	8001854 <HAL_GetTick>
 80041ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ec:	e00b      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fd fb31 	bl	8001854 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d902      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	74fb      	strb	r3, [r7, #19]
            break;
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ec      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004232:	e009      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
 8004238:	e006      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004248:	7c7b      	ldrb	r3, [r7, #17]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4b9e      	ldr	r3, [pc, #632]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4a9d      	ldr	r2, [pc, #628]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004266:	4b98      	ldr	r3, [pc, #608]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 0203 	bic.w	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	4994      	ldr	r1, [pc, #592]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004288:	4b8f      	ldr	r3, [pc, #572]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 020c 	bic.w	r2, r3, #12
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	498c      	ldr	r1, [pc, #560]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042aa:	4b87      	ldr	r3, [pc, #540]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	4983      	ldr	r1, [pc, #524]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042cc:	4b7e      	ldr	r3, [pc, #504]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	497b      	ldr	r1, [pc, #492]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042ee:	4b76      	ldr	r3, [pc, #472]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	4972      	ldr	r1, [pc, #456]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004310:	4b6d      	ldr	r3, [pc, #436]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	496a      	ldr	r1, [pc, #424]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004332:	4b65      	ldr	r3, [pc, #404]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	4961      	ldr	r1, [pc, #388]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004354:	4b5c      	ldr	r3, [pc, #368]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	4959      	ldr	r1, [pc, #356]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004376:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	4950      	ldr	r1, [pc, #320]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004398:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	4948      	ldr	r1, [pc, #288]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	493f      	ldr	r1, [pc, #252]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d028      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043dc:	4b3a      	ldr	r3, [pc, #232]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ea:	4937      	ldr	r1, [pc, #220]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fa:	d106      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004406:	60d3      	str	r3, [r2, #12]
 8004408:	e011      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004412:	d10c      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	2101      	movs	r1, #1
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f8d8 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d028      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800443a:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	491f      	ldr	r1, [pc, #124]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004458:	d106      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004464:	60d3      	str	r3, [r2, #12]
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004470:	d10c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	2101      	movs	r1, #1
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f8a9 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d02b      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a6:	4908      	ldr	r1, [pc, #32]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b6:	d109      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a02      	ldr	r2, [pc, #8]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c2:	60d3      	str	r3, [r2, #12]
 80044c4:	e014      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f877 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450a:	4928      	ldr	r1, [pc, #160]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451a:	d10d      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f854 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d014      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004532:	7cfb      	ldrb	r3, [r7, #19]
 8004534:	74bb      	strb	r3, [r7, #18]
 8004536:	e011      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800453c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004540:	d10c      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3320      	adds	r3, #32
 8004546:	2102      	movs	r1, #2
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f935 	bl	80047b8 <RCCEx_PLLSAI2_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004576:	490d      	ldr	r1, [pc, #52]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000

080045d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045de:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045ea:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0203 	and.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d10d      	bne.n	8004616 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
       ||
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004602:	4b6c      	ldr	r3, [pc, #432]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
       ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d047      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	e044      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d018      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0x86>
 8004624:	2b03      	cmp	r3, #3
 8004626:	d825      	bhi.n	8004674 <RCCEx_PLLSAI1_Config+0xa4>
 8004628:	2b01      	cmp	r3, #1
 800462a:	d002      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x62>
 800462c:	2b02      	cmp	r3, #2
 800462e:	d009      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0x74>
 8004630:	e020      	b.n	8004674 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004632:	4b60      	ldr	r3, [pc, #384]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11d      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004642:	e01a      	b.n	800467a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004644:	4b5b      	ldr	r3, [pc, #364]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d116      	bne.n	800467e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004654:	e013      	b.n	800467e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004656:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004662:	4b54      	ldr	r3, [pc, #336]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004672:	e006      	b.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      break;
 8004678:	e004      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004682:	bf00      	nop
    }

    if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10d      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800468a:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	3b01      	subs	r3, #1
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	430b      	orrs	r3, r1
 80046a0:	4944      	ldr	r1, [pc, #272]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d17d      	bne.n	80047a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046ac:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fd f8cc 	bl	8001854 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046be:	e009      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c0:	f7fd f8c8 	bl	8001854 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	73fb      	strb	r3, [r7, #15]
        break;
 80046d2:	e005      	b.n	80046e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d4:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ef      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d160      	bne.n	80047a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d111      	bne.n	8004710 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ec:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	0211      	lsls	r1, r2, #8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68d2      	ldr	r2, [r2, #12]
 8004702:	0912      	lsrs	r2, r2, #4
 8004704:	0452      	lsls	r2, r2, #17
 8004706:	430a      	orrs	r2, r1
 8004708:	492a      	ldr	r1, [pc, #168]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
 800470e:	e027      	b.n	8004760 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d112      	bne.n	800473c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800471e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6892      	ldr	r2, [r2, #8]
 8004726:	0211      	lsls	r1, r2, #8
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6912      	ldr	r2, [r2, #16]
 800472c:	0852      	lsrs	r2, r2, #1
 800472e:	3a01      	subs	r2, #1
 8004730:	0552      	lsls	r2, r2, #21
 8004732:	430a      	orrs	r2, r1
 8004734:	491f      	ldr	r1, [pc, #124]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	610b      	str	r3, [r1, #16]
 800473a:	e011      	b.n	8004760 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6892      	ldr	r2, [r2, #8]
 800474c:	0211      	lsls	r1, r2, #8
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6952      	ldr	r2, [r2, #20]
 8004752:	0852      	lsrs	r2, r2, #1
 8004754:	3a01      	subs	r2, #1
 8004756:	0652      	lsls	r2, r2, #25
 8004758:	430a      	orrs	r2, r1
 800475a:	4916      	ldr	r1, [pc, #88]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800476a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fd f872 	bl	8001854 <HAL_GetTick>
 8004770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004772:	e009      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004774:	f7fd f86e 	bl	8001854 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d902      	bls.n	8004788 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	73fb      	strb	r3, [r7, #15]
          break;
 8004786:	e005      	b.n	8004794 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ef      	beq.n	8004774 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	4904      	ldr	r1, [pc, #16]	; (80047b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000

080047b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c6:	4b6a      	ldr	r3, [pc, #424]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d018      	beq.n	8004804 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047d2:	4b67      	ldr	r3, [pc, #412]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0203 	and.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d10d      	bne.n	80047fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
       ||
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
       ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d047      	beq.n	800488e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	e044      	b.n	800488e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d018      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x86>
 800480c:	2b03      	cmp	r3, #3
 800480e:	d825      	bhi.n	800485c <RCCEx_PLLSAI2_Config+0xa4>
 8004810:	2b01      	cmp	r3, #1
 8004812:	d002      	beq.n	800481a <RCCEx_PLLSAI2_Config+0x62>
 8004814:	2b02      	cmp	r3, #2
 8004816:	d009      	beq.n	800482c <RCCEx_PLLSAI2_Config+0x74>
 8004818:	e020      	b.n	800485c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481a:	4b55      	ldr	r3, [pc, #340]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d11d      	bne.n	8004862 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482a:	e01a      	b.n	8004862 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d116      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483c:	e013      	b.n	8004866 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800483e:	4b4c      	ldr	r3, [pc, #304]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800484a:	4b49      	ldr	r3, [pc, #292]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800485a:	e006      	b.n	800486a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      break;
 8004860:	e004      	b.n	800486c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004862:	bf00      	nop
 8004864:	e002      	b.n	800486c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800486a:	bf00      	nop
    }

    if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	430b      	orrs	r3, r1
 8004888:	4939      	ldr	r1, [pc, #228]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d167      	bne.n	8004964 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a35      	ldr	r2, [pc, #212]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fc ffd8 	bl	8001854 <HAL_GetTick>
 80048a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048a6:	e009      	b.n	80048bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a8:	f7fc ffd4 	bl	8001854 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d902      	bls.n	80048bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ba:	e005      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ef      	bne.n	80048a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d14a      	bne.n	8004964 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d4:	4b26      	ldr	r3, [pc, #152]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	0912      	lsrs	r2, r2, #4
 80048ec:	0452      	lsls	r2, r2, #17
 80048ee:	430a      	orrs	r2, r1
 80048f0:	491f      	ldr	r1, [pc, #124]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	614b      	str	r3, [r1, #20]
 80048f6:	e011      	b.n	800491c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6892      	ldr	r2, [r2, #8]
 8004908:	0211      	lsls	r1, r2, #8
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6912      	ldr	r2, [r2, #16]
 800490e:	0852      	lsrs	r2, r2, #1
 8004910:	3a01      	subs	r2, #1
 8004912:	0652      	lsls	r2, r2, #25
 8004914:	430a      	orrs	r2, r1
 8004916:	4916      	ldr	r1, [pc, #88]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fc ff94 	bl	8001854 <HAL_GetTick>
 800492c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800492e:	e009      	b.n	8004944 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004930:	f7fc ff90 	bl	8001854 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d902      	bls.n	8004944 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	73fb      	strb	r3, [r7, #15]
          break;
 8004942:	e005      	b.n	8004950 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0ef      	beq.n	8004930 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4904      	ldr	r1, [pc, #16]	; (8004970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000

08004974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e049      	b.n	8004a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f841 	bl	8004a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 f9f8 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d001      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e04f      	b.n	8004af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a23      	ldr	r2, [pc, #140]	; (8004afc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01d      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0x76>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d018      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0x76>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0x76>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0x76>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0x76>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0x76>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d115      	bne.n	8004ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d015      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0xb4>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d011      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad8:	e008      	b.n	8004aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e000      	b.n	8004aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	00010007 	.word	0x00010007

08004b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0202 	mvn.w	r2, #2
 8004b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f905 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8f7 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f908 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0204 	mvn.w	r2, #4
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8db 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8cd 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f8de 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0208 	mvn.w	r2, #8
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8b1 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8a3 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8b4 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0210 	mvn.w	r2, #16
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2208      	movs	r2, #8
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f887 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f879 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f88a 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10e      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d107      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0201 	mvn.w	r2, #1
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fb80 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f914 	bl	8004ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd6:	d10e      	bne.n	8004cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d107      	bne.n	8004cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f907 	bl	8004f04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d10e      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d107      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f838 	bl	8004d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d10e      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d107      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0220 	mvn.w	r2, #32
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f8c7 	bl	8004edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a40      	ldr	r2, [pc, #256]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d00f      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3d      	ldr	r2, [pc, #244]	; (8004ec0 <TIM_Base_SetConfig+0x118>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <TIM_Base_SetConfig+0x11c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3b      	ldr	r2, [pc, #236]	; (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01f      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d01b      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <TIM_Base_SetConfig+0x118>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d017      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <TIM_Base_SetConfig+0x11c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00f      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a29      	ldr	r2, [pc, #164]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a12      	ldr	r2, [pc, #72]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d007      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	615a      	str	r2, [r3, #20]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800

08004edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e040      	b.n	8004fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fad6 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa4e 	bl	80053f8 <UART_SetConfig>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e022      	b.n	8004fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fccc 	bl	800590c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fd53 	bl	8005a50 <UART_CheckIdleState>
 8004faa:	4603      	mov	r3, r0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 81ce 	beq.w	800539e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
      }
      return;
 800500a:	e1c8      	b.n	800539e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80e3 	beq.w	80051da <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4ba6      	ldr	r3, [pc, #664]	; (80052bc <HAL_UART_IRQHandler+0x308>)
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80d8 	beq.w	80051da <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_UART_IRQHandler+0xa2>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2201      	movs	r2, #1
 8005044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504c:	f043 0201 	orr.w	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_UART_IRQHandler+0xce>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2202      	movs	r2, #2
 8005070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005078:	f043 0204 	orr.w	r2, r3, #4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d010      	beq.n	80050ae <HAL_UART_IRQHandler+0xfa>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2204      	movs	r2, #4
 800509c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a4:	f043 0202 	orr.w	r2, r3, #2
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2208      	movs	r2, #8
 80050d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050da:	f043 0208 	orr.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <HAL_UART_IRQHandler+0x15e>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8142 	beq.w	80053a2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005148:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d004      	beq.n	8005162 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d031      	beq.n	80051c6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fd39 	bl	8005bda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d123      	bne.n	80051be <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005184:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	2b00      	cmp	r3, #0
 800518c:	d013      	beq.n	80051b6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a4b      	ldr	r2, [pc, #300]	; (80052c0 <HAL_UART_IRQHandler+0x30c>)
 8005194:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd fe88 	bl	8002eb0 <HAL_DMA_Abort_IT>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d017      	beq.n	80051d6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e00f      	b.n	80051d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f908 	bl	80053cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	e00b      	b.n	80051d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f904 	bl	80053cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e007      	b.n	80051d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f900 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80051d4:	e0e5      	b.n	80053a2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	bf00      	nop
    return;
 80051d8:	e0e3      	b.n	80053a2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051de:	2b01      	cmp	r3, #1
 80051e0:	f040 80a9 	bne.w	8005336 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 80a3 	beq.w	8005336 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 809d 	beq.w	8005336 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2210      	movs	r2, #16
 8005202:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d158      	bne.n	80052c4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800521c:	893b      	ldrh	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80c1 	beq.w	80053a6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800522a:	893a      	ldrh	r2, [r7, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	f080 80ba 	bcs.w	80053a6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	893a      	ldrh	r2, [r7, #8]
 8005236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d12a      	bne.n	80052a0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005258:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005278:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0210 	bic.w	r2, r2, #16
 8005294:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fdca 	bl	8002e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f893 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052ba:	e074      	b.n	80053a6 <HAL_UART_IRQHandler+0x3f2>
 80052bc:	04000120 	.word	0x04000120
 80052c0:	08005c39 	.word	0x08005c39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d063      	beq.n	80053aa <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d060      	beq.n	80053aa <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0210 	bic.w	r2, r2, #16
 8005328:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f856 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005334:	e039      	b.n	80053aa <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <HAL_UART_IRQHandler+0x3a8>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fc9e 	bl	8005c96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800535a:	e029      	b.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
    }
    return;
 8005380:	e015      	b.n	80053ae <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fc64 	bl	8005c64 <UART_EndTransmit_IT>
    return;
 800539c:	e008      	b.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 800539e:	bf00      	nop
 80053a0:	e006      	b.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80053a2:	bf00      	nop
 80053a4:	e004      	b.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80053a6:	bf00      	nop
 80053a8:	e002      	b.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80053aa:	bf00      	nop
 80053ac:	e000      	b.n	80053b0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80053ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop

080053b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	b5b0      	push	{r4, r5, r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4313      	orrs	r3, r2
 800541a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4bad      	ldr	r3, [pc, #692]	; (80056d8 <UART_SetConfig+0x2e0>)
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	69f9      	ldr	r1, [r7, #28]
 800542c:	430b      	orrs	r3, r1
 800542e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4aa2      	ldr	r2, [pc, #648]	; (80056dc <UART_SetConfig+0x2e4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	4313      	orrs	r3, r2
 800545e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	430a      	orrs	r2, r1
 8005472:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a99      	ldr	r2, [pc, #612]	; (80056e0 <UART_SetConfig+0x2e8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d121      	bne.n	80054c2 <UART_SetConfig+0xca>
 800547e:	4b99      	ldr	r3, [pc, #612]	; (80056e4 <UART_SetConfig+0x2ec>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b03      	cmp	r3, #3
 800548a:	d817      	bhi.n	80054bc <UART_SetConfig+0xc4>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0x9c>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054b1 	.word	0x080054b1
 800549c:	080054ab 	.word	0x080054ab
 80054a0:	080054b7 	.word	0x080054b7
 80054a4:	2301      	movs	r3, #1
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e0e7      	b.n	800567a <UART_SetConfig+0x282>
 80054aa:	2302      	movs	r3, #2
 80054ac:	76fb      	strb	r3, [r7, #27]
 80054ae:	e0e4      	b.n	800567a <UART_SetConfig+0x282>
 80054b0:	2304      	movs	r3, #4
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	e0e1      	b.n	800567a <UART_SetConfig+0x282>
 80054b6:	2308      	movs	r3, #8
 80054b8:	76fb      	strb	r3, [r7, #27]
 80054ba:	e0de      	b.n	800567a <UART_SetConfig+0x282>
 80054bc:	2310      	movs	r3, #16
 80054be:	76fb      	strb	r3, [r7, #27]
 80054c0:	e0db      	b.n	800567a <UART_SetConfig+0x282>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a88      	ldr	r2, [pc, #544]	; (80056e8 <UART_SetConfig+0x2f0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d132      	bne.n	8005532 <UART_SetConfig+0x13a>
 80054cc:	4b85      	ldr	r3, [pc, #532]	; (80056e4 <UART_SetConfig+0x2ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d828      	bhi.n	800552c <UART_SetConfig+0x134>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0xe8>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005515 	.word	0x08005515
 80054e4:	0800552d 	.word	0x0800552d
 80054e8:	0800552d 	.word	0x0800552d
 80054ec:	0800552d 	.word	0x0800552d
 80054f0:	08005521 	.word	0x08005521
 80054f4:	0800552d 	.word	0x0800552d
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	0800552d 	.word	0x0800552d
 8005500:	0800551b 	.word	0x0800551b
 8005504:	0800552d 	.word	0x0800552d
 8005508:	0800552d 	.word	0x0800552d
 800550c:	0800552d 	.word	0x0800552d
 8005510:	08005527 	.word	0x08005527
 8005514:	2300      	movs	r3, #0
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	e0af      	b.n	800567a <UART_SetConfig+0x282>
 800551a:	2302      	movs	r3, #2
 800551c:	76fb      	strb	r3, [r7, #27]
 800551e:	e0ac      	b.n	800567a <UART_SetConfig+0x282>
 8005520:	2304      	movs	r3, #4
 8005522:	76fb      	strb	r3, [r7, #27]
 8005524:	e0a9      	b.n	800567a <UART_SetConfig+0x282>
 8005526:	2308      	movs	r3, #8
 8005528:	76fb      	strb	r3, [r7, #27]
 800552a:	e0a6      	b.n	800567a <UART_SetConfig+0x282>
 800552c:	2310      	movs	r3, #16
 800552e:	76fb      	strb	r3, [r7, #27]
 8005530:	e0a3      	b.n	800567a <UART_SetConfig+0x282>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a6d      	ldr	r2, [pc, #436]	; (80056ec <UART_SetConfig+0x2f4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d120      	bne.n	800557e <UART_SetConfig+0x186>
 800553c:	4b69      	ldr	r3, [pc, #420]	; (80056e4 <UART_SetConfig+0x2ec>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005546:	2b30      	cmp	r3, #48	; 0x30
 8005548:	d013      	beq.n	8005572 <UART_SetConfig+0x17a>
 800554a:	2b30      	cmp	r3, #48	; 0x30
 800554c:	d814      	bhi.n	8005578 <UART_SetConfig+0x180>
 800554e:	2b20      	cmp	r3, #32
 8005550:	d009      	beq.n	8005566 <UART_SetConfig+0x16e>
 8005552:	2b20      	cmp	r3, #32
 8005554:	d810      	bhi.n	8005578 <UART_SetConfig+0x180>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <UART_SetConfig+0x168>
 800555a:	2b10      	cmp	r3, #16
 800555c:	d006      	beq.n	800556c <UART_SetConfig+0x174>
 800555e:	e00b      	b.n	8005578 <UART_SetConfig+0x180>
 8005560:	2300      	movs	r3, #0
 8005562:	76fb      	strb	r3, [r7, #27]
 8005564:	e089      	b.n	800567a <UART_SetConfig+0x282>
 8005566:	2302      	movs	r3, #2
 8005568:	76fb      	strb	r3, [r7, #27]
 800556a:	e086      	b.n	800567a <UART_SetConfig+0x282>
 800556c:	2304      	movs	r3, #4
 800556e:	76fb      	strb	r3, [r7, #27]
 8005570:	e083      	b.n	800567a <UART_SetConfig+0x282>
 8005572:	2308      	movs	r3, #8
 8005574:	76fb      	strb	r3, [r7, #27]
 8005576:	e080      	b.n	800567a <UART_SetConfig+0x282>
 8005578:	2310      	movs	r3, #16
 800557a:	76fb      	strb	r3, [r7, #27]
 800557c:	e07d      	b.n	800567a <UART_SetConfig+0x282>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a5b      	ldr	r2, [pc, #364]	; (80056f0 <UART_SetConfig+0x2f8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d120      	bne.n	80055ca <UART_SetConfig+0x1d2>
 8005588:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <UART_SetConfig+0x2ec>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005592:	2bc0      	cmp	r3, #192	; 0xc0
 8005594:	d013      	beq.n	80055be <UART_SetConfig+0x1c6>
 8005596:	2bc0      	cmp	r3, #192	; 0xc0
 8005598:	d814      	bhi.n	80055c4 <UART_SetConfig+0x1cc>
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d009      	beq.n	80055b2 <UART_SetConfig+0x1ba>
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d810      	bhi.n	80055c4 <UART_SetConfig+0x1cc>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <UART_SetConfig+0x1b4>
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d006      	beq.n	80055b8 <UART_SetConfig+0x1c0>
 80055aa:	e00b      	b.n	80055c4 <UART_SetConfig+0x1cc>
 80055ac:	2300      	movs	r3, #0
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e063      	b.n	800567a <UART_SetConfig+0x282>
 80055b2:	2302      	movs	r3, #2
 80055b4:	76fb      	strb	r3, [r7, #27]
 80055b6:	e060      	b.n	800567a <UART_SetConfig+0x282>
 80055b8:	2304      	movs	r3, #4
 80055ba:	76fb      	strb	r3, [r7, #27]
 80055bc:	e05d      	b.n	800567a <UART_SetConfig+0x282>
 80055be:	2308      	movs	r3, #8
 80055c0:	76fb      	strb	r3, [r7, #27]
 80055c2:	e05a      	b.n	800567a <UART_SetConfig+0x282>
 80055c4:	2310      	movs	r3, #16
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e057      	b.n	800567a <UART_SetConfig+0x282>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a49      	ldr	r2, [pc, #292]	; (80056f4 <UART_SetConfig+0x2fc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d125      	bne.n	8005620 <UART_SetConfig+0x228>
 80055d4:	4b43      	ldr	r3, [pc, #268]	; (80056e4 <UART_SetConfig+0x2ec>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e2:	d017      	beq.n	8005614 <UART_SetConfig+0x21c>
 80055e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e8:	d817      	bhi.n	800561a <UART_SetConfig+0x222>
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ee:	d00b      	beq.n	8005608 <UART_SetConfig+0x210>
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d811      	bhi.n	800561a <UART_SetConfig+0x222>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <UART_SetConfig+0x20a>
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fe:	d006      	beq.n	800560e <UART_SetConfig+0x216>
 8005600:	e00b      	b.n	800561a <UART_SetConfig+0x222>
 8005602:	2300      	movs	r3, #0
 8005604:	76fb      	strb	r3, [r7, #27]
 8005606:	e038      	b.n	800567a <UART_SetConfig+0x282>
 8005608:	2302      	movs	r3, #2
 800560a:	76fb      	strb	r3, [r7, #27]
 800560c:	e035      	b.n	800567a <UART_SetConfig+0x282>
 800560e:	2304      	movs	r3, #4
 8005610:	76fb      	strb	r3, [r7, #27]
 8005612:	e032      	b.n	800567a <UART_SetConfig+0x282>
 8005614:	2308      	movs	r3, #8
 8005616:	76fb      	strb	r3, [r7, #27]
 8005618:	e02f      	b.n	800567a <UART_SetConfig+0x282>
 800561a:	2310      	movs	r3, #16
 800561c:	76fb      	strb	r3, [r7, #27]
 800561e:	e02c      	b.n	800567a <UART_SetConfig+0x282>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <UART_SetConfig+0x2e4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d125      	bne.n	8005676 <UART_SetConfig+0x27e>
 800562a:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <UART_SetConfig+0x2ec>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005638:	d017      	beq.n	800566a <UART_SetConfig+0x272>
 800563a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800563e:	d817      	bhi.n	8005670 <UART_SetConfig+0x278>
 8005640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005644:	d00b      	beq.n	800565e <UART_SetConfig+0x266>
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	d811      	bhi.n	8005670 <UART_SetConfig+0x278>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <UART_SetConfig+0x260>
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	d006      	beq.n	8005664 <UART_SetConfig+0x26c>
 8005656:	e00b      	b.n	8005670 <UART_SetConfig+0x278>
 8005658:	2300      	movs	r3, #0
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x282>
 800565e:	2302      	movs	r3, #2
 8005660:	76fb      	strb	r3, [r7, #27]
 8005662:	e00a      	b.n	800567a <UART_SetConfig+0x282>
 8005664:	2304      	movs	r3, #4
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	e007      	b.n	800567a <UART_SetConfig+0x282>
 800566a:	2308      	movs	r3, #8
 800566c:	76fb      	strb	r3, [r7, #27]
 800566e:	e004      	b.n	800567a <UART_SetConfig+0x282>
 8005670:	2310      	movs	r3, #16
 8005672:	76fb      	strb	r3, [r7, #27]
 8005674:	e001      	b.n	800567a <UART_SetConfig+0x282>
 8005676:	2310      	movs	r3, #16
 8005678:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <UART_SetConfig+0x2e4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	f040 8087 	bne.w	8005794 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005686:	7efb      	ldrb	r3, [r7, #27]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d837      	bhi.n	80056fc <UART_SetConfig+0x304>
 800568c:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x29c>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056fd 	.word	0x080056fd
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056fd 	.word	0x080056fd
 80056a4:	080056c7 	.word	0x080056c7
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	080056fd 	.word	0x080056fd
 80056b4:	080056cf 	.word	0x080056cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe fbd2 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 80056bc:	6178      	str	r0, [r7, #20]
        break;
 80056be:	e022      	b.n	8005706 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <UART_SetConfig+0x300>)
 80056c2:	617b      	str	r3, [r7, #20]
        break;
 80056c4:	e01f      	b.n	8005706 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c6:	f7fe fb33 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 80056ca:	6178      	str	r0, [r7, #20]
        break;
 80056cc:	e01b      	b.n	8005706 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d2:	617b      	str	r3, [r7, #20]
        break;
 80056d4:	e017      	b.n	8005706 <UART_SetConfig+0x30e>
 80056d6:	bf00      	nop
 80056d8:	efff69f3 	.word	0xefff69f3
 80056dc:	40008000 	.word	0x40008000
 80056e0:	40013800 	.word	0x40013800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40004400 	.word	0x40004400
 80056ec:	40004800 	.word	0x40004800
 80056f0:	40004c00 	.word	0x40004c00
 80056f4:	40005000 	.word	0x40005000
 80056f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	76bb      	strb	r3, [r7, #26]
        break;
 8005704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80f1 	beq.w	80058f0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	429a      	cmp	r2, r3
 800571c:	d305      	bcc.n	800572a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	429a      	cmp	r2, r3
 8005728:	d902      	bls.n	8005730 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	76bb      	strb	r3, [r7, #26]
 800572e:	e0df      	b.n	80058f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4618      	mov	r0, r3
 8005734:	f04f 0100 	mov.w	r1, #0
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	020b      	lsls	r3, r1, #8
 8005742:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005746:	0202      	lsls	r2, r0, #8
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6849      	ldr	r1, [r1, #4]
 800574c:	0849      	lsrs	r1, r1, #1
 800574e:	4608      	mov	r0, r1
 8005750:	f04f 0100 	mov.w	r1, #0
 8005754:	1814      	adds	r4, r2, r0
 8005756:	eb43 0501 	adc.w	r5, r3, r1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	461a      	mov	r2, r3
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	4620      	mov	r0, r4
 8005766:	4629      	mov	r1, r5
 8005768:	f7fa fd82 	bl	8000270 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4613      	mov	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800577a:	d308      	bcc.n	800578e <UART_SetConfig+0x396>
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005782:	d204      	bcs.n	800578e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e0b0      	b.n	80058f0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	76bb      	strb	r3, [r7, #26]
 8005792:	e0ad      	b.n	80058f0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579c:	d15c      	bne.n	8005858 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800579e:	7efb      	ldrb	r3, [r7, #27]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d828      	bhi.n	80057f6 <UART_SetConfig+0x3fe>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x3b4>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057d9 	.word	0x080057d9
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057f7 	.word	0x080057f7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057f7 	.word	0x080057f7
 80057c4:	080057f7 	.word	0x080057f7
 80057c8:	080057f7 	.word	0x080057f7
 80057cc:	080057ef 	.word	0x080057ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d0:	f7fe fb46 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 80057d4:	6178      	str	r0, [r7, #20]
        break;
 80057d6:	e013      	b.n	8005800 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d8:	f7fe fb58 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 80057dc:	6178      	str	r0, [r7, #20]
        break;
 80057de:	e00f      	b.n	8005800 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e0:	4b49      	ldr	r3, [pc, #292]	; (8005908 <UART_SetConfig+0x510>)
 80057e2:	617b      	str	r3, [r7, #20]
        break;
 80057e4:	e00c      	b.n	8005800 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7fe faa3 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 80057ea:	6178      	str	r0, [r7, #20]
        break;
 80057ec:	e008      	b.n	8005800 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f2:	617b      	str	r3, [r7, #20]
        break;
 80057f4:	e004      	b.n	8005800 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	76bb      	strb	r3, [r7, #26]
        break;
 80057fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d074      	beq.n	80058f0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	005a      	lsls	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b0f      	cmp	r3, #15
 8005822:	d916      	bls.n	8005852 <UART_SetConfig+0x45a>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d212      	bcs.n	8005852 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f023 030f 	bic.w	r3, r3, #15
 8005834:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	b29a      	uxth	r2, r3
 8005842:	89fb      	ldrh	r3, [r7, #14]
 8005844:	4313      	orrs	r3, r2
 8005846:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	89fa      	ldrh	r2, [r7, #14]
 800584e:	60da      	str	r2, [r3, #12]
 8005850:	e04e      	b.n	80058f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	76bb      	strb	r3, [r7, #26]
 8005856:	e04b      	b.n	80058f0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005858:	7efb      	ldrb	r3, [r7, #27]
 800585a:	2b08      	cmp	r3, #8
 800585c:	d827      	bhi.n	80058ae <UART_SetConfig+0x4b6>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x46c>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	080058af 	.word	0x080058af
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
 8005884:	080058a7 	.word	0x080058a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe faea 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 800588c:	6178      	str	r0, [r7, #20]
        break;
 800588e:	e013      	b.n	80058b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fafc 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8005894:	6178      	str	r0, [r7, #20]
        break;
 8005896:	e00f      	b.n	80058b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005898:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <UART_SetConfig+0x510>)
 800589a:	617b      	str	r3, [r7, #20]
        break;
 800589c:	e00c      	b.n	80058b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589e:	f7fe fa47 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 80058a2:	6178      	str	r0, [r7, #20]
        break;
 80058a4:	e008      	b.n	80058b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	617b      	str	r3, [r7, #20]
        break;
 80058ac:	e004      	b.n	80058b8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	76bb      	strb	r3, [r7, #26]
        break;
 80058b6:	bf00      	nop
    }

    if (pclk != 0U)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085a      	lsrs	r2, r3, #1
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	441a      	add	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b0f      	cmp	r3, #15
 80058d8:	d908      	bls.n	80058ec <UART_SetConfig+0x4f4>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e0:	d204      	bcs.n	80058ec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	e001      	b.n	80058f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bdb0      	pop	{r4, r5, r7, pc}
 8005906:	bf00      	nop
 8005908:	00f42400 	.word	0x00f42400

0800590c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a60:	f7fb fef8 	bl	8001854 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f82d 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e023      	b.n	8005ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d10e      	bne.n	8005abe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f817 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00d      	b.n	8005ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	e05e      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d05a      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afc:	f7fb feaa 	bl	8001854 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d11b      	bne.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0201 	bic.w	r2, r2, #1
 8005b30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e043      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02c      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b66:	d124      	bne.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b70:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b80:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e00f      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d091      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bf0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d107      	bne.n	8005c1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0210 	bic.w	r2, r2, #16
 8005c18:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fbb8 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fb95 	bl	80053b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b08b      	sub	sp, #44	; 0x2c
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa93 f3a3 	rbit	r3, r3
 8005cc4:	613b      	str	r3, [r7, #16]
  return result;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	e003      	b.n	8005cdc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	fab3 f383 	clz	r3, r3
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	2103      	movs	r1, #3
 8005ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	fa93 f3a3 	rbit	r3, r3
 8005cf2:	61fb      	str	r3, [r7, #28]
  return result;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005cfe:	2320      	movs	r3, #32
 8005d00:	e003      	b.n	8005d0a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	fab3 f383 	clz	r3, r3
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	372c      	adds	r7, #44	; 0x2c
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	401a      	ands	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	605a      	str	r2, [r3, #4]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b08b      	sub	sp, #44	; 0x2c
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	fa93 f3a3 	rbit	r3, r3
 8005d6e:	613b      	str	r3, [r7, #16]
  return result;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	e003      	b.n	8005d86 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	2103      	movs	r1, #3
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	401a      	ands	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	fa93 f3a3 	rbit	r3, r3
 8005d9c:	61fb      	str	r3, [r7, #28]
  return result;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005da8:	2320      	movs	r3, #32
 8005daa:	e003      	b.n	8005db4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	fab3 f383 	clz	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005dc2:	bf00      	nop
 8005dc4:	372c      	adds	r7, #44	; 0x2c
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b08b      	sub	sp, #44	; 0x2c
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	fa93 f3a3 	rbit	r3, r3
 8005de8:	613b      	str	r3, [r7, #16]
  return result;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005df4:	2320      	movs	r3, #32
 8005df6:	e003      	b.n	8005e00 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	fab3 f383 	clz	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	2103      	movs	r1, #3
 8005e04:	fa01 f303 	lsl.w	r3, r1, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	fa93 f3a3 	rbit	r3, r3
 8005e16:	61fb      	str	r3, [r7, #28]
  return result;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005e22:	2320      	movs	r3, #32
 8005e24:	e003      	b.n	8005e2e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	fab3 f383 	clz	r3, r3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	60da      	str	r2, [r3, #12]
}
 8005e3c:	bf00      	nop
 8005e3e:	372c      	adds	r7, #44	; 0x2c
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b08b      	sub	sp, #44	; 0x2c
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1a      	ldr	r2, [r3, #32]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	fa93 f3a3 	rbit	r3, r3
 8005e62:	613b      	str	r3, [r7, #16]
  return result;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005e6e:	2320      	movs	r3, #32
 8005e70:	e003      	b.n	8005e7a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	fab3 f383 	clz	r3, r3
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	210f      	movs	r1, #15
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	401a      	ands	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	61fb      	str	r3, [r7, #28]
  return result;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	e003      	b.n	8005ea8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005eb6:	bf00      	nop
 8005eb8:	372c      	adds	r7, #44	; 0x2c
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b08b      	sub	sp, #44	; 0x2c
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa93 f3a3 	rbit	r3, r3
 8005ede:	613b      	str	r3, [r7, #16]
  return result;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005eea:	2320      	movs	r3, #32
 8005eec:	e003      	b.n	8005ef6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	fab3 f383 	clz	r3, r3
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	210f      	movs	r1, #15
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	401a      	ands	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	0a1b      	lsrs	r3, r3, #8
 8005f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	fa93 f3a3 	rbit	r3, r3
 8005f0e:	61fb      	str	r3, [r7, #28]
  return result;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	e003      	b.n	8005f26 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	fab3 f383 	clz	r3, r3
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005f34:	bf00      	nop
 8005f36:	372c      	adds	r7, #44	; 0x2c
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	fa93 f3a3 	rbit	r3, r3
 8005f56:	60fb      	str	r3, [r7, #12]
  return result;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <LL_GPIO_Init+0x26>
    return 32U;
 8005f62:	2320      	movs	r3, #32
 8005f64:	e003      	b.n	8005f6e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	fab3 f383 	clz	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005f70:	e048      	b.n	8006004 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	2101      	movs	r1, #1
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d03a      	beq.n	8005ffe <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d003      	beq.n	8005f98 <LL_GPIO_Init+0x58>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d10e      	bne.n	8005fb6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	69b9      	ldr	r1, [r7, #24]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fed7 	bl	8005d54 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff feb7 	bl	8005d24 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	69b9      	ldr	r1, [r7, #24]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ff05 	bl	8005dce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d111      	bne.n	8005ff0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2bff      	cmp	r3, #255	; 0xff
 8005fd0:	d807      	bhi.n	8005fe2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff ff34 	bl	8005e48 <LL_GPIO_SetAFPin_0_7>
 8005fe0:	e006      	b.n	8005ff0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	69b9      	ldr	r1, [r7, #24]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff ff69 	bl	8005ec2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	69b9      	ldr	r1, [r7, #24]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fe56 	bl	8005caa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3301      	adds	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1af      	bne.n	8005f72 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <LL_RCC_HSI_IsReady+0x24>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d101      	bne.n	8006032 <LL_RCC_HSI_IsReady+0x16>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <LL_RCC_HSI_IsReady+0x18>
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000

08006044 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <LL_RCC_LSE_IsReady+0x24>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d101      	bne.n	800605a <LL_RCC_LSE_IsReady+0x16>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <LL_RCC_LSE_IsReady+0x18>
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40021000 	.word	0x40021000

0800606c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d101      	bne.n	8006080 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40021000 	.word	0x40021000

08006090 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <LL_RCC_MSI_GetRange+0x18>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40021000 	.word	0x40021000

080060ac <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80060b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40021000 	.word	0x40021000

080060c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <LL_RCC_GetSysClkSource+0x18>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 030c 	and.w	r3, r3, #12
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40021000 	.word	0x40021000

080060e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <LL_RCC_GetAHBPrescaler+0x18>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000

08006100 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006104:	4b04      	ldr	r3, [pc, #16]	; (8006118 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800610c:	4618      	mov	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000

0800611c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006128:	4618      	mov	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40021000 	.word	0x40021000

08006138 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <LL_RCC_GetUSARTClockSource+0x24>)
 8006142:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	401a      	ands	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	4313      	orrs	r3, r2
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40021000 	.word	0x40021000

08006160 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <LL_RCC_GetUARTClockSource+0x24>)
 800616a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	401a      	ands	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	4313      	orrs	r3, r2
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40021000 	.word	0x40021000

08006188 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <LL_RCC_PLL_GetMainSource+0x18>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0303 	and.w	r3, r3, #3
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000

080061a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <LL_RCC_PLL_GetN+0x18>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40021000 	.word	0x40021000

080061c0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <LL_RCC_PLL_GetR+0x18>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40021000 	.word	0x40021000

080061dc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <LL_RCC_PLL_GetDivider+0x18>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000

080061f8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d137      	bne.n	800627a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff ff94 	bl	8006138 <LL_RCC_GetUSARTClockSource>
 8006210:	4603      	mov	r3, r0
 8006212:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006216:	2b03      	cmp	r3, #3
 8006218:	f200 80b3 	bhi.w	8006382 <LL_RCC_GetUSARTClockFreq+0x18a>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006263 	.word	0x08006263
 8006228:	08006235 	.word	0x08006235
 800622c:	0800623d 	.word	0x0800623d
 8006230:	0800624f 	.word	0x0800624f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006234:	f000 f95c 	bl	80064f0 <RCC_GetSystemClockFreq>
 8006238:	60f8      	str	r0, [r7, #12]
        break;
 800623a:	e0b5      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800623c:	f7ff feee 	bl	800601c <LL_RCC_HSI_IsReady>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 809f 	beq.w	8006386 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8006248:	4b5a      	ldr	r3, [pc, #360]	; (80063b4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800624a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800624c:	e09b      	b.n	8006386 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800624e:	f7ff fef9 	bl	8006044 <LL_RCC_LSE_IsReady>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8098 	beq.w	800638a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800625a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800625e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006260:	e093      	b.n	800638a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006262:	f000 f945 	bl	80064f0 <RCC_GetSystemClockFreq>
 8006266:	4603      	mov	r3, r0
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f9d1 	bl	8006610 <RCC_GetHCLKClockFreq>
 800626e:	4603      	mov	r3, r0
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f9f7 	bl	8006664 <RCC_GetPCLK2ClockFreq>
 8006276:	60f8      	str	r0, [r7, #12]
        break;
 8006278:	e096      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d146      	bne.n	800630e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ff59 	bl	8006138 <LL_RCC_GetUSARTClockSource>
 8006286:	4603      	mov	r3, r0
 8006288:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d87e      	bhi.n	800638e <LL_RCC_GetUSARTClockFreq+0x196>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062f7 	.word	0x080062f7
 800629c:	0800638f 	.word	0x0800638f
 80062a0:	0800638f 	.word	0x0800638f
 80062a4:	0800638f 	.word	0x0800638f
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	0800638f 	.word	0x0800638f
 80062b0:	0800638f 	.word	0x0800638f
 80062b4:	0800638f 	.word	0x0800638f
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	0800638f 	.word	0x0800638f
 80062c0:	0800638f 	.word	0x0800638f
 80062c4:	0800638f 	.word	0x0800638f
 80062c8:	080062e5 	.word	0x080062e5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80062cc:	f000 f910 	bl	80064f0 <RCC_GetSystemClockFreq>
 80062d0:	60f8      	str	r0, [r7, #12]
        break;
 80062d2:	e069      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80062d4:	f7ff fea2 	bl	800601c <LL_RCC_HSI_IsReady>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d059      	beq.n	8006392 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80062de:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80062e0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062e2:	e056      	b.n	8006392 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80062e4:	f7ff feae 	bl	8006044 <LL_RCC_LSE_IsReady>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d053      	beq.n	8006396 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80062ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062f4:	e04f      	b.n	8006396 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80062f6:	f000 f8fb 	bl	80064f0 <RCC_GetSystemClockFreq>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 f987 	bl	8006610 <RCC_GetHCLKClockFreq>
 8006302:	4603      	mov	r3, r0
 8006304:	4618      	mov	r0, r3
 8006306:	f000 f999 	bl	800663c <RCC_GetPCLK1ClockFreq>
 800630a:	60f8      	str	r0, [r7, #12]
        break;
 800630c:	e04c      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d142      	bne.n	800639a <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ff0f 	bl	8006138 <LL_RCC_GetUSARTClockSource>
 800631a:	4603      	mov	r3, r0
 800631c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006320:	d01a      	beq.n	8006358 <LL_RCC_GetUSARTClockFreq+0x160>
 8006322:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006326:	d83a      	bhi.n	800639e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006328:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00c      	beq.n	8006348 <LL_RCC_GetUSARTClockFreq+0x150>
 800632e:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d834      	bhi.n	800639e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006338:	d017      	beq.n	800636a <LL_RCC_GetUSARTClockFreq+0x172>
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d12e      	bne.n	800639e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006340:	f000 f8d6 	bl	80064f0 <RCC_GetSystemClockFreq>
 8006344:	60f8      	str	r0, [r7, #12]
          break;
 8006346:	e02f      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006348:	f7ff fe68 	bl	800601c <LL_RCC_HSI_IsReady>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d027      	beq.n	80063a2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006354:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006356:	e024      	b.n	80063a2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006358:	f7ff fe74 	bl	8006044 <LL_RCC_LSE_IsReady>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d021      	beq.n	80063a6 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006368:	e01d      	b.n	80063a6 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800636a:	f000 f8c1 	bl	80064f0 <RCC_GetSystemClockFreq>
 800636e:	4603      	mov	r3, r0
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f94d 	bl	8006610 <RCC_GetHCLKClockFreq>
 8006376:	4603      	mov	r3, r0
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f95f 	bl	800663c <RCC_GetPCLK1ClockFreq>
 800637e:	60f8      	str	r0, [r7, #12]
          break;
 8006380:	e012      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006382:	bf00      	nop
 8006384:	e010      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006386:	bf00      	nop
 8006388:	e00e      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800638a:	bf00      	nop
 800638c:	e00c      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800638e:	bf00      	nop
 8006390:	e00a      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006392:	bf00      	nop
 8006394:	e008      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006396:	bf00      	nop
 8006398:	e006      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80063a6:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80063a8:	68fb      	ldr	r3, [r7, #12]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	00f42400 	.word	0x00f42400
 80063b8:	00300020 	.word	0x00300020
 80063bc:	00300010 	.word	0x00300010

080063c0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2bc0      	cmp	r3, #192	; 0xc0
 80063d0:	d136      	bne.n	8006440 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fec4 	bl	8006160 <LL_RCC_GetUARTClockSource>
 80063d8:	4603      	mov	r3, r0
 80063da:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80063de:	d01a      	beq.n	8006416 <LL_RCC_GetUARTClockFreq+0x56>
 80063e0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80063e4:	d82e      	bhi.n	8006444 <LL_RCC_GetUARTClockFreq+0x84>
 80063e6:	4a3d      	ldr	r2, [pc, #244]	; (80064dc <LL_RCC_GetUARTClockFreq+0x11c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00c      	beq.n	8006406 <LL_RCC_GetUARTClockFreq+0x46>
 80063ec:	4a3b      	ldr	r2, [pc, #236]	; (80064dc <LL_RCC_GetUARTClockFreq+0x11c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d828      	bhi.n	8006444 <LL_RCC_GetUARTClockFreq+0x84>
 80063f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063f6:	d017      	beq.n	8006428 <LL_RCC_GetUARTClockFreq+0x68>
 80063f8:	4a39      	ldr	r2, [pc, #228]	; (80064e0 <LL_RCC_GetUARTClockFreq+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d122      	bne.n	8006444 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80063fe:	f000 f877 	bl	80064f0 <RCC_GetSystemClockFreq>
 8006402:	60f8      	str	r0, [r7, #12]
        break;
 8006404:	e023      	b.n	800644e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006406:	f7ff fe09 	bl	800601c <LL_RCC_HSI_IsReady>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006410:	4b34      	ldr	r3, [pc, #208]	; (80064e4 <LL_RCC_GetUARTClockFreq+0x124>)
 8006412:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006414:	e018      	b.n	8006448 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006416:	f7ff fe15 	bl	8006044 <LL_RCC_LSE_IsReady>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006424:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006426:	e011      	b.n	800644c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006428:	f000 f862 	bl	80064f0 <RCC_GetSystemClockFreq>
 800642c:	4603      	mov	r3, r0
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f8ee 	bl	8006610 <RCC_GetHCLKClockFreq>
 8006434:	4603      	mov	r3, r0
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f900 	bl	800663c <RCC_GetPCLK1ClockFreq>
 800643c:	60f8      	str	r0, [r7, #12]
        break;
 800643e:	e006      	b.n	800644e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006440:	bf00      	nop
 8006442:	e004      	b.n	800644e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800644c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006454:	d136      	bne.n	80064c4 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fe82 	bl	8006160 <LL_RCC_GetUARTClockSource>
 800645c:	4603      	mov	r3, r0
 800645e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006462:	d01a      	beq.n	800649a <LL_RCC_GetUARTClockFreq+0xda>
 8006464:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006468:	d82e      	bhi.n	80064c8 <LL_RCC_GetUARTClockFreq+0x108>
 800646a:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <LL_RCC_GetUARTClockFreq+0x128>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00c      	beq.n	800648a <LL_RCC_GetUARTClockFreq+0xca>
 8006470:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <LL_RCC_GetUARTClockFreq+0x128>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d828      	bhi.n	80064c8 <LL_RCC_GetUARTClockFreq+0x108>
 8006476:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800647a:	d017      	beq.n	80064ac <LL_RCC_GetUARTClockFreq+0xec>
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <LL_RCC_GetUARTClockFreq+0x12c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d122      	bne.n	80064c8 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006482:	f000 f835 	bl	80064f0 <RCC_GetSystemClockFreq>
 8006486:	60f8      	str	r0, [r7, #12]
        break;
 8006488:	e023      	b.n	80064d2 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800648a:	f7ff fdc7 	bl	800601c <LL_RCC_HSI_IsReady>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006494:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <LL_RCC_GetUARTClockFreq+0x124>)
 8006496:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006498:	e018      	b.n	80064cc <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800649a:	f7ff fdd3 	bl	8006044 <LL_RCC_LSE_IsReady>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d015      	beq.n	80064d0 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80064a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80064aa:	e011      	b.n	80064d0 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80064ac:	f000 f820 	bl	80064f0 <RCC_GetSystemClockFreq>
 80064b0:	4603      	mov	r3, r0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 f8ac 	bl	8006610 <RCC_GetHCLKClockFreq>
 80064b8:	4603      	mov	r3, r0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f8be 	bl	800663c <RCC_GetPCLK1ClockFreq>
 80064c0:	60f8      	str	r0, [r7, #12]
        break;
 80064c2:	e006      	b.n	80064d2 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80064c4:	bf00      	nop
 80064c6:	e004      	b.n	80064d2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80064c8:	bf00      	nop
 80064ca:	e002      	b.n	80064d2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80064d0:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80064d2:	68fb      	ldr	r3, [r7, #12]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	00c00080 	.word	0x00c00080
 80064e0:	00c00040 	.word	0x00c00040
 80064e4:	00f42400 	.word	0x00f42400
 80064e8:	03000200 	.word	0x03000200
 80064ec:	03000100 	.word	0x03000100

080064f0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80064f6:	f7ff fde7 	bl	80060c8 <LL_RCC_GetSysClkSource>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d851      	bhi.n	80065a4 <RCC_GetSystemClockFreq+0xb4>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <RCC_GetSystemClockFreq+0x18>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	080065a5 	.word	0x080065a5
 8006510:	080065a5 	.word	0x080065a5
 8006514:	080065a5 	.word	0x080065a5
 8006518:	08006591 	.word	0x08006591
 800651c:	080065a5 	.word	0x080065a5
 8006520:	080065a5 	.word	0x080065a5
 8006524:	080065a5 	.word	0x080065a5
 8006528:	08006597 	.word	0x08006597
 800652c:	080065a5 	.word	0x080065a5
 8006530:	080065a5 	.word	0x080065a5
 8006534:	080065a5 	.word	0x080065a5
 8006538:	0800659d 	.word	0x0800659d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800653c:	f7ff fd96 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d111      	bne.n	800656a <RCC_GetSystemClockFreq+0x7a>
 8006546:	f7ff fd91 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <RCC_GetSystemClockFreq+0x6a>
 8006550:	f7ff fd9e 	bl	8006090 <LL_RCC_MSI_GetRange>
 8006554:	4603      	mov	r3, r0
 8006556:	0a1b      	lsrs	r3, r3, #8
 8006558:	e003      	b.n	8006562 <RCC_GetSystemClockFreq+0x72>
 800655a:	f7ff fda7 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 800655e:	4603      	mov	r3, r0
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	4a28      	ldr	r2, [pc, #160]	; (8006604 <RCC_GetSystemClockFreq+0x114>)
 8006564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006568:	e010      	b.n	800658c <RCC_GetSystemClockFreq+0x9c>
 800656a:	f7ff fd7f 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <RCC_GetSystemClockFreq+0x8e>
 8006574:	f7ff fd8c 	bl	8006090 <LL_RCC_MSI_GetRange>
 8006578:	4603      	mov	r3, r0
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	e003      	b.n	8006586 <RCC_GetSystemClockFreq+0x96>
 800657e:	f7ff fd95 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 8006582:	4603      	mov	r3, r0
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <RCC_GetSystemClockFreq+0x114>)
 8006588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800658e:	e033      	b.n	80065f8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006590:	4b1d      	ldr	r3, [pc, #116]	; (8006608 <RCC_GetSystemClockFreq+0x118>)
 8006592:	607b      	str	r3, [r7, #4]
      break;
 8006594:	e030      	b.n	80065f8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006596:	4b1d      	ldr	r3, [pc, #116]	; (800660c <RCC_GetSystemClockFreq+0x11c>)
 8006598:	607b      	str	r3, [r7, #4]
      break;
 800659a:	e02d      	b.n	80065f8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800659c:	f000 f876 	bl	800668c <RCC_PLL_GetFreqDomain_SYS>
 80065a0:	6078      	str	r0, [r7, #4]
      break;
 80065a2:	e029      	b.n	80065f8 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065a4:	f7ff fd62 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d111      	bne.n	80065d2 <RCC_GetSystemClockFreq+0xe2>
 80065ae:	f7ff fd5d 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <RCC_GetSystemClockFreq+0xd2>
 80065b8:	f7ff fd6a 	bl	8006090 <LL_RCC_MSI_GetRange>
 80065bc:	4603      	mov	r3, r0
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	e003      	b.n	80065ca <RCC_GetSystemClockFreq+0xda>
 80065c2:	f7ff fd73 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 80065c6:	4603      	mov	r3, r0
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	4a0e      	ldr	r2, [pc, #56]	; (8006604 <RCC_GetSystemClockFreq+0x114>)
 80065cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d0:	e010      	b.n	80065f4 <RCC_GetSystemClockFreq+0x104>
 80065d2:	f7ff fd4b 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <RCC_GetSystemClockFreq+0xf6>
 80065dc:	f7ff fd58 	bl	8006090 <LL_RCC_MSI_GetRange>
 80065e0:	4603      	mov	r3, r0
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	e003      	b.n	80065ee <RCC_GetSystemClockFreq+0xfe>
 80065e6:	f7ff fd61 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 80065ea:	4603      	mov	r3, r0
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	4a05      	ldr	r2, [pc, #20]	; (8006604 <RCC_GetSystemClockFreq+0x114>)
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80065f6:	bf00      	nop
  }

  return frequency;
 80065f8:	687b      	ldr	r3, [r7, #4]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	08009560 	.word	0x08009560
 8006608:	00f42400 	.word	0x00f42400
 800660c:	007a1200 	.word	0x007a1200

08006610 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006618:	f7ff fd64 	bl	80060e4 <LL_RCC_GetAHBPrescaler>
 800661c:	4603      	mov	r3, r0
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	4a04      	ldr	r2, [pc, #16]	; (8006638 <RCC_GetHCLKClockFreq+0x28>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	40d3      	lsrs	r3, r2
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	08009548 	.word	0x08009548

0800663c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006644:	f7ff fd5c 	bl	8006100 <LL_RCC_GetAPB1Prescaler>
 8006648:	4603      	mov	r3, r0
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <RCC_GetPCLK1ClockFreq+0x24>)
 800664e:	5cd3      	ldrb	r3, [r2, r3]
 8006650:	461a      	mov	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	40d3      	lsrs	r3, r2
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	08009558 	.word	0x08009558

08006664 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800666c:	f7ff fd56 	bl	800611c <LL_RCC_GetAPB2Prescaler>
 8006670:	4603      	mov	r3, r0
 8006672:	0adb      	lsrs	r3, r3, #11
 8006674:	4a04      	ldr	r2, [pc, #16]	; (8006688 <RCC_GetPCLK2ClockFreq+0x24>)
 8006676:	5cd3      	ldrb	r3, [r2, r3]
 8006678:	461a      	mov	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	40d3      	lsrs	r3, r2
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	08009558 	.word	0x08009558

0800668c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006692:	f7ff fd79 	bl	8006188 <LL_RCC_PLL_GetMainSource>
 8006696:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d036      	beq.n	800670c <RCC_PLL_GetFreqDomain_SYS+0x80>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d836      	bhi.n	8006712 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d003      	beq.n	80066b2 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d02a      	beq.n	8006706 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80066b0:	e02f      	b.n	8006712 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80066b2:	f7ff fcdb 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d111      	bne.n	80066e0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80066bc:	f7ff fcd6 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80066c6:	f7ff fce3 	bl	8006090 <LL_RCC_MSI_GetRange>
 80066ca:	4603      	mov	r3, r0
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	e003      	b.n	80066d8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80066d0:	f7ff fcec 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 80066d4:	4603      	mov	r3, r0
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	4a2f      	ldr	r2, [pc, #188]	; (8006798 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80066da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066de:	e010      	b.n	8006702 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80066e0:	f7ff fcc4 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80066ea:	f7ff fcd1 	bl	8006090 <LL_RCC_MSI_GetRange>
 80066ee:	4603      	mov	r3, r0
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	e003      	b.n	80066fc <RCC_PLL_GetFreqDomain_SYS+0x70>
 80066f4:	f7ff fcda 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 80066f8:	4603      	mov	r3, r0
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	4a26      	ldr	r2, [pc, #152]	; (8006798 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80066fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006702:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006704:	e02f      	b.n	8006766 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006706:	4b25      	ldr	r3, [pc, #148]	; (800679c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006708:	607b      	str	r3, [r7, #4]
      break;
 800670a:	e02c      	b.n	8006766 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800670c:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800670e:	607b      	str	r3, [r7, #4]
      break;
 8006710:	e029      	b.n	8006766 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006712:	f7ff fcab 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d111      	bne.n	8006740 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800671c:	f7ff fca6 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006726:	f7ff fcb3 	bl	8006090 <LL_RCC_MSI_GetRange>
 800672a:	4603      	mov	r3, r0
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	e003      	b.n	8006738 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006730:	f7ff fcbc 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 8006734:	4603      	mov	r3, r0
 8006736:	0a1b      	lsrs	r3, r3, #8
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800673a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673e:	e010      	b.n	8006762 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006740:	f7ff fc94 	bl	800606c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800674a:	f7ff fca1 	bl	8006090 <LL_RCC_MSI_GetRange>
 800674e:	4603      	mov	r3, r0
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	e003      	b.n	800675c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006754:	f7ff fcaa 	bl	80060ac <LL_RCC_MSI_GetRangeAfterStandby>
 8006758:	4603      	mov	r3, r0
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006762:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006764:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006766:	f7ff fd39 	bl	80061dc <LL_RCC_PLL_GetDivider>
 800676a:	4603      	mov	r3, r0
 800676c:	091b      	lsrs	r3, r3, #4
 800676e:	3301      	adds	r3, #1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	fbb2 f4f3 	udiv	r4, r2, r3
 8006776:	f7ff fd15 	bl	80061a4 <LL_RCC_PLL_GetN>
 800677a:	4603      	mov	r3, r0
 800677c:	fb03 f404 	mul.w	r4, r3, r4
 8006780:	f7ff fd1e 	bl	80061c0 <LL_RCC_PLL_GetR>
 8006784:	4603      	mov	r3, r0
 8006786:	0e5b      	lsrs	r3, r3, #25
 8006788:	3301      	adds	r3, #1
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}
 8006798:	08009560 	.word	0x08009560
 800679c:	00f42400 	.word	0x00f42400
 80067a0:	007a1200 	.word	0x007a1200

080067a4 <LL_USART_IsEnabled>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <LL_USART_IsEnabled+0x18>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <LL_USART_IsEnabled+0x1a>
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <LL_USART_SetStopBitsLength>:
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	605a      	str	r2, [r3, #4]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <LL_USART_SetHWFlowCtrl>:
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	609a      	str	r2, [r3, #8]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <LL_USART_SetBaudRate>:
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682a:	d11a      	bne.n	8006862 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	005a      	lsls	r2, r3, #1
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	441a      	add	r2, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	b29b      	uxth	r3, r3
 800683e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006846:	4013      	ands	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	b29b      	uxth	r3, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	60da      	str	r2, [r3, #12]
}
 8006860:	e00a      	b.n	8006878 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	085a      	lsrs	r2, r3, #1
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	441a      	add	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	60da      	str	r2, [r3, #12]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff ff84 	bl	80067a4 <LL_USART_IsEnabled>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d15b      	bne.n	800695a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <LL_USART_Init+0xe0>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	6851      	ldr	r1, [r2, #4]
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	68d2      	ldr	r2, [r2, #12]
 80068b2:	4311      	orrs	r1, r2
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	6912      	ldr	r2, [r2, #16]
 80068b8:	4311      	orrs	r1, r2
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	6992      	ldr	r2, [r2, #24]
 80068be:	430a      	orrs	r2, r1
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff7c 	bl	80067ca <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff ff89 	bl	80067f0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a21      	ldr	r2, [pc, #132]	; (8006968 <LL_USART_Init+0xe4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d104      	bne.n	80068f0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80068e6:	2003      	movs	r0, #3
 80068e8:	f7ff fc86 	bl	80061f8 <LL_RCC_GetUSARTClockFreq>
 80068ec:	60b8      	str	r0, [r7, #8]
 80068ee:	e023      	b.n	8006938 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <LL_USART_Init+0xe8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d104      	bne.n	8006902 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80068f8:	200c      	movs	r0, #12
 80068fa:	f7ff fc7d 	bl	80061f8 <LL_RCC_GetUSARTClockFreq>
 80068fe:	60b8      	str	r0, [r7, #8]
 8006900:	e01a      	b.n	8006938 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <LL_USART_Init+0xec>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d104      	bne.n	8006914 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800690a:	2030      	movs	r0, #48	; 0x30
 800690c:	f7ff fc74 	bl	80061f8 <LL_RCC_GetUSARTClockFreq>
 8006910:	60b8      	str	r0, [r7, #8]
 8006912:	e011      	b.n	8006938 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a17      	ldr	r2, [pc, #92]	; (8006974 <LL_USART_Init+0xf0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d104      	bne.n	8006926 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800691c:	20c0      	movs	r0, #192	; 0xc0
 800691e:	f7ff fd4f 	bl	80063c0 <LL_RCC_GetUARTClockFreq>
 8006922:	60b8      	str	r0, [r7, #8]
 8006924:	e008      	b.n	8006938 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <LL_USART_Init+0xf4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d104      	bne.n	8006938 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800692e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006932:	f7ff fd45 	bl	80063c0 <LL_RCC_GetUARTClockFreq>
 8006936:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff5e 	bl	8006816 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	efff69f3 	.word	0xefff69f3
 8006968:	40013800 	.word	0x40013800
 800696c:	40004400 	.word	0x40004400
 8006970:	40004800 	.word	0x40004800
 8006974:	40004c00 	.word	0x40004c00
 8006978:	40005000 	.word	0x40005000

0800697c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800698a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800698e:	2b84      	cmp	r3, #132	; 0x84
 8006990:	d005      	beq.n	800699e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006992:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	3303      	adds	r3, #3
 800699c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80069b0:	f000 ffde 	bl	8007970 <vTaskStartScheduler>
  
  return osOK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	bd80      	pop	{r7, pc}

080069ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80069ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069bc:	b089      	sub	sp, #36	; 0x24
 80069be:	af04      	add	r7, sp, #16
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d020      	beq.n	8006a0e <osThreadCreate+0x54>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01c      	beq.n	8006a0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685c      	ldr	r4, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681d      	ldr	r5, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691e      	ldr	r6, [r3, #16]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff ffc8 	bl	800697c <makeFreeRtosPriority>
 80069ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069f6:	9202      	str	r2, [sp, #8]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	9100      	str	r1, [sp, #0]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	4632      	mov	r2, r6
 8006a00:	4629      	mov	r1, r5
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fdec 	bl	80075e0 <xTaskCreateStatic>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	e01c      	b.n	8006a48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685c      	ldr	r4, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a1a:	b29e      	uxth	r6, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff ffaa 	bl	800697c <makeFreeRtosPriority>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	f107 030c 	add.w	r3, r7, #12
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	9200      	str	r2, [sp, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	4632      	mov	r2, r6
 8006a36:	4629      	mov	r1, r5
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fe2e 	bl	800769a <xTaskCreate>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d001      	beq.n	8006a48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <osDelay+0x16>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	e000      	b.n	8006a6a <osDelay+0x18>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 ff4c 	bl	8007908 <vTaskDelay>
  
  return osOK;
 8006a70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f103 0208 	add.w	r2, r3, #8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f103 0208 	add.w	r2, r3, #8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f103 0208 	add.w	r2, r3, #8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	601a      	str	r2, [r3, #0]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d103      	bne.n	8006b3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e00c      	b.n	8006b56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e002      	b.n	8006b4a <vListInsert+0x2e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d2f6      	bcs.n	8006b44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6892      	ldr	r2, [r2, #8]
 8006ba4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6852      	ldr	r2, [r2, #4]
 8006bae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d103      	bne.n	8006bc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	1e5a      	subs	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c0e:	f001 fce1 	bl	80085d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c1e:	fb01 f303 	mul.w	r3, r1, r3
 8006c22:	441a      	add	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	68f9      	ldr	r1, [r7, #12]
 8006c42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	441a      	add	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	22ff      	movs	r2, #255	; 0xff
 8006c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d114      	bne.n	8006c8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01a      	beq.n	8006ca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3310      	adds	r3, #16
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f8bf 	bl	8007df4 <xTaskRemoveFromEventList>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d012      	beq.n	8006ca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <xQueueGenericReset+0xcc>)
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	e009      	b.n	8006ca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3310      	adds	r3, #16
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fef1 	bl	8006a7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3324      	adds	r3, #36	; 0x24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff feec 	bl	8006a7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ca2:	f001 fcc7 	bl	8008634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ca6:	2301      	movs	r3, #1
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	e000ed04 	.word	0xe000ed04

08006cb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08a      	sub	sp, #40	; 0x28
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <xQueueGenericCreate+0x2a>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	613b      	str	r3, [r7, #16]
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	3348      	adds	r3, #72	; 0x48
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fd93 	bl	8008818 <pvPortMalloc>
 8006cf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d011      	beq.n	8006d1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	3348      	adds	r3, #72	; 0x48
 8006d02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d0c:	79fa      	ldrb	r2, [r7, #7]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f805 	bl	8006d28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d56:	2101      	movs	r1, #1
 8006d58:	69b8      	ldr	r0, [r7, #24]
 8006d5a:	f7ff ff43 	bl	8006be4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00e      	beq.n	8006d92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d86:	2300      	movs	r3, #0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f81d 	bl	8006dcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	4603      	mov	r3, r0
 8006da2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	461a      	mov	r2, r3
 8006db0:	6939      	ldr	r1, [r7, #16]
 8006db2:	6978      	ldr	r0, [r7, #20]
 8006db4:	f7ff ff7e 	bl	8006cb4 <xQueueGenericCreate>
 8006db8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff ffd3 	bl	8006d66 <prvInitialiseMutex>

		return xNewQueue;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
	}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08e      	sub	sp, #56	; 0x38
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xQueueGenericSend+0x32>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <xQueueGenericSend+0x40>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <xQueueGenericSend+0x44>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <xQueueGenericSend+0x46>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <xQueueGenericSend+0x60>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d103      	bne.n	8006e3a <xQueueGenericSend+0x6e>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <xQueueGenericSend+0x72>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <xQueueGenericSend+0x74>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	623b      	str	r3, [r7, #32]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e5a:	f001 f987 	bl	800816c <xTaskGetSchedulerState>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <xQueueGenericSend+0x9e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <xQueueGenericSend+0xa2>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <xQueueGenericSend+0xa4>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	61fb      	str	r3, [r7, #28]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e8a:	f001 fba3 	bl	80085d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <xQueueGenericSend+0xd4>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d129      	bne.n	8006ef4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea6:	f000 fa8b 	bl	80073c0 <prvCopyDataToQueue>
 8006eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	3324      	adds	r3, #36	; 0x24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 ff9b 	bl	8007df4 <xTaskRemoveFromEventList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d013      	beq.n	8006eec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b3f      	ldr	r3, [pc, #252]	; (8006fc4 <xQueueGenericSend+0x1f8>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	e00a      	b.n	8006eec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006edc:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <xQueueGenericSend+0x1f8>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006eec:	f001 fba2 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e063      	b.n	8006fbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006efa:	f001 fb9b 	bl	8008634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e05c      	b.n	8006fbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 ffd3 	bl	8007eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f16:	f001 fb8d 	bl	8008634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f1a:	f000 fd89 	bl	8007a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f1e:	f001 fb59 	bl	80085d4 <vPortEnterCritical>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d103      	bne.n	8006f38 <xQueueGenericSend+0x16c>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d103      	bne.n	8006f4e <xQueueGenericSend+0x182>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f4e:	f001 fb71 	bl	8008634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f52:	1d3a      	adds	r2, r7, #4
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 ffc2 	bl	8007ee4 <xTaskCheckForTimeOut>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d124      	bne.n	8006fb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f68:	f000 fb22 	bl	80075b0 <prvIsQueueFull>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d018      	beq.n	8006fa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	3310      	adds	r3, #16
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 ff16 	bl	8007dac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f82:	f000 faad 	bl	80074e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f86:	f000 fd61 	bl	8007a4c <xTaskResumeAll>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f47f af7c 	bne.w	8006e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <xQueueGenericSend+0x1f8>)
 8006f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	e772      	b.n	8006e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fa6:	f000 fa9b 	bl	80074e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006faa:	f000 fd4f 	bl	8007a4c <xTaskResumeAll>
 8006fae:	e76c      	b.n	8006e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb2:	f000 fa95 	bl	80074e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fb6:	f000 fd49 	bl	8007a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3738      	adds	r7, #56	; 0x38
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b090      	sub	sp, #64	; 0x40
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <xQueueGenericSendFromISR+0x3c>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <xQueueGenericSendFromISR+0x40>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <xQueueGenericSendFromISR+0x42>
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d103      	bne.n	8007032 <xQueueGenericSendFromISR+0x6a>
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <xQueueGenericSendFromISR+0x6e>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xQueueGenericSendFromISR+0x70>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	623b      	str	r3, [r7, #32]
}
 800704e:	bf00      	nop
 8007050:	e7fe      	b.n	8007050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007052:	f001 fba1 	bl	8008798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007056:	f3ef 8211 	mrs	r2, BASEPRI
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	61fa      	str	r2, [r7, #28]
 800706c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800706e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <xQueueGenericSendFromISR+0xbc>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d12f      	bne.n	80070e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800709a:	f000 f991 	bl	80073c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800709e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d112      	bne.n	80070ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d016      	beq.n	80070de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	3324      	adds	r3, #36	; 0x24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe9d 	bl	8007df4 <xTaskRemoveFromEventList>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00e      	beq.n	80070de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e007      	b.n	80070de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070d2:	3301      	adds	r3, #1
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	b25a      	sxtb	r2, r3
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070de:	2301      	movs	r3, #1
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80070e2:	e001      	b.n	80070e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3740      	adds	r7, #64	; 0x40
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	; 0x30
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800710c:	2300      	movs	r3, #0
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <xQueueReceive+0x30>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	623b      	str	r3, [r7, #32]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <xQueueReceive+0x3e>
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <xQueueReceive+0x42>
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <xQueueReceive+0x44>
 8007142:	2300      	movs	r3, #0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <xQueueReceive+0x5e>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	61fb      	str	r3, [r7, #28]
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800715e:	f001 f805 	bl	800816c <xTaskGetSchedulerState>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <xQueueReceive+0x6e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <xQueueReceive+0x72>
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <xQueueReceive+0x74>
 8007172:	2300      	movs	r3, #0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <xQueueReceive+0x8e>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	61bb      	str	r3, [r7, #24]
}
 800718a:	bf00      	nop
 800718c:	e7fe      	b.n	800718c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800718e:	f001 fa21 	bl	80085d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01f      	beq.n	80071de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a2:	f000 f977 	bl	8007494 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	1e5a      	subs	r2, r3, #1
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00f      	beq.n	80071d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	3310      	adds	r3, #16
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fe1a 	bl	8007df4 <xTaskRemoveFromEventList>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071c6:	4b3d      	ldr	r3, [pc, #244]	; (80072bc <xQueueReceive+0x1bc>)
 80071c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071d6:	f001 fa2d 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 80071da:	2301      	movs	r3, #1
 80071dc:	e069      	b.n	80072b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d103      	bne.n	80071ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071e4:	f001 fa26 	bl	8008634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e062      	b.n	80072b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071f2:	f107 0310 	add.w	r3, r7, #16
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fe5e 	bl	8007eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007200:	f001 fa18 	bl	8008634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007204:	f000 fc14 	bl	8007a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007208:	f001 f9e4 	bl	80085d4 <vPortEnterCritical>
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007212:	b25b      	sxtb	r3, r3
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d103      	bne.n	8007222 <xQueueReceive+0x122>
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007228:	b25b      	sxtb	r3, r3
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722e:	d103      	bne.n	8007238 <xQueueReceive+0x138>
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007238:	f001 f9fc 	bl	8008634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800723c:	1d3a      	adds	r2, r7, #4
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fe4d 	bl	8007ee4 <xTaskCheckForTimeOut>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d123      	bne.n	8007298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007252:	f000 f997 	bl	8007584 <prvIsQueueEmpty>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d017      	beq.n	800728c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	3324      	adds	r3, #36	; 0x24
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fda1 	bl	8007dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800726a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726c:	f000 f938 	bl	80074e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007270:	f000 fbec 	bl	8007a4c <xTaskResumeAll>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d189      	bne.n	800718e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800727a:	4b10      	ldr	r3, [pc, #64]	; (80072bc <xQueueReceive+0x1bc>)
 800727c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	e780      	b.n	800718e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800728c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800728e:	f000 f927 	bl	80074e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007292:	f000 fbdb 	bl	8007a4c <xTaskResumeAll>
 8007296:	e77a      	b.n	800718e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729a:	f000 f921 	bl	80074e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800729e:	f000 fbd5 	bl	8007a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a4:	f000 f96e 	bl	8007584 <prvIsQueueEmpty>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f43f af6f 	beq.w	800718e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3730      	adds	r7, #48	; 0x30
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	; 0x38
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	623b      	str	r3, [r7, #32]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <xQueueReceiveFromISR+0x3a>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <xQueueReceiveFromISR+0x3e>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueReceiveFromISR+0x40>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	61fb      	str	r3, [r7, #28]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800731a:	f001 fa3d 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 800731e:	f3ef 8211 	mrs	r2, BASEPRI
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	61ba      	str	r2, [r7, #24]
 8007334:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007336:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d02f      	beq.n	80073a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800734c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007354:	f000 f89e 	bl	8007494 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	1e5a      	subs	r2, r3, #1
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007360:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d112      	bne.n	8007390 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	3310      	adds	r3, #16
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fd3c 	bl	8007df4 <xTaskRemoveFromEventList>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e007      	b.n	80073a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007394:	3301      	adds	r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	b25a      	sxtb	r2, r3
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80073a0:	2301      	movs	r3, #1
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
 80073a4:	e001      	b.n	80073aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f383 8811 	msr	BASEPRI, r3
}
 80073b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3738      	adds	r7, #56	; 0x38
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10d      	bne.n	80073fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d14d      	bne.n	8007482 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fedc 	bl	80081a8 <xTaskPriorityDisinherit>
 80073f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	e043      	b.n	8007482 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d119      	bne.n	8007434 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6858      	ldr	r0, [r3, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007408:	461a      	mov	r2, r3
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	f001 fc18 	bl	8008c40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	441a      	add	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	429a      	cmp	r2, r3
 8007428:	d32b      	bcc.n	8007482 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	e026      	b.n	8007482 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68d8      	ldr	r0, [r3, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	461a      	mov	r2, r3
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	f001 fbfe 	bl	8008c40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	425b      	negs	r3, r3
 800744e:	441a      	add	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d207      	bcs.n	8007470 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	425b      	negs	r3, r3
 800746a:	441a      	add	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d105      	bne.n	8007482 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3b01      	subs	r3, #1
 8007480:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800748a:	697b      	ldr	r3, [r7, #20]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d018      	beq.n	80074d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	441a      	add	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d303      	bcc.n	80074c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68d9      	ldr	r1, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	461a      	mov	r2, r3
 80074d2:	6838      	ldr	r0, [r7, #0]
 80074d4:	f001 fbb4 	bl	8008c40 <memcpy>
	}
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074e8:	f001 f874 	bl	80085d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074f4:	e011      	b.n	800751a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d012      	beq.n	8007524 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3324      	adds	r3, #36	; 0x24
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fc76 	bl	8007df4 <xTaskRemoveFromEventList>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800750e:	f000 fd4b 	bl	8007fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	3b01      	subs	r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800751a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	dce9      	bgt.n	80074f6 <prvUnlockQueue+0x16>
 8007522:	e000      	b.n	8007526 <prvUnlockQueue+0x46>
					break;
 8007524:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	22ff      	movs	r2, #255	; 0xff
 800752a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800752e:	f001 f881 	bl	8008634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007532:	f001 f84f 	bl	80085d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800753c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800753e:	e011      	b.n	8007564 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d012      	beq.n	800756e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3310      	adds	r3, #16
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fc51 	bl	8007df4 <xTaskRemoveFromEventList>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007558:	f000 fd26 	bl	8007fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	3b01      	subs	r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	dce9      	bgt.n	8007540 <prvUnlockQueue+0x60>
 800756c:	e000      	b.n	8007570 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800756e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	22ff      	movs	r2, #255	; 0xff
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007578:	f001 f85c 	bl	8008634 <vPortExitCritical>
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800758c:	f001 f822 	bl	80085d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e001      	b.n	80075a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075a2:	f001 f847 	bl	8008634 <vPortExitCritical>

	return xReturn;
 80075a6:	68fb      	ldr	r3, [r7, #12]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075b8:	f001 f80c 	bl	80085d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d102      	bne.n	80075ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e001      	b.n	80075d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075d2:	f001 f82f 	bl	8008634 <vPortExitCritical>

	return xReturn;
 80075d6:	68fb      	ldr	r3, [r7, #12]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08e      	sub	sp, #56	; 0x38
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xTaskCreateStatic+0x2a>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	623b      	str	r3, [r7, #32]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskCreateStatic+0x46>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61fb      	str	r3, [r7, #28]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007626:	2354      	movs	r3, #84	; 0x54
 8007628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b54      	cmp	r3, #84	; 0x54
 800762e:	d00a      	beq.n	8007646 <xTaskCreateStatic+0x66>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	61bb      	str	r3, [r7, #24]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007646:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01e      	beq.n	800768c <xTaskCreateStatic+0xac>
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01b      	beq.n	800768c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800765c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	2202      	movs	r2, #2
 8007662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007666:	2300      	movs	r3, #0
 8007668:	9303      	str	r3, [sp, #12]
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	9302      	str	r3, [sp, #8]
 800766e:	f107 0314 	add.w	r3, r7, #20
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f850 	bl	8007724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007686:	f000 f8d5 	bl	8007834 <prvAddNewTaskToReadyList>
 800768a:	e001      	b.n	8007690 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007690:	697b      	ldr	r3, [r7, #20]
	}
 8007692:	4618      	mov	r0, r3
 8007694:	3728      	adds	r7, #40	; 0x28
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800769a:	b580      	push	{r7, lr}
 800769c:	b08c      	sub	sp, #48	; 0x30
 800769e:	af04      	add	r7, sp, #16
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 f8b2 	bl	8008818 <pvPortMalloc>
 80076b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076bc:	2054      	movs	r0, #84	; 0x54
 80076be:	f001 f8ab 	bl	8008818 <pvPortMalloc>
 80076c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
 80076d0:	e005      	b.n	80076de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076d2:	6978      	ldr	r0, [r7, #20]
 80076d4:	f001 f96c 	bl	80089b0 <vPortFree>
 80076d8:	e001      	b.n	80076de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d017      	beq.n	8007714 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	2300      	movs	r3, #0
 80076f0:	9303      	str	r3, [sp, #12]
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	9302      	str	r3, [sp, #8]
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f80e 	bl	8007724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007708:	69f8      	ldr	r0, [r7, #28]
 800770a:	f000 f893 	bl	8007834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800770e:	2301      	movs	r3, #1
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	e002      	b.n	800771a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007714:	f04f 33ff 	mov.w	r3, #4294967295
 8007718:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800771a:	69bb      	ldr	r3, [r7, #24]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800773c:	3b01      	subs	r3, #1
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f023 0307 	bic.w	r3, r3, #7
 800774a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	617b      	str	r3, [r7, #20]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01f      	beq.n	80077b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e012      	b.n	800779e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	7819      	ldrb	r1, [r3, #0]
 8007780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	3334      	adds	r3, #52	; 0x34
 8007788:	460a      	mov	r2, r1
 800778a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	3301      	adds	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2b0f      	cmp	r3, #15
 80077a2:	d9e9      	bls.n	8007778 <prvInitialiseNewTask+0x54>
 80077a4:	e000      	b.n	80077a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80077a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077b0:	e003      	b.n	80077ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	2b06      	cmp	r3, #6
 80077be:	d901      	bls.n	80077c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077c0:	2306      	movs	r3, #6
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	2200      	movs	r2, #0
 80077d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	3304      	adds	r3, #4
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff f96d 	bl	8006aba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	3318      	adds	r3, #24
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff f968 	bl	8006aba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	f1c3 0207 	rsb	r2, r3, #7
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68f9      	ldr	r1, [r7, #12]
 8007812:	69b8      	ldr	r0, [r7, #24]
 8007814:	f000 fdb4 	bl	8008380 <pxPortInitialiseStack>
 8007818:	4602      	mov	r2, r0
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800782a:	bf00      	nop
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800783c:	f000 feca 	bl	80085d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007840:	4b2a      	ldr	r3, [pc, #168]	; (80078ec <prvAddNewTaskToReadyList+0xb8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	4a29      	ldr	r2, [pc, #164]	; (80078ec <prvAddNewTaskToReadyList+0xb8>)
 8007848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800784a:	4b29      	ldr	r3, [pc, #164]	; (80078f0 <prvAddNewTaskToReadyList+0xbc>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007852:	4a27      	ldr	r2, [pc, #156]	; (80078f0 <prvAddNewTaskToReadyList+0xbc>)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007858:	4b24      	ldr	r3, [pc, #144]	; (80078ec <prvAddNewTaskToReadyList+0xb8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d110      	bne.n	8007882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007860:	f000 fbc6 	bl	8007ff0 <prvInitialiseTaskLists>
 8007864:	e00d      	b.n	8007882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007866:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <prvAddNewTaskToReadyList+0xc0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800786e:	4b20      	ldr	r3, [pc, #128]	; (80078f0 <prvAddNewTaskToReadyList+0xbc>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	429a      	cmp	r2, r3
 800787a:	d802      	bhi.n	8007882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <prvAddNewTaskToReadyList+0xbc>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007882:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <prvAddNewTaskToReadyList+0xc4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <prvAddNewTaskToReadyList+0xc4>)
 800788a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	2201      	movs	r2, #1
 8007892:	409a      	lsls	r2, r3
 8007894:	4b19      	ldr	r3, [pc, #100]	; (80078fc <prvAddNewTaskToReadyList+0xc8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4313      	orrs	r3, r2
 800789a:	4a18      	ldr	r2, [pc, #96]	; (80078fc <prvAddNewTaskToReadyList+0xc8>)
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4a15      	ldr	r2, [pc, #84]	; (8007900 <prvAddNewTaskToReadyList+0xcc>)
 80078ac:	441a      	add	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7ff f90d 	bl	8006ad4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078ba:	f000 febb 	bl	8008634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078be:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <prvAddNewTaskToReadyList+0xc0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00e      	beq.n	80078e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvAddNewTaskToReadyList+0xbc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d207      	bcs.n	80078e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <prvAddNewTaskToReadyList+0xd0>)
 80078d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	200003f0 	.word	0x200003f0
 80078f0:	200002f0 	.word	0x200002f0
 80078f4:	200003fc 	.word	0x200003fc
 80078f8:	2000040c 	.word	0x2000040c
 80078fc:	200003f8 	.word	0x200003f8
 8007900:	200002f4 	.word	0x200002f4
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d017      	beq.n	800794a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <vTaskDelay+0x60>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <vTaskDelay+0x30>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60bb      	str	r3, [r7, #8]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007938:	f000 f87a 	bl	8007a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fcb8 	bl	80082b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007944:	f000 f882 	bl	8007a4c <xTaskResumeAll>
 8007948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d107      	bne.n	8007960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <vTaskDelay+0x64>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000418 	.word	0x20000418
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800797e:	463a      	mov	r2, r7
 8007980:	1d39      	adds	r1, r7, #4
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4618      	mov	r0, r3
 8007988:	f7f8 fdee 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	9202      	str	r2, [sp, #8]
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2300      	movs	r3, #0
 800799c:	460a      	mov	r2, r1
 800799e:	491e      	ldr	r1, [pc, #120]	; (8007a18 <vTaskStartScheduler+0xa8>)
 80079a0:	481e      	ldr	r0, [pc, #120]	; (8007a1c <vTaskStartScheduler+0xac>)
 80079a2:	f7ff fe1d 	bl	80075e0 <xTaskCreateStatic>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <vTaskStartScheduler+0xb0>)
 80079aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079ac:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <vTaskStartScheduler+0xb0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079b4:	2301      	movs	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e001      	b.n	80079be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d116      	bne.n	80079f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	613b      	str	r3, [r7, #16]
}
 80079d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <vTaskStartScheduler+0xb4>)
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <vTaskStartScheduler+0xb8>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079e6:	4b11      	ldr	r3, [pc, #68]	; (8007a2c <vTaskStartScheduler+0xbc>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079ec:	f000 fd50 	bl	8008490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079f0:	e00e      	b.n	8007a10 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d10a      	bne.n	8007a10 <vTaskStartScheduler+0xa0>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60fb      	str	r3, [r7, #12]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <vTaskStartScheduler+0x9e>
}
 8007a10:	bf00      	nop
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	08009538 	.word	0x08009538
 8007a1c:	08007fc1 	.word	0x08007fc1
 8007a20:	20000414 	.word	0x20000414
 8007a24:	20000410 	.word	0x20000410
 8007a28:	200003fc 	.word	0x200003fc
 8007a2c:	200003f4 	.word	0x200003f4

08007a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <vTaskSuspendAll+0x18>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	4a03      	ldr	r2, [pc, #12]	; (8007a48 <vTaskSuspendAll+0x18>)
 8007a3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	20000418 	.word	0x20000418

08007a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a5a:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <xTaskResumeAll+0x114>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <xTaskResumeAll+0x2c>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	603b      	str	r3, [r7, #0]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a78:	f000 fdac 	bl	80085d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a7c:	4b38      	ldr	r3, [pc, #224]	; (8007b60 <xTaskResumeAll+0x114>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	4a37      	ldr	r2, [pc, #220]	; (8007b60 <xTaskResumeAll+0x114>)
 8007a84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a86:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <xTaskResumeAll+0x114>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d161      	bne.n	8007b52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a8e:	4b35      	ldr	r3, [pc, #212]	; (8007b64 <xTaskResumeAll+0x118>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d05d      	beq.n	8007b52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a96:	e02e      	b.n	8007af6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a98:	4b33      	ldr	r3, [pc, #204]	; (8007b68 <xTaskResumeAll+0x11c>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3318      	adds	r3, #24
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff f872 	bl	8006b8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff f86d 	bl	8006b8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	2201      	movs	r2, #1
 8007aba:	409a      	lsls	r2, r3
 8007abc:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <xTaskResumeAll+0x120>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <xTaskResumeAll+0x120>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <xTaskResumeAll+0x124>)
 8007ad4:	441a      	add	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fe fff9 	bl	8006ad4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <xTaskResumeAll+0x128>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d302      	bcc.n	8007af6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007af0:	4b21      	ldr	r3, [pc, #132]	; (8007b78 <xTaskResumeAll+0x12c>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af6:	4b1c      	ldr	r3, [pc, #112]	; (8007b68 <xTaskResumeAll+0x11c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1cc      	bne.n	8007a98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b04:	f000 fb12 	bl	800812c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b08:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <xTaskResumeAll+0x130>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d010      	beq.n	8007b36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b14:	f000 f836 	bl	8007b84 <xTaskIncrementTick>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b1e:	4b16      	ldr	r3, [pc, #88]	; (8007b78 <xTaskResumeAll+0x12c>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f1      	bne.n	8007b14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b30:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <xTaskResumeAll+0x130>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b36:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <xTaskResumeAll+0x12c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <xTaskResumeAll+0x134>)
 8007b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b52:	f000 fd6f 	bl	8008634 <vPortExitCritical>

	return xAlreadyYielded;
 8007b56:	68bb      	ldr	r3, [r7, #8]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000418 	.word	0x20000418
 8007b64:	200003f0 	.word	0x200003f0
 8007b68:	200003b0 	.word	0x200003b0
 8007b6c:	200003f8 	.word	0x200003f8
 8007b70:	200002f4 	.word	0x200002f4
 8007b74:	200002f0 	.word	0x200002f0
 8007b78:	20000404 	.word	0x20000404
 8007b7c:	20000400 	.word	0x20000400
 8007b80:	e000ed04 	.word	0xe000ed04

08007b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b8e:	4b4e      	ldr	r3, [pc, #312]	; (8007cc8 <xTaskIncrementTick+0x144>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 808e 	bne.w	8007cb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b98:	4b4c      	ldr	r3, [pc, #304]	; (8007ccc <xTaskIncrementTick+0x148>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ba0:	4a4a      	ldr	r2, [pc, #296]	; (8007ccc <xTaskIncrementTick+0x148>)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d120      	bne.n	8007bee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bac:	4b48      	ldr	r3, [pc, #288]	; (8007cd0 <xTaskIncrementTick+0x14c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <xTaskIncrementTick+0x48>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	603b      	str	r3, [r7, #0]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <xTaskIncrementTick+0x46>
 8007bcc:	4b40      	ldr	r3, [pc, #256]	; (8007cd0 <xTaskIncrementTick+0x14c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	4b40      	ldr	r3, [pc, #256]	; (8007cd4 <xTaskIncrementTick+0x150>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a3e      	ldr	r2, [pc, #248]	; (8007cd0 <xTaskIncrementTick+0x14c>)
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	4a3e      	ldr	r2, [pc, #248]	; (8007cd4 <xTaskIncrementTick+0x150>)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	4b3d      	ldr	r3, [pc, #244]	; (8007cd8 <xTaskIncrementTick+0x154>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3301      	adds	r3, #1
 8007be6:	4a3c      	ldr	r2, [pc, #240]	; (8007cd8 <xTaskIncrementTick+0x154>)
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	f000 fa9f 	bl	800812c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bee:	4b3b      	ldr	r3, [pc, #236]	; (8007cdc <xTaskIncrementTick+0x158>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d348      	bcc.n	8007c8a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bf8:	4b35      	ldr	r3, [pc, #212]	; (8007cd0 <xTaskIncrementTick+0x14c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c02:	4b36      	ldr	r3, [pc, #216]	; (8007cdc <xTaskIncrementTick+0x158>)
 8007c04:	f04f 32ff 	mov.w	r2, #4294967295
 8007c08:	601a      	str	r2, [r3, #0]
					break;
 8007c0a:	e03e      	b.n	8007c8a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c0c:	4b30      	ldr	r3, [pc, #192]	; (8007cd0 <xTaskIncrementTick+0x14c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d203      	bcs.n	8007c2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c24:	4a2d      	ldr	r2, [pc, #180]	; (8007cdc <xTaskIncrementTick+0x158>)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c2a:	e02e      	b.n	8007c8a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe ffac 	bl	8006b8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3318      	adds	r3, #24
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe ffa3 	bl	8006b8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	4b23      	ldr	r3, [pc, #140]	; (8007ce0 <xTaskIncrementTick+0x15c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <xTaskIncrementTick+0x15c>)
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <xTaskIncrementTick+0x160>)
 8007c68:	441a      	add	r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f7fe ff2f 	bl	8006ad4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <xTaskIncrementTick+0x164>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3b9      	bcc.n	8007bf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c84:	2301      	movs	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c88:	e7b6      	b.n	8007bf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c8a:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <xTaskIncrementTick+0x164>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c90:	4914      	ldr	r1, [pc, #80]	; (8007ce4 <xTaskIncrementTick+0x160>)
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d901      	bls.n	8007ca6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <xTaskIncrementTick+0x168>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	e004      	b.n	8007cbe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <xTaskIncrementTick+0x16c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	4a0d      	ldr	r2, [pc, #52]	; (8007cf0 <xTaskIncrementTick+0x16c>)
 8007cbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cbe:	697b      	ldr	r3, [r7, #20]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000418 	.word	0x20000418
 8007ccc:	200003f4 	.word	0x200003f4
 8007cd0:	200003a8 	.word	0x200003a8
 8007cd4:	200003ac 	.word	0x200003ac
 8007cd8:	20000408 	.word	0x20000408
 8007cdc:	20000410 	.word	0x20000410
 8007ce0:	200003f8 	.word	0x200003f8
 8007ce4:	200002f4 	.word	0x200002f4
 8007ce8:	200002f0 	.word	0x200002f0
 8007cec:	20000404 	.word	0x20000404
 8007cf0:	20000400 	.word	0x20000400

08007cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cfa:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <vTaskSwitchContext+0xa4>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d02:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <vTaskSwitchContext+0xa8>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d08:	e03f      	b.n	8007d8a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007d0a:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <vTaskSwitchContext+0xa8>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d10:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <vTaskSwitchContext+0xac>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	fab3 f383 	clz	r3, r3
 8007d1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	f1c3 031f 	rsb	r3, r3, #31
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	491f      	ldr	r1, [pc, #124]	; (8007da4 <vTaskSwitchContext+0xb0>)
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	607b      	str	r3, [r7, #4]
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <vTaskSwitchContext+0x5a>
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4a12      	ldr	r2, [pc, #72]	; (8007da4 <vTaskSwitchContext+0xb0>)
 8007d5c:	4413      	add	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	605a      	str	r2, [r3, #4]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3308      	adds	r3, #8
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d104      	bne.n	8007d80 <vTaskSwitchContext+0x8c>
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	605a      	str	r2, [r3, #4]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <vTaskSwitchContext+0xb4>)
 8007d88:	6013      	str	r3, [r2, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000418 	.word	0x20000418
 8007d9c:	20000404 	.word	0x20000404
 8007da0:	200003f8 	.word	0x200003f8
 8007da4:	200002f4 	.word	0x200002f4
 8007da8:	200002f0 	.word	0x200002f0

08007dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <vTaskPlaceOnEventList+0x44>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3318      	adds	r3, #24
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fe fe9e 	bl	8006b1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007de0:	2101      	movs	r1, #1
 8007de2:	6838      	ldr	r0, [r7, #0]
 8007de4:	f000 fa66 	bl	80082b4 <prvAddCurrentTaskToDelayedList>
}
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	200002f0 	.word	0x200002f0

08007df4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	60fb      	str	r3, [r7, #12]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3318      	adds	r3, #24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe feb2 	bl	8006b8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <xTaskRemoveFromEventList+0xac>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d11c      	bne.n	8007e6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fea9 	bl	8006b8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <xTaskRemoveFromEventList+0xb0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	4a16      	ldr	r2, [pc, #88]	; (8007ea4 <xTaskRemoveFromEventList+0xb0>)
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <xTaskRemoveFromEventList+0xb4>)
 8007e5c:	441a      	add	r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7fe fe35 	bl	8006ad4 <vListInsertEnd>
 8007e6a:	e005      	b.n	8007e78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	3318      	adds	r3, #24
 8007e70:	4619      	mov	r1, r3
 8007e72:	480e      	ldr	r0, [pc, #56]	; (8007eac <xTaskRemoveFromEventList+0xb8>)
 8007e74:	f7fe fe2e 	bl	8006ad4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <xTaskRemoveFromEventList+0xbc>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d905      	bls.n	8007e92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <xTaskRemoveFromEventList+0xc0>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	e001      	b.n	8007e96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e96:	697b      	ldr	r3, [r7, #20]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000418 	.word	0x20000418
 8007ea4:	200003f8 	.word	0x200003f8
 8007ea8:	200002f4 	.word	0x200002f4
 8007eac:	200003b0 	.word	0x200003b0
 8007eb0:	200002f0 	.word	0x200002f0
 8007eb4:	20000404 	.word	0x20000404

08007eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <vTaskInternalSetTimeOutState+0x24>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <vTaskInternalSetTimeOutState+0x28>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	20000408 	.word	0x20000408
 8007ee0:	200003f4 	.word	0x200003f4

08007ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f26:	f000 fb55 	bl	80085d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <xTaskCheckForTimeOut+0xbc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d102      	bne.n	8007f4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61fb      	str	r3, [r7, #28]
 8007f48:	e023      	b.n	8007f92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <xTaskCheckForTimeOut+0xc0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d007      	beq.n	8007f66 <xTaskCheckForTimeOut+0x82>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e015      	b.n	8007f92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d20b      	bcs.n	8007f88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ff9b 	bl	8007eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e004      	b.n	8007f92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f92:	f000 fb4f 	bl	8008634 <vPortExitCritical>

	return xReturn;
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	200003f4 	.word	0x200003f4
 8007fa4:	20000408 	.word	0x20000408

08007fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fac:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <vTaskMissedYield+0x14>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	20000404 	.word	0x20000404

08007fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fc8:	f000 f852 	bl	8008070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <prvIdleTask+0x28>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d9f9      	bls.n	8007fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <prvIdleTask+0x2c>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fe4:	e7f0      	b.n	8007fc8 <prvIdleTask+0x8>
 8007fe6:	bf00      	nop
 8007fe8:	200002f4 	.word	0x200002f4
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	e00c      	b.n	8008016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a12      	ldr	r2, [pc, #72]	; (8008050 <prvInitialiseTaskLists+0x60>)
 8008008:	4413      	add	r3, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fd35 	bl	8006a7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3301      	adds	r3, #1
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b06      	cmp	r3, #6
 800801a:	d9ef      	bls.n	8007ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800801c:	480d      	ldr	r0, [pc, #52]	; (8008054 <prvInitialiseTaskLists+0x64>)
 800801e:	f7fe fd2c 	bl	8006a7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008022:	480d      	ldr	r0, [pc, #52]	; (8008058 <prvInitialiseTaskLists+0x68>)
 8008024:	f7fe fd29 	bl	8006a7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008028:	480c      	ldr	r0, [pc, #48]	; (800805c <prvInitialiseTaskLists+0x6c>)
 800802a:	f7fe fd26 	bl	8006a7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800802e:	480c      	ldr	r0, [pc, #48]	; (8008060 <prvInitialiseTaskLists+0x70>)
 8008030:	f7fe fd23 	bl	8006a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008034:	480b      	ldr	r0, [pc, #44]	; (8008064 <prvInitialiseTaskLists+0x74>)
 8008036:	f7fe fd20 	bl	8006a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <prvInitialiseTaskLists+0x78>)
 800803c:	4a05      	ldr	r2, [pc, #20]	; (8008054 <prvInitialiseTaskLists+0x64>)
 800803e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <prvInitialiseTaskLists+0x7c>)
 8008042:	4a05      	ldr	r2, [pc, #20]	; (8008058 <prvInitialiseTaskLists+0x68>)
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	200002f4 	.word	0x200002f4
 8008054:	20000380 	.word	0x20000380
 8008058:	20000394 	.word	0x20000394
 800805c:	200003b0 	.word	0x200003b0
 8008060:	200003c4 	.word	0x200003c4
 8008064:	200003dc 	.word	0x200003dc
 8008068:	200003a8 	.word	0x200003a8
 800806c:	200003ac 	.word	0x200003ac

08008070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008076:	e019      	b.n	80080ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008078:	f000 faac 	bl	80085d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <prvCheckTasksWaitingTermination+0x50>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd80 	bl	8006b8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800808e:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <prvCheckTasksWaitingTermination+0x54>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3b01      	subs	r3, #1
 8008094:	4a0b      	ldr	r2, [pc, #44]	; (80080c4 <prvCheckTasksWaitingTermination+0x54>)
 8008096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3b01      	subs	r3, #1
 800809e:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 80080a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080a2:	f000 fac7 	bl	8008634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f810 	bl	80080cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e1      	bne.n	8008078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	200003c4 	.word	0x200003c4
 80080c4:	200003f0 	.word	0x200003f0
 80080c8:	200003d8 	.word	0x200003d8

080080cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d108      	bne.n	80080f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fc64 	bl	80089b0 <vPortFree>
				vPortFree( pxTCB );
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fc61 	bl	80089b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080ee:	e018      	b.n	8008122 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d103      	bne.n	8008102 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fc58 	bl	80089b0 <vPortFree>
	}
 8008100:	e00f      	b.n	8008122 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008108:	2b02      	cmp	r3, #2
 800810a:	d00a      	beq.n	8008122 <prvDeleteTCB+0x56>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <prvDeleteTCB+0x54>
	}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <prvResetNextTaskUnblockTime+0x38>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <prvResetNextTaskUnblockTime+0x3c>)
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008144:	e008      	b.n	8008158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008146:	4b07      	ldr	r3, [pc, #28]	; (8008164 <prvResetNextTaskUnblockTime+0x38>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a04      	ldr	r2, [pc, #16]	; (8008168 <prvResetNextTaskUnblockTime+0x3c>)
 8008156:	6013      	str	r3, [r2, #0]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	200003a8 	.word	0x200003a8
 8008168:	20000410 	.word	0x20000410

0800816c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <xTaskGetSchedulerState+0x34>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800817a:	2301      	movs	r3, #1
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	e008      	b.n	8008192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008180:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <xTaskGetSchedulerState+0x38>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008188:	2302      	movs	r3, #2
 800818a:	607b      	str	r3, [r7, #4]
 800818c:	e001      	b.n	8008192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800818e:	2300      	movs	r3, #0
 8008190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008192:	687b      	ldr	r3, [r7, #4]
	}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	200003fc 	.word	0x200003fc
 80081a4:	20000418 	.word	0x20000418

080081a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d06e      	beq.n	800829c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081be:	4b3a      	ldr	r3, [pc, #232]	; (80082a8 <xTaskPriorityDisinherit+0x100>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d00a      	beq.n	80081de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	60bb      	str	r3, [r7, #8]
}
 80081f8:	bf00      	nop
 80081fa:	e7fe      	b.n	80081fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008200:	1e5a      	subs	r2, r3, #1
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820e:	429a      	cmp	r2, r3
 8008210:	d044      	beq.n	800829c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008216:	2b00      	cmp	r3, #0
 8008218:	d140      	bne.n	800829c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	3304      	adds	r3, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fcb5 	bl	8006b8e <uxListRemove>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d115      	bne.n	8008256 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	491f      	ldr	r1, [pc, #124]	; (80082ac <xTaskPriorityDisinherit+0x104>)
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xTaskPriorityDisinherit+0xae>
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	2201      	movs	r2, #1
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43da      	mvns	r2, r3
 800824c:	4b18      	ldr	r3, [pc, #96]	; (80082b0 <xTaskPriorityDisinherit+0x108>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4013      	ands	r3, r2
 8008252:	4a17      	ldr	r2, [pc, #92]	; (80082b0 <xTaskPriorityDisinherit+0x108>)
 8008254:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f1c3 0207 	rsb	r2, r3, #7
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	2201      	movs	r2, #1
 8008270:	409a      	lsls	r2, r3
 8008272:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <xTaskPriorityDisinherit+0x108>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4313      	orrs	r3, r2
 8008278:	4a0d      	ldr	r2, [pc, #52]	; (80082b0 <xTaskPriorityDisinherit+0x108>)
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4a08      	ldr	r2, [pc, #32]	; (80082ac <xTaskPriorityDisinherit+0x104>)
 800828a:	441a      	add	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fe fc1e 	bl	8006ad4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800829c:	697b      	ldr	r3, [r7, #20]
	}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	200002f0 	.word	0x200002f0
 80082ac:	200002f4 	.word	0x200002f4
 80082b0:	200003f8 	.word	0x200003f8

080082b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082be:	4b29      	ldr	r3, [pc, #164]	; (8008364 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fc5f 	bl	8006b8e <uxListRemove>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	2201      	movs	r2, #1
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43da      	mvns	r2, r3
 80082e4:	4b21      	ldr	r3, [pc, #132]	; (800836c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4013      	ands	r3, r2
 80082ea:	4a20      	ldr	r2, [pc, #128]	; (800836c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d10a      	bne.n	800830c <prvAddCurrentTaskToDelayedList+0x58>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	481a      	ldr	r0, [pc, #104]	; (8008370 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008306:	f7fe fbe5 	bl	8006ad4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800830a:	e026      	b.n	800835a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d209      	bcs.n	8008338 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3304      	adds	r3, #4
 800832e:	4619      	mov	r1, r3
 8008330:	4610      	mov	r0, r2
 8008332:	f7fe fbf3 	bl	8006b1c <vListInsert>
}
 8008336:	e010      	b.n	800835a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <prvAddCurrentTaskToDelayedList+0xc4>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7fe fbe9 	bl	8006b1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <prvAddCurrentTaskToDelayedList+0xc8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	429a      	cmp	r2, r3
 8008352:	d202      	bcs.n	800835a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008354:	4a09      	ldr	r2, [pc, #36]	; (800837c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6013      	str	r3, [r2, #0]
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	200003f4 	.word	0x200003f4
 8008368:	200002f0 	.word	0x200002f0
 800836c:	200003f8 	.word	0x200003f8
 8008370:	200003dc 	.word	0x200003dc
 8008374:	200003ac 	.word	0x200003ac
 8008378:	200003a8 	.word	0x200003a8
 800837c:	20000410 	.word	0x20000410

08008380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b04      	subs	r3, #4
 8008390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3b04      	subs	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083b0:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <pxPortInitialiseStack+0x64>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b14      	subs	r3, #20
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f06f 0202 	mvn.w	r2, #2
 80083ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3b20      	subs	r3, #32
 80083d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	080083e9 	.word	0x080083e9

080083e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <prvTaskExitError+0x54>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d00a      	beq.n	8008412 <prvTaskExitError+0x2a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	60fb      	str	r3, [r7, #12]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <prvTaskExitError+0x28>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60bb      	str	r3, [r7, #8]
}
 8008424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008426:	bf00      	nop
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0fc      	beq.n	8008428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	2000000c 	.word	0x2000000c

08008440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008468:	4808      	ldr	r0, [pc, #32]	; (800848c <prvPortStartFirstTask+0x24>)
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f380 8808 	msr	MSP, r0
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8814 	msr	CONTROL, r0
 800847a:	b662      	cpsie	i
 800847c:	b661      	cpsie	f
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	df00      	svc	0
 8008488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800848a:	bf00      	nop
 800848c:	e000ed08 	.word	0xe000ed08

08008490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008496:	4b46      	ldr	r3, [pc, #280]	; (80085b0 <xPortStartScheduler+0x120>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a46      	ldr	r2, [pc, #280]	; (80085b4 <xPortStartScheduler+0x124>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10a      	bne.n	80084b6 <xPortStartScheduler+0x26>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	613b      	str	r3, [r7, #16]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084b6:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <xPortStartScheduler+0x120>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a3f      	ldr	r2, [pc, #252]	; (80085b8 <xPortStartScheduler+0x128>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10a      	bne.n	80084d6 <xPortStartScheduler+0x46>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084d6:	4b39      	ldr	r3, [pc, #228]	; (80085bc <xPortStartScheduler+0x12c>)
 80084d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <xPortStartScheduler+0x130>)
 80084fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084fe:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <xPortStartScheduler+0x134>)
 8008500:	2207      	movs	r2, #7
 8008502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008504:	e009      	b.n	800851a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008506:	4b2f      	ldr	r3, [pc, #188]	; (80085c4 <xPortStartScheduler+0x134>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3b01      	subs	r3, #1
 800850c:	4a2d      	ldr	r2, [pc, #180]	; (80085c4 <xPortStartScheduler+0x134>)
 800850e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d0ef      	beq.n	8008506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008526:	4b27      	ldr	r3, [pc, #156]	; (80085c4 <xPortStartScheduler+0x134>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f1c3 0307 	rsb	r3, r3, #7
 800852e:	2b04      	cmp	r3, #4
 8008530:	d00a      	beq.n	8008548 <xPortStartScheduler+0xb8>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <xPortStartScheduler+0x134>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	021b      	lsls	r3, r3, #8
 800854e:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <xPortStartScheduler+0x134>)
 8008550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <xPortStartScheduler+0x134>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <xPortStartScheduler+0x134>)
 800855c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008566:	4b18      	ldr	r3, [pc, #96]	; (80085c8 <xPortStartScheduler+0x138>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <xPortStartScheduler+0x138>)
 800856c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <xPortStartScheduler+0x138>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a14      	ldr	r2, [pc, #80]	; (80085c8 <xPortStartScheduler+0x138>)
 8008578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800857c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800857e:	f000 f8dd 	bl	800873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008582:	4b12      	ldr	r3, [pc, #72]	; (80085cc <xPortStartScheduler+0x13c>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008588:	f000 f8fc 	bl	8008784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800858c:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <xPortStartScheduler+0x140>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0f      	ldr	r2, [pc, #60]	; (80085d0 <xPortStartScheduler+0x140>)
 8008592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008598:	f7ff ff66 	bl	8008468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800859c:	f7ff fbaa 	bl	8007cf4 <vTaskSwitchContext>
	prvTaskExitError();
 80085a0:	f7ff ff22 	bl	80083e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000ed00 	.word	0xe000ed00
 80085b4:	410fc271 	.word	0x410fc271
 80085b8:	410fc270 	.word	0x410fc270
 80085bc:	e000e400 	.word	0xe000e400
 80085c0:	2000041c 	.word	0x2000041c
 80085c4:	20000420 	.word	0x20000420
 80085c8:	e000ed20 	.word	0xe000ed20
 80085cc:	2000000c 	.word	0x2000000c
 80085d0:	e000ef34 	.word	0xe000ef34

080085d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	607b      	str	r3, [r7, #4]
}
 80085ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <vPortEnterCritical+0x58>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <vPortEnterCritical+0x58>)
 80085f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <vPortEnterCritical+0x58>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d10f      	bne.n	8008620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <vPortEnterCritical+0x5c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <vPortEnterCritical+0x4c>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	603b      	str	r3, [r7, #0]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <vPortEnterCritical+0x4a>
	}
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	2000000c 	.word	0x2000000c
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <vPortExitCritical+0x50>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <vPortExitCritical+0x24>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	607b      	str	r3, [r7, #4]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <vPortExitCritical+0x50>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <vPortExitCritical+0x50>)
 8008660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d105      	bne.n	8008676 <vPortExitCritical+0x42>
 800866a:	2300      	movs	r3, #0
 800866c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	f383 8811 	msr	BASEPRI, r3
}
 8008674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	2000000c 	.word	0x2000000c
	...

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f01e 0f10 	tst.w	lr, #16
 80086a0:	bf08      	it	eq
 80086a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086b4:	f380 8811 	msr	BASEPRI, r0
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f7ff fb18 	bl	8007cf4 <vTaskSwitchContext>
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f380 8811 	msr	BASEPRI, r0
 80086cc:	bc09      	pop	{r0, r3}
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	f01e 0f10 	tst.w	lr, #16
 80086da:	bf08      	it	eq
 80086dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086e0:	f380 8809 	msr	PSP, r0
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst>:
 80086f0:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008712:	f7ff fa37 	bl	8007b84 <xTaskIncrementTick>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <SysTick_Handler+0x40>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <vPortSetupTimerInterrupt+0x38>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <vPortSetupTimerInterrupt+0x3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <vPortSetupTimerInterrupt+0x40>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	099b      	lsrs	r3, r3, #6
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <vPortSetupTimerInterrupt+0x44>)
 800875a:	3b01      	subs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	e000e010 	.word	0xe000e010
 8008774:	e000e018 	.word	0xe000e018
 8008778:	20000000 	.word	0x20000000
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	e000e014 	.word	0xe000e014

08008784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008794 <vPortEnableVFP+0x10>
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008792:	bf00      	nop
 8008794:	e000ed88 	.word	0xe000ed88

08008798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d914      	bls.n	80087d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087aa:	4a17      	ldr	r2, [pc, #92]	; (8008808 <vPortValidateInterruptPriority+0x70>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087b4:	4b15      	ldr	r3, [pc, #84]	; (800880c <vPortValidateInterruptPriority+0x74>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	7afa      	ldrb	r2, [r7, #11]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d20a      	bcs.n	80087d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <vPortValidateInterruptPriority+0x78>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <vPortValidateInterruptPriority+0x7c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d90a      	bls.n	80087fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	603b      	str	r3, [r7, #0]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <vPortValidateInterruptPriority+0x60>
	}
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	e000e3f0 	.word	0xe000e3f0
 800880c:	2000041c 	.word	0x2000041c
 8008810:	e000ed0c 	.word	0xe000ed0c
 8008814:	20000420 	.word	0x20000420

08008818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008824:	f7ff f904 	bl	8007a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <pvPortMalloc+0x180>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008830:	f000 f920 	bl	8008a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008834:	4b59      	ldr	r3, [pc, #356]	; (800899c <pvPortMalloc+0x184>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 8093 	bne.w	8008968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01d      	beq.n	8008884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008848:	2208      	movs	r2, #8
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	2b00      	cmp	r3, #0
 8008858:	d014      	beq.n	8008884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f023 0307 	bic.w	r3, r3, #7
 8008860:	3308      	adds	r3, #8
 8008862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <pvPortMalloc+0x6c>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d06e      	beq.n	8008968 <pvPortMalloc+0x150>
 800888a:	4b45      	ldr	r3, [pc, #276]	; (80089a0 <pvPortMalloc+0x188>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d869      	bhi.n	8008968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008894:	4b43      	ldr	r3, [pc, #268]	; (80089a4 <pvPortMalloc+0x18c>)
 8008896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008898:	4b42      	ldr	r3, [pc, #264]	; (80089a4 <pvPortMalloc+0x18c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800889e:	e004      	b.n	80088aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d903      	bls.n	80088bc <pvPortMalloc+0xa4>
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f1      	bne.n	80088a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <pvPortMalloc+0x180>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d050      	beq.n	8008968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2208      	movs	r2, #8
 80088cc:	4413      	add	r3, r2
 80088ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	2308      	movs	r3, #8
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d91f      	bls.n	8008928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <pvPortMalloc+0xf8>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	613b      	str	r3, [r7, #16]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	1ad2      	subs	r2, r2, r3
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008922:	69b8      	ldr	r0, [r7, #24]
 8008924:	f000 f908 	bl	8008b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008928:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <pvPortMalloc+0x188>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <pvPortMalloc+0x188>)
 8008934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <pvPortMalloc+0x188>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <pvPortMalloc+0x190>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d203      	bcs.n	800894a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008942:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <pvPortMalloc+0x188>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a18      	ldr	r2, [pc, #96]	; (80089a8 <pvPortMalloc+0x190>)
 8008948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <pvPortMalloc+0x184>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	431a      	orrs	r2, r3
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800895e:	4b13      	ldr	r3, [pc, #76]	; (80089ac <pvPortMalloc+0x194>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	4a11      	ldr	r2, [pc, #68]	; (80089ac <pvPortMalloc+0x194>)
 8008966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008968:	f7ff f870 	bl	8007a4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <pvPortMalloc+0x174>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60fb      	str	r3, [r7, #12]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <pvPortMalloc+0x172>
	return pvReturn;
 800898c:	69fb      	ldr	r3, [r7, #28]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3728      	adds	r7, #40	; 0x28
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000fe4 	.word	0x20000fe4
 800899c:	20000ff8 	.word	0x20000ff8
 80089a0:	20000fe8 	.word	0x20000fe8
 80089a4:	20000fdc 	.word	0x20000fdc
 80089a8:	20000fec 	.word	0x20000fec
 80089ac:	20000ff0 	.word	0x20000ff0

080089b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d04d      	beq.n	8008a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089c2:	2308      	movs	r3, #8
 80089c4:	425b      	negs	r3, r3
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4413      	add	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <vPortFree+0xb8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4013      	ands	r3, r2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <vPortFree+0x44>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	60fb      	str	r3, [r7, #12]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <vPortFree+0x62>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	60bb      	str	r3, [r7, #8]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <vPortFree+0xb8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01e      	beq.n	8008a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11a      	bne.n	8008a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <vPortFree+0xb8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	401a      	ands	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a38:	f7fe fffa 	bl	8007a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <vPortFree+0xbc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4413      	add	r3, r2
 8008a46:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <vPortFree+0xbc>)
 8008a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a4a:	6938      	ldr	r0, [r7, #16]
 8008a4c:	f000 f874 	bl	8008b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <vPortFree+0xc0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	4a06      	ldr	r2, [pc, #24]	; (8008a70 <vPortFree+0xc0>)
 8008a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a5a:	f7fe fff7 	bl	8007a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000ff8 	.word	0x20000ff8
 8008a6c:	20000fe8 	.word	0x20000fe8
 8008a70:	20000ff4 	.word	0x20000ff4

08008a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a80:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <prvHeapInit+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00c      	beq.n	8008aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3307      	adds	r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0307 	bic.w	r3, r3, #7
 8008a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <prvHeapInit+0xac>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008aac:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <prvHeapInit+0xb0>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <prvHeapInit+0xb0>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0307 	bic.w	r3, r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <prvHeapInit+0xb4>)
 8008ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <prvHeapInit+0xb4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ade:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <prvHeapInit+0xb4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008af4:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <prvHeapInit+0xb4>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <prvHeapInit+0xb8>)
 8008b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <prvHeapInit+0xbc>)
 8008b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <prvHeapInit+0xc0>)
 8008b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	20000424 	.word	0x20000424
 8008b24:	20000fdc 	.word	0x20000fdc
 8008b28:	20000fe4 	.word	0x20000fe4
 8008b2c:	20000fec 	.word	0x20000fec
 8008b30:	20000fe8 	.word	0x20000fe8
 8008b34:	20000ff8 	.word	0x20000ff8

08008b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <prvInsertBlockIntoFreeList+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e002      	b.n	8008b4c <prvInsertBlockIntoFreeList+0x14>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d8f7      	bhi.n	8008b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d108      	bne.n	8008b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	441a      	add	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d118      	bne.n	8008bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d00d      	beq.n	8008bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e008      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	e003      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d002      	beq.n	8008bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000fdc 	.word	0x20000fdc
 8008be8:	20000fe4 	.word	0x20000fe4

08008bec <__errno>:
 8008bec:	4b01      	ldr	r3, [pc, #4]	; (8008bf4 <__errno+0x8>)
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	20000010 	.word	0x20000010

08008bf8 <__libc_init_array>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4d0d      	ldr	r5, [pc, #52]	; (8008c30 <__libc_init_array+0x38>)
 8008bfc:	4c0d      	ldr	r4, [pc, #52]	; (8008c34 <__libc_init_array+0x3c>)
 8008bfe:	1b64      	subs	r4, r4, r5
 8008c00:	10a4      	asrs	r4, r4, #2
 8008c02:	2600      	movs	r6, #0
 8008c04:	42a6      	cmp	r6, r4
 8008c06:	d109      	bne.n	8008c1c <__libc_init_array+0x24>
 8008c08:	4d0b      	ldr	r5, [pc, #44]	; (8008c38 <__libc_init_array+0x40>)
 8008c0a:	4c0c      	ldr	r4, [pc, #48]	; (8008c3c <__libc_init_array+0x44>)
 8008c0c:	f000 fc4e 	bl	80094ac <_init>
 8008c10:	1b64      	subs	r4, r4, r5
 8008c12:	10a4      	asrs	r4, r4, #2
 8008c14:	2600      	movs	r6, #0
 8008c16:	42a6      	cmp	r6, r4
 8008c18:	d105      	bne.n	8008c26 <__libc_init_array+0x2e>
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c20:	4798      	blx	r3
 8008c22:	3601      	adds	r6, #1
 8008c24:	e7ee      	b.n	8008c04 <__libc_init_array+0xc>
 8008c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2a:	4798      	blx	r3
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	e7f2      	b.n	8008c16 <__libc_init_array+0x1e>
 8008c30:	080095cc 	.word	0x080095cc
 8008c34:	080095cc 	.word	0x080095cc
 8008c38:	080095cc 	.word	0x080095cc
 8008c3c:	080095d0 	.word	0x080095d0

08008c40 <memcpy>:
 8008c40:	440a      	add	r2, r1
 8008c42:	4291      	cmp	r1, r2
 8008c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c48:	d100      	bne.n	8008c4c <memcpy+0xc>
 8008c4a:	4770      	bx	lr
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c56:	4291      	cmp	r1, r2
 8008c58:	d1f9      	bne.n	8008c4e <memcpy+0xe>
 8008c5a:	bd10      	pop	{r4, pc}

08008c5c <memset>:
 8008c5c:	4402      	add	r2, r0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d100      	bne.n	8008c66 <memset+0xa>
 8008c64:	4770      	bx	lr
 8008c66:	f803 1b01 	strb.w	r1, [r3], #1
 8008c6a:	e7f9      	b.n	8008c60 <memset+0x4>

08008c6c <siprintf>:
 8008c6c:	b40e      	push	{r1, r2, r3}
 8008c6e:	b500      	push	{lr}
 8008c70:	b09c      	sub	sp, #112	; 0x70
 8008c72:	ab1d      	add	r3, sp, #116	; 0x74
 8008c74:	9002      	str	r0, [sp, #8]
 8008c76:	9006      	str	r0, [sp, #24]
 8008c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c7c:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <siprintf+0x38>)
 8008c7e:	9107      	str	r1, [sp, #28]
 8008c80:	9104      	str	r1, [sp, #16]
 8008c82:	4909      	ldr	r1, [pc, #36]	; (8008ca8 <siprintf+0x3c>)
 8008c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c88:	9105      	str	r1, [sp, #20]
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	a902      	add	r1, sp, #8
 8008c90:	f000 f868 	bl	8008d64 <_svfiprintf_r>
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	b01c      	add	sp, #112	; 0x70
 8008c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca0:	b003      	add	sp, #12
 8008ca2:	4770      	bx	lr
 8008ca4:	20000010 	.word	0x20000010
 8008ca8:	ffff0208 	.word	0xffff0208

08008cac <__ssputs_r>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	688e      	ldr	r6, [r1, #8]
 8008cb2:	429e      	cmp	r6, r3
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	4690      	mov	r8, r2
 8008cba:	461f      	mov	r7, r3
 8008cbc:	d838      	bhi.n	8008d30 <__ssputs_r+0x84>
 8008cbe:	898a      	ldrh	r2, [r1, #12]
 8008cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cc4:	d032      	beq.n	8008d2c <__ssputs_r+0x80>
 8008cc6:	6825      	ldr	r5, [r4, #0]
 8008cc8:	6909      	ldr	r1, [r1, #16]
 8008cca:	eba5 0901 	sub.w	r9, r5, r1
 8008cce:	6965      	ldr	r5, [r4, #20]
 8008cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cd8:	3301      	adds	r3, #1
 8008cda:	444b      	add	r3, r9
 8008cdc:	106d      	asrs	r5, r5, #1
 8008cde:	429d      	cmp	r5, r3
 8008ce0:	bf38      	it	cc
 8008ce2:	461d      	movcc	r5, r3
 8008ce4:	0553      	lsls	r3, r2, #21
 8008ce6:	d531      	bpl.n	8008d4c <__ssputs_r+0xa0>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f000 fb39 	bl	8009360 <_malloc_r>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	b950      	cbnz	r0, 8008d08 <__ssputs_r+0x5c>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	f8ca 3000 	str.w	r3, [sl]
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d08:	6921      	ldr	r1, [r4, #16]
 8008d0a:	464a      	mov	r2, r9
 8008d0c:	f7ff ff98 	bl	8008c40 <memcpy>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	6126      	str	r6, [r4, #16]
 8008d1e:	6165      	str	r5, [r4, #20]
 8008d20:	444e      	add	r6, r9
 8008d22:	eba5 0509 	sub.w	r5, r5, r9
 8008d26:	6026      	str	r6, [r4, #0]
 8008d28:	60a5      	str	r5, [r4, #8]
 8008d2a:	463e      	mov	r6, r7
 8008d2c:	42be      	cmp	r6, r7
 8008d2e:	d900      	bls.n	8008d32 <__ssputs_r+0x86>
 8008d30:	463e      	mov	r6, r7
 8008d32:	4632      	mov	r2, r6
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	4641      	mov	r1, r8
 8008d38:	f000 faa8 	bl	800928c <memmove>
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	1b9b      	subs	r3, r3, r6
 8008d42:	4432      	add	r2, r6
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	6022      	str	r2, [r4, #0]
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e7db      	b.n	8008d04 <__ssputs_r+0x58>
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	f000 fb61 	bl	8009414 <_realloc_r>
 8008d52:	4606      	mov	r6, r0
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d1e1      	bne.n	8008d1c <__ssputs_r+0x70>
 8008d58:	6921      	ldr	r1, [r4, #16]
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	f000 fab0 	bl	80092c0 <_free_r>
 8008d60:	e7c7      	b.n	8008cf2 <__ssputs_r+0x46>
	...

08008d64 <_svfiprintf_r>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	4698      	mov	r8, r3
 8008d6a:	898b      	ldrh	r3, [r1, #12]
 8008d6c:	061b      	lsls	r3, r3, #24
 8008d6e:	b09d      	sub	sp, #116	; 0x74
 8008d70:	4607      	mov	r7, r0
 8008d72:	460d      	mov	r5, r1
 8008d74:	4614      	mov	r4, r2
 8008d76:	d50e      	bpl.n	8008d96 <_svfiprintf_r+0x32>
 8008d78:	690b      	ldr	r3, [r1, #16]
 8008d7a:	b963      	cbnz	r3, 8008d96 <_svfiprintf_r+0x32>
 8008d7c:	2140      	movs	r1, #64	; 0x40
 8008d7e:	f000 faef 	bl	8009360 <_malloc_r>
 8008d82:	6028      	str	r0, [r5, #0]
 8008d84:	6128      	str	r0, [r5, #16]
 8008d86:	b920      	cbnz	r0, 8008d92 <_svfiprintf_r+0x2e>
 8008d88:	230c      	movs	r3, #12
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	e0d1      	b.n	8008f36 <_svfiprintf_r+0x1d2>
 8008d92:	2340      	movs	r3, #64	; 0x40
 8008d94:	616b      	str	r3, [r5, #20]
 8008d96:	2300      	movs	r3, #0
 8008d98:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9a:	2320      	movs	r3, #32
 8008d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008da4:	2330      	movs	r3, #48	; 0x30
 8008da6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f50 <_svfiprintf_r+0x1ec>
 8008daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dae:	f04f 0901 	mov.w	r9, #1
 8008db2:	4623      	mov	r3, r4
 8008db4:	469a      	mov	sl, r3
 8008db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dba:	b10a      	cbz	r2, 8008dc0 <_svfiprintf_r+0x5c>
 8008dbc:	2a25      	cmp	r2, #37	; 0x25
 8008dbe:	d1f9      	bne.n	8008db4 <_svfiprintf_r+0x50>
 8008dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8008dc4:	d00b      	beq.n	8008dde <_svfiprintf_r+0x7a>
 8008dc6:	465b      	mov	r3, fp
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f7ff ff6d 	bl	8008cac <__ssputs_r>
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	f000 80aa 	beq.w	8008f2c <_svfiprintf_r+0x1c8>
 8008dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dda:	445a      	add	r2, fp
 8008ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dde:	f89a 3000 	ldrb.w	r3, [sl]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 80a2 	beq.w	8008f2c <_svfiprintf_r+0x1c8>
 8008de8:	2300      	movs	r3, #0
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008df2:	f10a 0a01 	add.w	sl, sl, #1
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	9307      	str	r3, [sp, #28]
 8008dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8008e00:	4654      	mov	r4, sl
 8008e02:	2205      	movs	r2, #5
 8008e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e08:	4851      	ldr	r0, [pc, #324]	; (8008f50 <_svfiprintf_r+0x1ec>)
 8008e0a:	f7f7 f9e1 	bl	80001d0 <memchr>
 8008e0e:	9a04      	ldr	r2, [sp, #16]
 8008e10:	b9d8      	cbnz	r0, 8008e4a <_svfiprintf_r+0xe6>
 8008e12:	06d0      	lsls	r0, r2, #27
 8008e14:	bf44      	itt	mi
 8008e16:	2320      	movmi	r3, #32
 8008e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1c:	0711      	lsls	r1, r2, #28
 8008e1e:	bf44      	itt	mi
 8008e20:	232b      	movmi	r3, #43	; 0x2b
 8008e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e26:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e2c:	d015      	beq.n	8008e5a <_svfiprintf_r+0xf6>
 8008e2e:	9a07      	ldr	r2, [sp, #28]
 8008e30:	4654      	mov	r4, sl
 8008e32:	2000      	movs	r0, #0
 8008e34:	f04f 0c0a 	mov.w	ip, #10
 8008e38:	4621      	mov	r1, r4
 8008e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e3e:	3b30      	subs	r3, #48	; 0x30
 8008e40:	2b09      	cmp	r3, #9
 8008e42:	d94e      	bls.n	8008ee2 <_svfiprintf_r+0x17e>
 8008e44:	b1b0      	cbz	r0, 8008e74 <_svfiprintf_r+0x110>
 8008e46:	9207      	str	r2, [sp, #28]
 8008e48:	e014      	b.n	8008e74 <_svfiprintf_r+0x110>
 8008e4a:	eba0 0308 	sub.w	r3, r0, r8
 8008e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e52:	4313      	orrs	r3, r2
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	46a2      	mov	sl, r4
 8008e58:	e7d2      	b.n	8008e00 <_svfiprintf_r+0x9c>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	1d19      	adds	r1, r3, #4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	9103      	str	r1, [sp, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bfbb      	ittet	lt
 8008e66:	425b      	neglt	r3, r3
 8008e68:	f042 0202 	orrlt.w	r2, r2, #2
 8008e6c:	9307      	strge	r3, [sp, #28]
 8008e6e:	9307      	strlt	r3, [sp, #28]
 8008e70:	bfb8      	it	lt
 8008e72:	9204      	strlt	r2, [sp, #16]
 8008e74:	7823      	ldrb	r3, [r4, #0]
 8008e76:	2b2e      	cmp	r3, #46	; 0x2e
 8008e78:	d10c      	bne.n	8008e94 <_svfiprintf_r+0x130>
 8008e7a:	7863      	ldrb	r3, [r4, #1]
 8008e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e7e:	d135      	bne.n	8008eec <_svfiprintf_r+0x188>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	1d1a      	adds	r2, r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	9203      	str	r2, [sp, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfb8      	it	lt
 8008e8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e90:	3402      	adds	r4, #2
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f60 <_svfiprintf_r+0x1fc>
 8008e98:	7821      	ldrb	r1, [r4, #0]
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	f7f7 f997 	bl	80001d0 <memchr>
 8008ea2:	b140      	cbz	r0, 8008eb6 <_svfiprintf_r+0x152>
 8008ea4:	2340      	movs	r3, #64	; 0x40
 8008ea6:	eba0 000a 	sub.w	r0, r0, sl
 8008eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8008eae:	9b04      	ldr	r3, [sp, #16]
 8008eb0:	4303      	orrs	r3, r0
 8008eb2:	3401      	adds	r4, #1
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eba:	4826      	ldr	r0, [pc, #152]	; (8008f54 <_svfiprintf_r+0x1f0>)
 8008ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ec0:	2206      	movs	r2, #6
 8008ec2:	f7f7 f985 	bl	80001d0 <memchr>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d038      	beq.n	8008f3c <_svfiprintf_r+0x1d8>
 8008eca:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <_svfiprintf_r+0x1f4>)
 8008ecc:	bb1b      	cbnz	r3, 8008f16 <_svfiprintf_r+0x1b2>
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	3307      	adds	r3, #7
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008edc:	4433      	add	r3, r6
 8008ede:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee0:	e767      	b.n	8008db2 <_svfiprintf_r+0x4e>
 8008ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	2001      	movs	r0, #1
 8008eea:	e7a5      	b.n	8008e38 <_svfiprintf_r+0xd4>
 8008eec:	2300      	movs	r3, #0
 8008eee:	3401      	adds	r4, #1
 8008ef0:	9305      	str	r3, [sp, #20]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f04f 0c0a 	mov.w	ip, #10
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008efe:	3a30      	subs	r2, #48	; 0x30
 8008f00:	2a09      	cmp	r2, #9
 8008f02:	d903      	bls.n	8008f0c <_svfiprintf_r+0x1a8>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0c5      	beq.n	8008e94 <_svfiprintf_r+0x130>
 8008f08:	9105      	str	r1, [sp, #20]
 8008f0a:	e7c3      	b.n	8008e94 <_svfiprintf_r+0x130>
 8008f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f10:	4604      	mov	r4, r0
 8008f12:	2301      	movs	r3, #1
 8008f14:	e7f0      	b.n	8008ef8 <_svfiprintf_r+0x194>
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <_svfiprintf_r+0x1f8>)
 8008f1e:	a904      	add	r1, sp, #16
 8008f20:	4638      	mov	r0, r7
 8008f22:	f3af 8000 	nop.w
 8008f26:	1c42      	adds	r2, r0, #1
 8008f28:	4606      	mov	r6, r0
 8008f2a:	d1d6      	bne.n	8008eda <_svfiprintf_r+0x176>
 8008f2c:	89ab      	ldrh	r3, [r5, #12]
 8008f2e:	065b      	lsls	r3, r3, #25
 8008f30:	f53f af2c 	bmi.w	8008d8c <_svfiprintf_r+0x28>
 8008f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f36:	b01d      	add	sp, #116	; 0x74
 8008f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3c:	ab03      	add	r3, sp, #12
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <_svfiprintf_r+0x1f8>)
 8008f44:	a904      	add	r1, sp, #16
 8008f46:	4638      	mov	r0, r7
 8008f48:	f000 f87a 	bl	8009040 <_printf_i>
 8008f4c:	e7eb      	b.n	8008f26 <_svfiprintf_r+0x1c2>
 8008f4e:	bf00      	nop
 8008f50:	08009590 	.word	0x08009590
 8008f54:	0800959a 	.word	0x0800959a
 8008f58:	00000000 	.word	0x00000000
 8008f5c:	08008cad 	.word	0x08008cad
 8008f60:	08009596 	.word	0x08009596

08008f64 <_printf_common>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	4616      	mov	r6, r2
 8008f6a:	4699      	mov	r9, r3
 8008f6c:	688a      	ldr	r2, [r1, #8]
 8008f6e:	690b      	ldr	r3, [r1, #16]
 8008f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f74:	4293      	cmp	r3, r2
 8008f76:	bfb8      	it	lt
 8008f78:	4613      	movlt	r3, r2
 8008f7a:	6033      	str	r3, [r6, #0]
 8008f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f80:	4607      	mov	r7, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	b10a      	cbz	r2, 8008f8a <_printf_common+0x26>
 8008f86:	3301      	adds	r3, #1
 8008f88:	6033      	str	r3, [r6, #0]
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	0699      	lsls	r1, r3, #26
 8008f8e:	bf42      	ittt	mi
 8008f90:	6833      	ldrmi	r3, [r6, #0]
 8008f92:	3302      	addmi	r3, #2
 8008f94:	6033      	strmi	r3, [r6, #0]
 8008f96:	6825      	ldr	r5, [r4, #0]
 8008f98:	f015 0506 	ands.w	r5, r5, #6
 8008f9c:	d106      	bne.n	8008fac <_printf_common+0x48>
 8008f9e:	f104 0a19 	add.w	sl, r4, #25
 8008fa2:	68e3      	ldr	r3, [r4, #12]
 8008fa4:	6832      	ldr	r2, [r6, #0]
 8008fa6:	1a9b      	subs	r3, r3, r2
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	dc26      	bgt.n	8008ffa <_printf_common+0x96>
 8008fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fb0:	1e13      	subs	r3, r2, #0
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	bf18      	it	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	0692      	lsls	r2, r2, #26
 8008fba:	d42b      	bmi.n	8009014 <_printf_common+0xb0>
 8008fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	47c0      	blx	r8
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d01e      	beq.n	8009008 <_printf_common+0xa4>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	68e5      	ldr	r5, [r4, #12]
 8008fce:	6832      	ldr	r2, [r6, #0]
 8008fd0:	f003 0306 	and.w	r3, r3, #6
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	bf08      	it	eq
 8008fd8:	1aad      	subeq	r5, r5, r2
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	6922      	ldr	r2, [r4, #16]
 8008fde:	bf0c      	ite	eq
 8008fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fe4:	2500      	movne	r5, #0
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	bfc4      	itt	gt
 8008fea:	1a9b      	subgt	r3, r3, r2
 8008fec:	18ed      	addgt	r5, r5, r3
 8008fee:	2600      	movs	r6, #0
 8008ff0:	341a      	adds	r4, #26
 8008ff2:	42b5      	cmp	r5, r6
 8008ff4:	d11a      	bne.n	800902c <_printf_common+0xc8>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	e008      	b.n	800900c <_printf_common+0xa8>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	4649      	mov	r1, r9
 8009000:	4638      	mov	r0, r7
 8009002:	47c0      	blx	r8
 8009004:	3001      	adds	r0, #1
 8009006:	d103      	bne.n	8009010 <_printf_common+0xac>
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009010:	3501      	adds	r5, #1
 8009012:	e7c6      	b.n	8008fa2 <_printf_common+0x3e>
 8009014:	18e1      	adds	r1, r4, r3
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	2030      	movs	r0, #48	; 0x30
 800901a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800901e:	4422      	add	r2, r4
 8009020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009028:	3302      	adds	r3, #2
 800902a:	e7c7      	b.n	8008fbc <_printf_common+0x58>
 800902c:	2301      	movs	r3, #1
 800902e:	4622      	mov	r2, r4
 8009030:	4649      	mov	r1, r9
 8009032:	4638      	mov	r0, r7
 8009034:	47c0      	blx	r8
 8009036:	3001      	adds	r0, #1
 8009038:	d0e6      	beq.n	8009008 <_printf_common+0xa4>
 800903a:	3601      	adds	r6, #1
 800903c:	e7d9      	b.n	8008ff2 <_printf_common+0x8e>
	...

08009040 <_printf_i>:
 8009040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	4691      	mov	r9, r2
 8009048:	7e27      	ldrb	r7, [r4, #24]
 800904a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800904c:	2f78      	cmp	r7, #120	; 0x78
 800904e:	4680      	mov	r8, r0
 8009050:	469a      	mov	sl, r3
 8009052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009056:	d807      	bhi.n	8009068 <_printf_i+0x28>
 8009058:	2f62      	cmp	r7, #98	; 0x62
 800905a:	d80a      	bhi.n	8009072 <_printf_i+0x32>
 800905c:	2f00      	cmp	r7, #0
 800905e:	f000 80d8 	beq.w	8009212 <_printf_i+0x1d2>
 8009062:	2f58      	cmp	r7, #88	; 0x58
 8009064:	f000 80a3 	beq.w	80091ae <_printf_i+0x16e>
 8009068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800906c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009070:	e03a      	b.n	80090e8 <_printf_i+0xa8>
 8009072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009076:	2b15      	cmp	r3, #21
 8009078:	d8f6      	bhi.n	8009068 <_printf_i+0x28>
 800907a:	a001      	add	r0, pc, #4	; (adr r0, 8009080 <_printf_i+0x40>)
 800907c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009080:	080090d9 	.word	0x080090d9
 8009084:	080090ed 	.word	0x080090ed
 8009088:	08009069 	.word	0x08009069
 800908c:	08009069 	.word	0x08009069
 8009090:	08009069 	.word	0x08009069
 8009094:	08009069 	.word	0x08009069
 8009098:	080090ed 	.word	0x080090ed
 800909c:	08009069 	.word	0x08009069
 80090a0:	08009069 	.word	0x08009069
 80090a4:	08009069 	.word	0x08009069
 80090a8:	08009069 	.word	0x08009069
 80090ac:	080091f9 	.word	0x080091f9
 80090b0:	0800911d 	.word	0x0800911d
 80090b4:	080091db 	.word	0x080091db
 80090b8:	08009069 	.word	0x08009069
 80090bc:	08009069 	.word	0x08009069
 80090c0:	0800921b 	.word	0x0800921b
 80090c4:	08009069 	.word	0x08009069
 80090c8:	0800911d 	.word	0x0800911d
 80090cc:	08009069 	.word	0x08009069
 80090d0:	08009069 	.word	0x08009069
 80090d4:	080091e3 	.word	0x080091e3
 80090d8:	680b      	ldr	r3, [r1, #0]
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	600a      	str	r2, [r1, #0]
 80090e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090e8:	2301      	movs	r3, #1
 80090ea:	e0a3      	b.n	8009234 <_printf_i+0x1f4>
 80090ec:	6825      	ldr	r5, [r4, #0]
 80090ee:	6808      	ldr	r0, [r1, #0]
 80090f0:	062e      	lsls	r6, r5, #24
 80090f2:	f100 0304 	add.w	r3, r0, #4
 80090f6:	d50a      	bpl.n	800910e <_printf_i+0xce>
 80090f8:	6805      	ldr	r5, [r0, #0]
 80090fa:	600b      	str	r3, [r1, #0]
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	da03      	bge.n	8009108 <_printf_i+0xc8>
 8009100:	232d      	movs	r3, #45	; 0x2d
 8009102:	426d      	negs	r5, r5
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009108:	485e      	ldr	r0, [pc, #376]	; (8009284 <_printf_i+0x244>)
 800910a:	230a      	movs	r3, #10
 800910c:	e019      	b.n	8009142 <_printf_i+0x102>
 800910e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009112:	6805      	ldr	r5, [r0, #0]
 8009114:	600b      	str	r3, [r1, #0]
 8009116:	bf18      	it	ne
 8009118:	b22d      	sxthne	r5, r5
 800911a:	e7ef      	b.n	80090fc <_printf_i+0xbc>
 800911c:	680b      	ldr	r3, [r1, #0]
 800911e:	6825      	ldr	r5, [r4, #0]
 8009120:	1d18      	adds	r0, r3, #4
 8009122:	6008      	str	r0, [r1, #0]
 8009124:	0628      	lsls	r0, r5, #24
 8009126:	d501      	bpl.n	800912c <_printf_i+0xec>
 8009128:	681d      	ldr	r5, [r3, #0]
 800912a:	e002      	b.n	8009132 <_printf_i+0xf2>
 800912c:	0669      	lsls	r1, r5, #25
 800912e:	d5fb      	bpl.n	8009128 <_printf_i+0xe8>
 8009130:	881d      	ldrh	r5, [r3, #0]
 8009132:	4854      	ldr	r0, [pc, #336]	; (8009284 <_printf_i+0x244>)
 8009134:	2f6f      	cmp	r7, #111	; 0x6f
 8009136:	bf0c      	ite	eq
 8009138:	2308      	moveq	r3, #8
 800913a:	230a      	movne	r3, #10
 800913c:	2100      	movs	r1, #0
 800913e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009142:	6866      	ldr	r6, [r4, #4]
 8009144:	60a6      	str	r6, [r4, #8]
 8009146:	2e00      	cmp	r6, #0
 8009148:	bfa2      	ittt	ge
 800914a:	6821      	ldrge	r1, [r4, #0]
 800914c:	f021 0104 	bicge.w	r1, r1, #4
 8009150:	6021      	strge	r1, [r4, #0]
 8009152:	b90d      	cbnz	r5, 8009158 <_printf_i+0x118>
 8009154:	2e00      	cmp	r6, #0
 8009156:	d04d      	beq.n	80091f4 <_printf_i+0x1b4>
 8009158:	4616      	mov	r6, r2
 800915a:	fbb5 f1f3 	udiv	r1, r5, r3
 800915e:	fb03 5711 	mls	r7, r3, r1, r5
 8009162:	5dc7      	ldrb	r7, [r0, r7]
 8009164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009168:	462f      	mov	r7, r5
 800916a:	42bb      	cmp	r3, r7
 800916c:	460d      	mov	r5, r1
 800916e:	d9f4      	bls.n	800915a <_printf_i+0x11a>
 8009170:	2b08      	cmp	r3, #8
 8009172:	d10b      	bne.n	800918c <_printf_i+0x14c>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	07df      	lsls	r7, r3, #31
 8009178:	d508      	bpl.n	800918c <_printf_i+0x14c>
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	6861      	ldr	r1, [r4, #4]
 800917e:	4299      	cmp	r1, r3
 8009180:	bfde      	ittt	le
 8009182:	2330      	movle	r3, #48	; 0x30
 8009184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800918c:	1b92      	subs	r2, r2, r6
 800918e:	6122      	str	r2, [r4, #16]
 8009190:	f8cd a000 	str.w	sl, [sp]
 8009194:	464b      	mov	r3, r9
 8009196:	aa03      	add	r2, sp, #12
 8009198:	4621      	mov	r1, r4
 800919a:	4640      	mov	r0, r8
 800919c:	f7ff fee2 	bl	8008f64 <_printf_common>
 80091a0:	3001      	adds	r0, #1
 80091a2:	d14c      	bne.n	800923e <_printf_i+0x1fe>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	b004      	add	sp, #16
 80091aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ae:	4835      	ldr	r0, [pc, #212]	; (8009284 <_printf_i+0x244>)
 80091b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	680e      	ldr	r6, [r1, #0]
 80091b8:	061f      	lsls	r7, r3, #24
 80091ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80091be:	600e      	str	r6, [r1, #0]
 80091c0:	d514      	bpl.n	80091ec <_printf_i+0x1ac>
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	bf44      	itt	mi
 80091c6:	f043 0320 	orrmi.w	r3, r3, #32
 80091ca:	6023      	strmi	r3, [r4, #0]
 80091cc:	b91d      	cbnz	r5, 80091d6 <_printf_i+0x196>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	f023 0320 	bic.w	r3, r3, #32
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2310      	movs	r3, #16
 80091d8:	e7b0      	b.n	800913c <_printf_i+0xfc>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	f043 0320 	orr.w	r3, r3, #32
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	2378      	movs	r3, #120	; 0x78
 80091e4:	4828      	ldr	r0, [pc, #160]	; (8009288 <_printf_i+0x248>)
 80091e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091ea:	e7e3      	b.n	80091b4 <_printf_i+0x174>
 80091ec:	065e      	lsls	r6, r3, #25
 80091ee:	bf48      	it	mi
 80091f0:	b2ad      	uxthmi	r5, r5
 80091f2:	e7e6      	b.n	80091c2 <_printf_i+0x182>
 80091f4:	4616      	mov	r6, r2
 80091f6:	e7bb      	b.n	8009170 <_printf_i+0x130>
 80091f8:	680b      	ldr	r3, [r1, #0]
 80091fa:	6826      	ldr	r6, [r4, #0]
 80091fc:	6960      	ldr	r0, [r4, #20]
 80091fe:	1d1d      	adds	r5, r3, #4
 8009200:	600d      	str	r5, [r1, #0]
 8009202:	0635      	lsls	r5, r6, #24
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	d501      	bpl.n	800920c <_printf_i+0x1cc>
 8009208:	6018      	str	r0, [r3, #0]
 800920a:	e002      	b.n	8009212 <_printf_i+0x1d2>
 800920c:	0671      	lsls	r1, r6, #25
 800920e:	d5fb      	bpl.n	8009208 <_printf_i+0x1c8>
 8009210:	8018      	strh	r0, [r3, #0]
 8009212:	2300      	movs	r3, #0
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	4616      	mov	r6, r2
 8009218:	e7ba      	b.n	8009190 <_printf_i+0x150>
 800921a:	680b      	ldr	r3, [r1, #0]
 800921c:	1d1a      	adds	r2, r3, #4
 800921e:	600a      	str	r2, [r1, #0]
 8009220:	681e      	ldr	r6, [r3, #0]
 8009222:	6862      	ldr	r2, [r4, #4]
 8009224:	2100      	movs	r1, #0
 8009226:	4630      	mov	r0, r6
 8009228:	f7f6 ffd2 	bl	80001d0 <memchr>
 800922c:	b108      	cbz	r0, 8009232 <_printf_i+0x1f2>
 800922e:	1b80      	subs	r0, r0, r6
 8009230:	6060      	str	r0, [r4, #4]
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	6123      	str	r3, [r4, #16]
 8009236:	2300      	movs	r3, #0
 8009238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800923c:	e7a8      	b.n	8009190 <_printf_i+0x150>
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	4632      	mov	r2, r6
 8009242:	4649      	mov	r1, r9
 8009244:	4640      	mov	r0, r8
 8009246:	47d0      	blx	sl
 8009248:	3001      	adds	r0, #1
 800924a:	d0ab      	beq.n	80091a4 <_printf_i+0x164>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	d413      	bmi.n	800927a <_printf_i+0x23a>
 8009252:	68e0      	ldr	r0, [r4, #12]
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	4298      	cmp	r0, r3
 8009258:	bfb8      	it	lt
 800925a:	4618      	movlt	r0, r3
 800925c:	e7a4      	b.n	80091a8 <_printf_i+0x168>
 800925e:	2301      	movs	r3, #1
 8009260:	4632      	mov	r2, r6
 8009262:	4649      	mov	r1, r9
 8009264:	4640      	mov	r0, r8
 8009266:	47d0      	blx	sl
 8009268:	3001      	adds	r0, #1
 800926a:	d09b      	beq.n	80091a4 <_printf_i+0x164>
 800926c:	3501      	adds	r5, #1
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	9903      	ldr	r1, [sp, #12]
 8009272:	1a5b      	subs	r3, r3, r1
 8009274:	42ab      	cmp	r3, r5
 8009276:	dcf2      	bgt.n	800925e <_printf_i+0x21e>
 8009278:	e7eb      	b.n	8009252 <_printf_i+0x212>
 800927a:	2500      	movs	r5, #0
 800927c:	f104 0619 	add.w	r6, r4, #25
 8009280:	e7f5      	b.n	800926e <_printf_i+0x22e>
 8009282:	bf00      	nop
 8009284:	080095a1 	.word	0x080095a1
 8009288:	080095b2 	.word	0x080095b2

0800928c <memmove>:
 800928c:	4288      	cmp	r0, r1
 800928e:	b510      	push	{r4, lr}
 8009290:	eb01 0402 	add.w	r4, r1, r2
 8009294:	d902      	bls.n	800929c <memmove+0x10>
 8009296:	4284      	cmp	r4, r0
 8009298:	4623      	mov	r3, r4
 800929a:	d807      	bhi.n	80092ac <memmove+0x20>
 800929c:	1e43      	subs	r3, r0, #1
 800929e:	42a1      	cmp	r1, r4
 80092a0:	d008      	beq.n	80092b4 <memmove+0x28>
 80092a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092aa:	e7f8      	b.n	800929e <memmove+0x12>
 80092ac:	4402      	add	r2, r0
 80092ae:	4601      	mov	r1, r0
 80092b0:	428a      	cmp	r2, r1
 80092b2:	d100      	bne.n	80092b6 <memmove+0x2a>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092be:	e7f7      	b.n	80092b0 <memmove+0x24>

080092c0 <_free_r>:
 80092c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092c2:	2900      	cmp	r1, #0
 80092c4:	d048      	beq.n	8009358 <_free_r+0x98>
 80092c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ca:	9001      	str	r0, [sp, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f1a1 0404 	sub.w	r4, r1, #4
 80092d2:	bfb8      	it	lt
 80092d4:	18e4      	addlt	r4, r4, r3
 80092d6:	f000 f8d3 	bl	8009480 <__malloc_lock>
 80092da:	4a20      	ldr	r2, [pc, #128]	; (800935c <_free_r+0x9c>)
 80092dc:	9801      	ldr	r0, [sp, #4]
 80092de:	6813      	ldr	r3, [r2, #0]
 80092e0:	4615      	mov	r5, r2
 80092e2:	b933      	cbnz	r3, 80092f2 <_free_r+0x32>
 80092e4:	6063      	str	r3, [r4, #4]
 80092e6:	6014      	str	r4, [r2, #0]
 80092e8:	b003      	add	sp, #12
 80092ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092ee:	f000 b8cd 	b.w	800948c <__malloc_unlock>
 80092f2:	42a3      	cmp	r3, r4
 80092f4:	d90b      	bls.n	800930e <_free_r+0x4e>
 80092f6:	6821      	ldr	r1, [r4, #0]
 80092f8:	1862      	adds	r2, r4, r1
 80092fa:	4293      	cmp	r3, r2
 80092fc:	bf04      	itt	eq
 80092fe:	681a      	ldreq	r2, [r3, #0]
 8009300:	685b      	ldreq	r3, [r3, #4]
 8009302:	6063      	str	r3, [r4, #4]
 8009304:	bf04      	itt	eq
 8009306:	1852      	addeq	r2, r2, r1
 8009308:	6022      	streq	r2, [r4, #0]
 800930a:	602c      	str	r4, [r5, #0]
 800930c:	e7ec      	b.n	80092e8 <_free_r+0x28>
 800930e:	461a      	mov	r2, r3
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	b10b      	cbz	r3, 8009318 <_free_r+0x58>
 8009314:	42a3      	cmp	r3, r4
 8009316:	d9fa      	bls.n	800930e <_free_r+0x4e>
 8009318:	6811      	ldr	r1, [r2, #0]
 800931a:	1855      	adds	r5, r2, r1
 800931c:	42a5      	cmp	r5, r4
 800931e:	d10b      	bne.n	8009338 <_free_r+0x78>
 8009320:	6824      	ldr	r4, [r4, #0]
 8009322:	4421      	add	r1, r4
 8009324:	1854      	adds	r4, r2, r1
 8009326:	42a3      	cmp	r3, r4
 8009328:	6011      	str	r1, [r2, #0]
 800932a:	d1dd      	bne.n	80092e8 <_free_r+0x28>
 800932c:	681c      	ldr	r4, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	6053      	str	r3, [r2, #4]
 8009332:	4421      	add	r1, r4
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	e7d7      	b.n	80092e8 <_free_r+0x28>
 8009338:	d902      	bls.n	8009340 <_free_r+0x80>
 800933a:	230c      	movs	r3, #12
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	e7d3      	b.n	80092e8 <_free_r+0x28>
 8009340:	6825      	ldr	r5, [r4, #0]
 8009342:	1961      	adds	r1, r4, r5
 8009344:	428b      	cmp	r3, r1
 8009346:	bf04      	itt	eq
 8009348:	6819      	ldreq	r1, [r3, #0]
 800934a:	685b      	ldreq	r3, [r3, #4]
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	bf04      	itt	eq
 8009350:	1949      	addeq	r1, r1, r5
 8009352:	6021      	streq	r1, [r4, #0]
 8009354:	6054      	str	r4, [r2, #4]
 8009356:	e7c7      	b.n	80092e8 <_free_r+0x28>
 8009358:	b003      	add	sp, #12
 800935a:	bd30      	pop	{r4, r5, pc}
 800935c:	20000ffc 	.word	0x20000ffc

08009360 <_malloc_r>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	1ccd      	adds	r5, r1, #3
 8009364:	f025 0503 	bic.w	r5, r5, #3
 8009368:	3508      	adds	r5, #8
 800936a:	2d0c      	cmp	r5, #12
 800936c:	bf38      	it	cc
 800936e:	250c      	movcc	r5, #12
 8009370:	2d00      	cmp	r5, #0
 8009372:	4606      	mov	r6, r0
 8009374:	db01      	blt.n	800937a <_malloc_r+0x1a>
 8009376:	42a9      	cmp	r1, r5
 8009378:	d903      	bls.n	8009382 <_malloc_r+0x22>
 800937a:	230c      	movs	r3, #12
 800937c:	6033      	str	r3, [r6, #0]
 800937e:	2000      	movs	r0, #0
 8009380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009382:	f000 f87d 	bl	8009480 <__malloc_lock>
 8009386:	4921      	ldr	r1, [pc, #132]	; (800940c <_malloc_r+0xac>)
 8009388:	680a      	ldr	r2, [r1, #0]
 800938a:	4614      	mov	r4, r2
 800938c:	b99c      	cbnz	r4, 80093b6 <_malloc_r+0x56>
 800938e:	4f20      	ldr	r7, [pc, #128]	; (8009410 <_malloc_r+0xb0>)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	b923      	cbnz	r3, 800939e <_malloc_r+0x3e>
 8009394:	4621      	mov	r1, r4
 8009396:	4630      	mov	r0, r6
 8009398:	f000 f862 	bl	8009460 <_sbrk_r>
 800939c:	6038      	str	r0, [r7, #0]
 800939e:	4629      	mov	r1, r5
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f85d 	bl	8009460 <_sbrk_r>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d123      	bne.n	80093f2 <_malloc_r+0x92>
 80093aa:	230c      	movs	r3, #12
 80093ac:	6033      	str	r3, [r6, #0]
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f86c 	bl	800948c <__malloc_unlock>
 80093b4:	e7e3      	b.n	800937e <_malloc_r+0x1e>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	1b5b      	subs	r3, r3, r5
 80093ba:	d417      	bmi.n	80093ec <_malloc_r+0x8c>
 80093bc:	2b0b      	cmp	r3, #11
 80093be:	d903      	bls.n	80093c8 <_malloc_r+0x68>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	441c      	add	r4, r3
 80093c4:	6025      	str	r5, [r4, #0]
 80093c6:	e004      	b.n	80093d2 <_malloc_r+0x72>
 80093c8:	6863      	ldr	r3, [r4, #4]
 80093ca:	42a2      	cmp	r2, r4
 80093cc:	bf0c      	ite	eq
 80093ce:	600b      	streq	r3, [r1, #0]
 80093d0:	6053      	strne	r3, [r2, #4]
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 f85a 	bl	800948c <__malloc_unlock>
 80093d8:	f104 000b 	add.w	r0, r4, #11
 80093dc:	1d23      	adds	r3, r4, #4
 80093de:	f020 0007 	bic.w	r0, r0, #7
 80093e2:	1ac2      	subs	r2, r0, r3
 80093e4:	d0cc      	beq.n	8009380 <_malloc_r+0x20>
 80093e6:	1a1b      	subs	r3, r3, r0
 80093e8:	50a3      	str	r3, [r4, r2]
 80093ea:	e7c9      	b.n	8009380 <_malloc_r+0x20>
 80093ec:	4622      	mov	r2, r4
 80093ee:	6864      	ldr	r4, [r4, #4]
 80093f0:	e7cc      	b.n	800938c <_malloc_r+0x2c>
 80093f2:	1cc4      	adds	r4, r0, #3
 80093f4:	f024 0403 	bic.w	r4, r4, #3
 80093f8:	42a0      	cmp	r0, r4
 80093fa:	d0e3      	beq.n	80093c4 <_malloc_r+0x64>
 80093fc:	1a21      	subs	r1, r4, r0
 80093fe:	4630      	mov	r0, r6
 8009400:	f000 f82e 	bl	8009460 <_sbrk_r>
 8009404:	3001      	adds	r0, #1
 8009406:	d1dd      	bne.n	80093c4 <_malloc_r+0x64>
 8009408:	e7cf      	b.n	80093aa <_malloc_r+0x4a>
 800940a:	bf00      	nop
 800940c:	20000ffc 	.word	0x20000ffc
 8009410:	20001000 	.word	0x20001000

08009414 <_realloc_r>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	4607      	mov	r7, r0
 8009418:	4614      	mov	r4, r2
 800941a:	460e      	mov	r6, r1
 800941c:	b921      	cbnz	r1, 8009428 <_realloc_r+0x14>
 800941e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009422:	4611      	mov	r1, r2
 8009424:	f7ff bf9c 	b.w	8009360 <_malloc_r>
 8009428:	b922      	cbnz	r2, 8009434 <_realloc_r+0x20>
 800942a:	f7ff ff49 	bl	80092c0 <_free_r>
 800942e:	4625      	mov	r5, r4
 8009430:	4628      	mov	r0, r5
 8009432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009434:	f000 f830 	bl	8009498 <_malloc_usable_size_r>
 8009438:	42a0      	cmp	r0, r4
 800943a:	d20f      	bcs.n	800945c <_realloc_r+0x48>
 800943c:	4621      	mov	r1, r4
 800943e:	4638      	mov	r0, r7
 8009440:	f7ff ff8e 	bl	8009360 <_malloc_r>
 8009444:	4605      	mov	r5, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d0f2      	beq.n	8009430 <_realloc_r+0x1c>
 800944a:	4631      	mov	r1, r6
 800944c:	4622      	mov	r2, r4
 800944e:	f7ff fbf7 	bl	8008c40 <memcpy>
 8009452:	4631      	mov	r1, r6
 8009454:	4638      	mov	r0, r7
 8009456:	f7ff ff33 	bl	80092c0 <_free_r>
 800945a:	e7e9      	b.n	8009430 <_realloc_r+0x1c>
 800945c:	4635      	mov	r5, r6
 800945e:	e7e7      	b.n	8009430 <_realloc_r+0x1c>

08009460 <_sbrk_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d06      	ldr	r5, [pc, #24]	; (800947c <_sbrk_r+0x1c>)
 8009464:	2300      	movs	r3, #0
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	f7f8 f934 	bl	80016d8 <_sbrk>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_sbrk_r+0x1a>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_sbrk_r+0x1a>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	20001150 	.word	0x20001150

08009480 <__malloc_lock>:
 8009480:	4801      	ldr	r0, [pc, #4]	; (8009488 <__malloc_lock+0x8>)
 8009482:	f000 b811 	b.w	80094a8 <__retarget_lock_acquire_recursive>
 8009486:	bf00      	nop
 8009488:	20001158 	.word	0x20001158

0800948c <__malloc_unlock>:
 800948c:	4801      	ldr	r0, [pc, #4]	; (8009494 <__malloc_unlock+0x8>)
 800948e:	f000 b80c 	b.w	80094aa <__retarget_lock_release_recursive>
 8009492:	bf00      	nop
 8009494:	20001158 	.word	0x20001158

08009498 <_malloc_usable_size_r>:
 8009498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800949c:	1f18      	subs	r0, r3, #4
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bfbc      	itt	lt
 80094a2:	580b      	ldrlt	r3, [r1, r0]
 80094a4:	18c0      	addlt	r0, r0, r3
 80094a6:	4770      	bx	lr

080094a8 <__retarget_lock_acquire_recursive>:
 80094a8:	4770      	bx	lr

080094aa <__retarget_lock_release_recursive>:
 80094aa:	4770      	bx	lr

080094ac <_init>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr

080094b8 <_fini>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr
