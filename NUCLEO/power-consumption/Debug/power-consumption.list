
power-consumption.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c14  08006c14  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006c14  08006c14  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c14  08006c14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010cc  20000010  08006c2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010dc  08006c2c  000210dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bab4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378b  00000000  00000000  0003baf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  0003f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  00040ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bde9  00000000  00000000  00042178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c7b  00000000  00000000  0006df61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115599  00000000  00000000  00086bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019c175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000661c  00000000  00000000  0019c1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b84 	.word	0x08006b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006b84 	.word	0x08006b84

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__NVIC_GetPriorityGrouping+0x18>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	0a1b      	lsrs	r3, r3, #8
 800020e:	f003 0307 	and.w	r3, r3, #7
}
 8000212:	4618      	mov	r0, r3
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	2b00      	cmp	r3, #0
 8000230:	db0b      	blt.n	800024a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 021f 	and.w	r2, r3, #31
 8000238:	4907      	ldr	r1, [pc, #28]	; (8000258 <__NVIC_EnableIRQ+0x38>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	2001      	movs	r0, #1
 8000242:	fa00 f202 	lsl.w	r2, r0, r2
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000e100 	.word	0xe000e100

0800025c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	db0a      	blt.n	8000286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	490c      	ldr	r1, [pc, #48]	; (80002a8 <__NVIC_SetPriority+0x4c>)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	0112      	lsls	r2, r2, #4
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	440b      	add	r3, r1
 8000280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000284:	e00a      	b.n	800029c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <__NVIC_SetPriority+0x50>)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	3b04      	subs	r3, #4
 8000294:	0112      	lsls	r2, r2, #4
 8000296:	b2d2      	uxtb	r2, r2
 8000298:	440b      	add	r3, r1
 800029a:	761a      	strb	r2, [r3, #24]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f003 0307 	and.w	r3, r3, #7
 80002c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	f1c3 0307 	rsb	r3, r3, #7
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	bf28      	it	cs
 80002ce:	2304      	movcs	r3, #4
 80002d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	3304      	adds	r3, #4
 80002d6:	2b06      	cmp	r3, #6
 80002d8:	d902      	bls.n	80002e0 <NVIC_EncodePriority+0x30>
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	3b03      	subs	r3, #3
 80002de:	e000      	b.n	80002e2 <NVIC_EncodePriority+0x32>
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e4:	f04f 32ff 	mov.w	r2, #4294967295
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	fa02 f303 	lsl.w	r3, r2, r3
 80002ee:	43da      	mvns	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	401a      	ands	r2, r3
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002f8:	f04f 31ff 	mov.w	r1, #4294967295
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	43d9      	mvns	r1, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000308:	4313      	orrs	r3, r2
         );
}
 800030a:	4618      	mov	r0, r3
 800030c:	3724      	adds	r7, #36	; 0x24
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0201 	orr.w	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
	...

08000364 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800036e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4313      	orrs	r3, r2
 8000376:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800037a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4013      	ands	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000382:	68fb      	ldr	r3, [r7, #12]
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800039e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	bf00      	nop
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fc58 	bl	8000c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f823 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 fa25 	bl	8000820 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003d6:	f000 f865 	bl	80004a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80003da:	f000 f8d9 	bl	8000590 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003de:	f000 f94d 	bl	800067c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80003e2:	f000 f99b 	bl	800071c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <main+0x4c>)
 80003e8:	1d3c      	adds	r4, r7, #4
 80003ea:	461d      	mov	r5, r3
 80003ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f005 f96a 	bl	80056d6 <osThreadCreate>
 8000402:	4603      	mov	r3, r0
 8000404:	4a03      	ldr	r2, [pc, #12]	; (8000414 <main+0x50>)
 8000406:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000408:	f005 f95e 	bl	80056c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800040c:	e7fe      	b.n	800040c <main+0x48>
 800040e:	bf00      	nop
 8000410:	08006ba8 	.word	0x08006ba8
 8000414:	20000f8c 	.word	0x20000f8c

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b096      	sub	sp, #88	; 0x58
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	2244      	movs	r2, #68	; 0x44
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f006 fba4 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800043a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800043e:	f001 feb1 	bl	80021a4 <HAL_PWREx_ControlVoltageScaling>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000448:	f000 fa34 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800044c:	2310      	movs	r3, #16
 800044e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000458:	2360      	movs	r3, #96	; 0x60
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045c:	2300      	movs	r3, #0
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fef3 	bl	8002250 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000470:	f000 fa20 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000478:	2300      	movs	r3, #0
 800047a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000488:	463b      	mov	r3, r7
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fac5 	bl	8002a1c <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000498:	f000 fa0c 	bl	80008b4 <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3758      	adds	r7, #88	; 0x58
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004aa:	f107 031c 	add.w	r3, r7, #28
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
 80004c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c6:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004c8:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d2:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004de:	4b29      	ldr	r3, [pc, #164]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004ea:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004f6:	4b23      	ldr	r3, [pc, #140]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_ADC1_Init+0xe0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_ADC1_Init+0xe0>)
 8000506:	2200      	movs	r2, #0
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_ADC1_Init+0xe0>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_ADC1_Init+0xe0>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_ADC1_Init+0xe0>)
 800051a:	2200      	movs	r2, #0
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_ADC1_Init+0xe0>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000526:	4817      	ldr	r0, [pc, #92]	; (8000584 <MX_ADC1_Init+0xe0>)
 8000528:	f000 fd6e 	bl	8001008 <HAL_ADC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000532:	f000 f9bf 	bl	80008b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	4619      	mov	r1, r3
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <MX_ADC1_Init+0xe0>)
 8000542:	f001 facd 	bl	8001ae0 <HAL_ADCEx_MultiModeConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800054c:	f000 f9b2 	bl	80008b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_ADC1_Init+0xe8>)
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000554:	2306      	movs	r3, #6
 8000556:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055c:	237f      	movs	r3, #127	; 0x7f
 800055e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000560:	2304      	movs	r3, #4
 8000562:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_ADC1_Init+0xe0>)
 800056e:	f000 fea1 	bl	80012b4 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000578:	f000 f99c 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3728      	adds	r7, #40	; 0x28
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000fdc 	.word	0x20000fdc
 8000588:	50040000 	.word	0x50040000
 800058c:	14f00020 	.word	0x14f00020

08000590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	; 0x38
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80005ca:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005cc:	227f      	movs	r2, #127	; 0x7f
 80005ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005d8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80005dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ea:	4823      	ldr	r0, [pc, #140]	; (8000678 <MX_TIM2_Init+0xe8>)
 80005ec:	f003 f8f4 	bl	80037d8 <HAL_TIM_Base_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80005f6:	f000 f95d 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000604:	4619      	mov	r1, r3
 8000606:	481c      	ldr	r0, [pc, #112]	; (8000678 <MX_TIM2_Init+0xe8>)
 8000608:	f003 fc3e 	bl	8003e88 <HAL_TIM_ConfigClockSource>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000612:	f000 f94f 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000616:	4818      	ldr	r0, [pc, #96]	; (8000678 <MX_TIM2_Init+0xe8>)
 8000618:	f003 f9a6 	bl	8003968 <HAL_TIM_PWM_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000622:	f000 f947 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	4810      	ldr	r0, [pc, #64]	; (8000678 <MX_TIM2_Init+0xe8>)
 8000636:	f004 f91f 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000640:	f000 f938 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	4619      	mov	r1, r3
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <MX_TIM2_Init+0xe8>)
 800065c:	f003 fb04 	bl	8003c68 <HAL_TIM_PWM_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000666:	f000 f925 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <MX_TIM2_Init+0xe8>)
 800066c:	f000 f9f0 	bl	8000a50 <HAL_TIM_MspPostInit>

}
 8000670:	bf00      	nop
 8000672:	3738      	adds	r7, #56	; 0x38
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20001040 	.word	0x20001040

0800067c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_TIM3_Init+0x98>)
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <MX_TIM3_Init+0x9c>)
 800069e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_TIM3_Init+0x98>)
 80006a2:	f240 128f 	movw	r2, #399	; 0x18f
 80006a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_TIM3_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_TIM3_Init+0x98>)
 80006b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_TIM3_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM3_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <MX_TIM3_Init+0x98>)
 80006c4:	f003 f888 	bl	80037d8 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80006ce:	f000 f8f1 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM3_Init+0x98>)
 80006e0:	f003 fbd2 	bl	8003e88 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80006ea:	f000 f8e3 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM3_Init+0x98>)
 80006fc:	f004 f8bc 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000706:	f000 f8d5 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000f90 	.word	0x20000f90
 8000718:	40000400 	.word	0x40000400

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0b0      	sub	sp, #192	; 0xc0
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2288      	movs	r2, #136	; 0x88
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fa10 	bl	8006b74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000754:	2302      	movs	r3, #2
 8000756:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fb7e 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f8a3 	bl	80008b4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800076e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000772:	f7ff fe0f 	bl	8000394 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fdf4 	bl	8000364 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800077c:	230c      	movs	r3, #12
 800077e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000782:	2302      	movs	r3, #2
 8000784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800079a:	2307      	movs	r3, #7
 800079c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f004 fa56 	bl	8004c5a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80007ae:	f7ff fd29 	bl	8000204 <__NVIC_GetPriorityGrouping>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2200      	movs	r2, #0
 80007b6:	2105      	movs	r1, #5
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd79 	bl	80002b0 <NVIC_EncodePriority>
 80007be:	4603      	mov	r3, r0
 80007c0:	4619      	mov	r1, r3
 80007c2:	2026      	movs	r0, #38	; 0x26
 80007c4:	f7ff fd4a 	bl	800025c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80007c8:	2026      	movs	r0, #38	; 0x26
 80007ca:	f7ff fd29 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80007ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80007e8:	230c      	movs	r3, #12
 80007ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 80007fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007fe:	4619      	mov	r1, r3
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x100>)
 8000802:	f004 fecd 	bl	80055a0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x100>)
 8000808:	f7ff fd95 	bl	8000336 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_USART2_UART_Init+0x100>)
 800080e:	f7ff fd82 	bl	8000316 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	37c0      	adds	r7, #192	; 0xc0
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_GPIO_Init+0x5c>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a10      	ldr	r2, [pc, #64]	; (800087c <MX_GPIO_Init+0x5c>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_GPIO_Init+0x5c>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f001 fc80 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 fac8 	bl	8001e04 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f004 ff70 	bl	800576e <osDelay>
 800088e:	e7fb      	b.n	8000888 <StartDefaultTask+0x8>

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 fa05 	bl	8000cb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40012c00 	.word	0x40012c00

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_MspInit+0x4c>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6613      	str	r3, [r2, #96]	; 0x60
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_MspInit+0x4c>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_MspInit+0x4c>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f001 fa57 	bl	8001db0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ac      	sub	sp, #176	; 0xb0
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2288      	movs	r2, #136	; 0x88
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f006 f91f 	bl	8006b74 <memset>
  if(hadc->Instance==ADC1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <HAL_ADC_MspInit+0xc8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d147      	bne.n	80009d0 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000940:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000944:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000946:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800094a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000956:	2310      	movs	r3, #16
 8000958:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000962:	2302      	movs	r3, #2
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000966:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fa75 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800097c:	f7ff ff9a 	bl	80008b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	4a15      	ldr	r2, [pc, #84]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 8000986:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800098a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009b6:	230b      	movs	r3, #11
 80009b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f001 fa1a 	bl	8001e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	37b0      	adds	r7, #176	; 0xb0
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	50040000 	.word	0x50040000
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f0:	d10c      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a0a:	e018      	b.n	8000a3e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_TIM_Base_MspInit+0x6c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d113      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2105      	movs	r1, #5
 8000a32:	201d      	movs	r0, #29
 8000a34:	f001 f9bc 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a38:	201d      	movs	r0, #29
 8000a3a:	f001 f9d5 	bl	8001de8 <HAL_NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40000400 	.word	0x40000400

08000a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d11c      	bne.n	8000aac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_TIM_MspPostInit+0x64>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_TIM_MspPostInit+0x64>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_TIM_MspPostInit+0x64>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 f9ac 	bl	8001e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2019      	movs	r0, #25
 8000ace:	f001 f96f 	bl	8001db0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f001 f988 	bl	8001de8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_InitTick+0x9c>)
 8000ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_InitTick+0x9c>)
 8000ade:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_InitTick+0x9c>)
 8000ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f91e 	bl	8002d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b00:	f002 f906 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8000b04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <HAL_InitTick+0xa0>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	0c9b      	lsrs	r3, r3, #18
 8000b10:	3b01      	subs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b36:	f002 fe4f 	bl	80037d8 <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d104      	bne.n	8000b4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b42:	f002 fea1 	bl	8003888 <HAL_TIM_Base_Start_IT>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	431bde83 	.word	0x431bde83
 8000b5c:	2000108c 	.word	0x2000108c
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b96:	f002 ff48 	bl	8003a2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000108c 	.word	0x2000108c

08000ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM3_IRQHandler+0x10>)
 8000baa:	f002 ff3e 	bl	8003a2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000f90 	.word	0x20000f90

08000bb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <SystemInit+0x5c>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <SystemInit+0x5c>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0x60>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <SystemInit+0x60>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <SystemInit+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <SystemInit+0x60>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <SystemInit+0x60>)
 8000bf4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bf8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bfc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0x60>)
 8000c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <SystemInit+0x60>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <SystemInit+0x60>)
 8000c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SystemInit+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	40021000 	.word	0x40021000

08000c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff ffca 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
	ldr	r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LoopForever+0x16>)
	cmp	r2, r3
 8000c56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f005 ff67 	bl	8006b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5e:	f7ff fbb1 	bl	80003c4 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c68:	08006c1c 	.word	0x08006c1c
	ldr	r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c70:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c74:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c78:	200010dc 	.word	0x200010dc

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>

08000c7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f001 f886 	bl	8001d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff ff12 	bl	8000ab8 <HAL_InitTick>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e001      	b.n	8000ca4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca0:	f7ff fe0e 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200010d8 	.word	0x200010d8

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200010d8 	.word	0x200010d8

08000cf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3360      	adds	r3, #96	; 0x60
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <LL_ADC_SetOffset+0x44>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	4313      	orrs	r3, r2
 8000d88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d90:	bf00      	nop
 8000d92:	371c      	adds	r7, #28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	03fff000 	.word	0x03fff000

08000da0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3360      	adds	r3, #96	; 0x60
 8000dae:	461a      	mov	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3360      	adds	r3, #96	; 0x60
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000df6:	bf00      	nop
 8000df8:	371c      	adds	r7, #28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b087      	sub	sp, #28
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3330      	adds	r3, #48	; 0x30
 8000e12:	461a      	mov	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	4413      	add	r3, r2
 8000e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	211f      	movs	r1, #31
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	0e9b      	lsrs	r3, r3, #26
 8000e3a:	f003 011f 	and.w	r1, r3, #31
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e4e:	bf00      	nop
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b087      	sub	sp, #28
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3314      	adds	r3, #20
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	0e5b      	lsrs	r3, r3, #25
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	4413      	add	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	0d1b      	lsrs	r3, r3, #20
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	2107      	movs	r1, #7
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	0d1b      	lsrs	r3, r3, #20
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0318 	and.w	r3, r3, #24
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ed4:	40d9      	lsrs	r1, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	400b      	ands	r3, r1
 8000eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	0007ffff 	.word	0x0007ffff

08000ef8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6093      	str	r3, [r2, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <LL_ADC_IsEnabled+0x18>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <LL_ADC_IsEnabled+0x1a>
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d101      	bne.n	8000fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d101      	bne.n	8000ff8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e136      	b.n	8001290 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fc6d 	bl	8000910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff67 	bl	8000f1c <LL_ADC_IsDeepPowerDownEnabled>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff4d 	bl	8000ef8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff82 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d115      	bne.n	800109a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff66 	bl	8000f44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001078:	4b87      	ldr	r3, [pc, #540]	; (8001298 <HAL_ADC_Init+0x290>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	4a87      	ldr	r2, [pc, #540]	; (800129c <HAL_ADC_Init+0x294>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	099b      	lsrs	r3, r3, #6
 8001086:	3301      	adds	r3, #1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800108c:	e002      	b.n	8001094 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3b01      	subs	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff64 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10d      	bne.n	80010c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ae:	f043 0210 	orr.w	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff75 	bl	8000fba <LL_ADC_REG_IsConversionOngoing>
 80010d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 80cf 	bne.w	800127e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 80cb 	bne.w	800127e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010f0:	f043 0202 	orr.w	r2, r3, #2
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff49 	bl	8000f94 <LL_ADC_IsEnabled>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d115      	bne.n	8001134 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001108:	4865      	ldr	r0, [pc, #404]	; (80012a0 <HAL_ADC_Init+0x298>)
 800110a:	f7ff ff43 	bl	8000f94 <LL_ADC_IsEnabled>
 800110e:	4604      	mov	r4, r0
 8001110:	4864      	ldr	r0, [pc, #400]	; (80012a4 <HAL_ADC_Init+0x29c>)
 8001112:	f7ff ff3f 	bl	8000f94 <LL_ADC_IsEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	431c      	orrs	r4, r3
 800111a:	4863      	ldr	r0, [pc, #396]	; (80012a8 <HAL_ADC_Init+0x2a0>)
 800111c:	f7ff ff3a 	bl	8000f94 <LL_ADC_IsEnabled>
 8001120:	4603      	mov	r3, r0
 8001122:	4323      	orrs	r3, r4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	485f      	ldr	r0, [pc, #380]	; (80012ac <HAL_ADC_Init+0x2a4>)
 8001130:	f7ff fdde 	bl	8000cf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e5b      	ldrb	r3, [r3, #25]
 8001138:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001144:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800114a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001152:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	3b01      	subs	r3, #1
 8001168:	045b      	lsls	r3, r3, #17
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_ADC_Init+0x2a8>)
 8001194:	4013      	ands	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	430b      	orrs	r3, r1
 800119e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff08 	bl	8000fba <LL_ADC_REG_IsConversionOngoing>
 80011aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff15 	bl	8000fe0 <LL_ADC_INJ_IsConversionOngoing>
 80011b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d13d      	bne.n	800123a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d13a      	bne.n	800123a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011e0:	f023 0302 	bic.w	r3, r3, #2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	69b9      	ldr	r1, [r7, #24]
 80011ea:	430b      	orrs	r3, r1
 80011ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d118      	bne.n	800122a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800120e:	4311      	orrs	r1, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001214:	4311      	orrs	r1, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800121a:	430a      	orrs	r2, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	e007      	b.n	800123a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10c      	bne.n	800125c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f023 010f 	bic.w	r1, r3, #15
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
 800125a:	e007      	b.n	800126c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 020f 	bic.w	r2, r2, #15
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	f023 0303 	bic.w	r3, r3, #3
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
 800127c:	e007      	b.n	800128e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001282:	f043 0210 	orr.w	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800128e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3724      	adds	r7, #36	; 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	053e2d63 	.word	0x053e2d63
 80012a0:	50040000 	.word	0x50040000
 80012a4:	50040100 	.word	0x50040100
 80012a8:	50040200 	.word	0x50040200
 80012ac:	50040300 	.word	0x50040300
 80012b0:	fff0c007 	.word	0xfff0c007

080012b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0b6      	sub	sp, #216	; 0xd8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x22>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e3c7      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x7b2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fe69 	bl	8000fba <LL_ADC_REG_IsConversionOngoing>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 83a8 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d824      	bhi.n	8001342 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b02      	subs	r3, #2
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d81b      	bhi.n	800133a <HAL_ADC_ConfigChannel+0x86>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <HAL_ADC_ConfigChannel+0x54>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001319 	.word	0x08001319
 800130c:	08001321 	.word	0x08001321
 8001310:	08001329 	.word	0x08001329
 8001314:	08001331 	.word	0x08001331
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	220c      	movs	r2, #12
 800131c:	605a      	str	r2, [r3, #4]
          break;
 800131e:	e011      	b.n	8001344 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2212      	movs	r2, #18
 8001324:	605a      	str	r2, [r3, #4]
          break;
 8001326:	e00d      	b.n	8001344 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2218      	movs	r2, #24
 800132c:	605a      	str	r2, [r3, #4]
          break;
 800132e:	e009      	b.n	8001344 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	605a      	str	r2, [r3, #4]
          break;
 8001338:	e004      	b.n	8001344 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2206      	movs	r2, #6
 800133e:	605a      	str	r2, [r3, #4]
          break;
 8001340:	e000      	b.n	8001344 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001342:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	f7ff fd56 	bl	8000e02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe2d 	bl	8000fba <LL_ADC_REG_IsConversionOngoing>
 8001360:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe39 	bl	8000fe0 <LL_ADC_INJ_IsConversionOngoing>
 800136e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001372:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 81a6 	bne.w	80016c8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800137c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 81a1 	bne.w	80016c8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	461a      	mov	r2, r3
 8001394:	f7ff fd61 	bl	8000e5a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d00a      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6919      	ldr	r1, [r3, #16]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013ca:	f7ff fcc5 	bl	8000d58 <LL_ADC_SetOffset>
 80013ce:	e17b      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fce2 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10a      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x148>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fcd7 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	0e9b      	lsrs	r3, r3, #26
 80013f6:	f003 021f 	and.w	r2, r3, #31
 80013fa:	e01e      	b.n	800143a <HAL_ADC_ConfigChannel+0x186>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fccc 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800141a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800141e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800142a:	2320      	movs	r3, #32
 800142c:	e004      	b.n	8001438 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800142e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x19e>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0e9b      	lsrs	r3, r3, #26
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	e018      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1d0>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800146a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800146e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001476:	2320      	movs	r3, #32
 8001478:	e004      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800147a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001484:	429a      	cmp	r2, r3
 8001486:	d106      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc9b 	bl	8000dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2101      	movs	r1, #1
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc7f 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10a      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x20e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fc74 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	e01e      	b.n	8001500 <HAL_ADC_ConfigChannel+0x24c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc69 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80014e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80014e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80014f0:	2320      	movs	r3, #32
 80014f2:	e004      	b.n	80014fe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80014f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x264>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0e9b      	lsrs	r3, r3, #26
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	e018      	b.n	800154a <HAL_ADC_ConfigChannel+0x296>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800152c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800153c:	2320      	movs	r3, #32
 800153e:	e004      	b.n	800154a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800154a:	429a      	cmp	r2, r3
 800154c:	d106      	bne.n	800155c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fc38 	bl	8000dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc1c 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2d4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2102      	movs	r1, #2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc11 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	f003 021f 	and.w	r2, r3, #31
 8001586:	e01e      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x312>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fc06 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80015a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80015ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80015b6:	2320      	movs	r3, #32
 80015b8:	e004      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80015ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d105      	bne.n	80015de <HAL_ADC_ConfigChannel+0x32a>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0e9b      	lsrs	r3, r3, #26
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	e016      	b.n	800160c <HAL_ADC_ConfigChannel+0x358>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80015f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80015f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80015fe:	2320      	movs	r3, #32
 8001600:	e004      	b.n	800160c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	2102      	movs	r1, #2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fbd7 	bl	8000dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2103      	movs	r1, #3
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fbbb 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10a      	bne.n	800164a <HAL_ADC_ConfigChannel+0x396>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2103      	movs	r1, #3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fbb0 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	0e9b      	lsrs	r3, r3, #26
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	e017      	b.n	800167a <HAL_ADC_ConfigChannel+0x3c6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2103      	movs	r1, #3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fba5 	bl	8000da0 <LL_ADC_GetOffsetChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001664:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800166c:	2320      	movs	r3, #32
 800166e:	e003      	b.n	8001678 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x3de>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0e9b      	lsrs	r3, r3, #26
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	e011      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x402>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80016a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80016a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80016aa:	2320      	movs	r3, #32
 80016ac:	e003      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80016ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d106      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	2103      	movs	r1, #3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb82 	bl	8000dcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fc61 	bl	8000f94 <LL_ADC_IsEnabled>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f040 813f 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	461a      	mov	r2, r3
 80016e8:	f7ff fbe2 	bl	8000eb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a8e      	ldr	r2, [pc, #568]	; (800192c <HAL_ADC_ConfigChannel+0x678>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f040 8130 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10b      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x46c>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0e9b      	lsrs	r3, r3, #26
 800170e:	3301      	adds	r3, #1
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	2b09      	cmp	r3, #9
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e019      	b.n	8001754 <HAL_ADC_ConfigChannel+0x4a0>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800172e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001730:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001738:	2320      	movs	r3, #32
 800173a:	e003      	b.n	8001744 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800173c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3301      	adds	r3, #1
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2b09      	cmp	r3, #9
 800174c:	bf94      	ite	ls
 800174e:	2301      	movls	r3, #1
 8001750:	2300      	movhi	r3, #0
 8001752:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001754:	2b00      	cmp	r3, #0
 8001756:	d079      	beq.n	800184c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x4c0>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0e9b      	lsrs	r3, r3, #26
 800176a:	3301      	adds	r3, #1
 800176c:	069b      	lsls	r3, r3, #26
 800176e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001772:	e015      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x4ec>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001784:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e003      	b.n	8001798 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	069b      	lsls	r3, r3, #26
 800179c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x50c>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	3301      	adds	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	e017      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x53c>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80017ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80017d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80017d8:	2320      	movs	r3, #32
 80017da:	e003      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80017dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	ea42 0103 	orr.w	r1, r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10a      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x562>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	3301      	adds	r3, #1
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	051b      	lsls	r3, r3, #20
 8001814:	e018      	b.n	8001848 <HAL_ADC_ConfigChannel+0x594>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800182e:	2320      	movs	r3, #32
 8001830:	e003      	b.n	800183a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001848:	430b      	orrs	r3, r1
 800184a:	e080      	b.n	800194e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x5b4>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0e9b      	lsrs	r3, r3, #26
 800185e:	3301      	adds	r3, #1
 8001860:	069b      	lsls	r3, r3, #26
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001866:	e015      	b.n	8001894 <HAL_ADC_ConfigChannel+0x5e0>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001880:	2320      	movs	r3, #32
 8001882:	e003      	b.n	800188c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x600>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0e9b      	lsrs	r3, r3, #26
 80018a6:	3301      	adds	r3, #1
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	e017      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x630>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	61fb      	str	r3, [r7, #28]
  return result;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80018cc:	2320      	movs	r3, #32
 80018ce:	e003      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	3301      	adds	r3, #1
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	ea42 0103 	orr.w	r1, r2, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10d      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x65c>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	3301      	adds	r3, #1
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	3b1e      	subs	r3, #30
 8001908:	051b      	lsls	r3, r3, #20
 800190a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800190e:	e01d      	b.n	800194c <HAL_ADC_ConfigChannel+0x698>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	613b      	str	r3, [r7, #16]
  return result;
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e005      	b.n	8001938 <HAL_ADC_ConfigChannel+0x684>
 800192c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f003 021f 	and.w	r2, r3, #31
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	3b1e      	subs	r3, #30
 8001946:	051b      	lsls	r3, r3, #20
 8001948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194c:	430b      	orrs	r3, r1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	6892      	ldr	r2, [r2, #8]
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff fa81 	bl	8000e5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_ADC_ConfigChannel+0x7bc>)
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d07a      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001964:	4843      	ldr	r0, [pc, #268]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001966:	f7ff f9e9 	bl	8000d3c <LL_ADC_GetCommonPathInternalCh>
 800196a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a41      	ldr	r2, [pc, #260]	; (8001a78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12c      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800197c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d126      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3c      	ldr	r2, [pc, #240]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x6e4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d15d      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800199c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a0:	4619      	mov	r1, r3
 80019a2:	4834      	ldr	r0, [pc, #208]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 80019a4:	f7ff f9b7 	bl	8000d16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_ADC_ConfigChannel+0x7d0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <HAL_ADC_ConfigChannel+0x7d4>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019c2:	e002      	b.n	80019ca <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f9      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019d0:	e040      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_ADC_ConfigChannel+0x7d8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d118      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x75a>
 80019dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d112      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x748>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_ADC_ConfigChannel+0x7cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d12d      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a04:	4619      	mov	r1, r3
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a08:	f7ff f985 	bl	8000d16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a0c:	e024      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d120      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11a      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d115      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a36:	4619      	mov	r1, r3
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a3a:	f7ff f96c 	bl	8000d16 <LL_ADC_SetCommonPathInternalCh>
 8001a3e:	e00c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a54:	bf00      	nop
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	37d8      	adds	r7, #216	; 0xd8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	80080000 	.word	0x80080000
 8001a74:	50040300 	.word	0x50040300
 8001a78:	c7520000 	.word	0xc7520000
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	50040200 	.word	0x50040200
 8001a84:	20000000 	.word	0x20000000
 8001a88:	053e2d63 	.word	0x053e2d63
 8001a8c:	cb840000 	.word	0xcb840000
 8001a90:	80000001 	.word	0x80000001

08001a94 <LL_ADC_IsEnabled>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_IsEnabled+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_IsEnabled+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_REG_IsConversionOngoing>:
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d101      	bne.n	8001ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b09f      	sub	sp, #124	; 0x7c
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e093      	b.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001b06:	2300      	movs	r3, #0
 8001b08:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	e001      	b.n	8001b22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10b      	bne.n	8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e072      	b.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ffb9 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001b48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ffb3 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d154      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d151      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001b62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d02c      	beq.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7e:	035b      	lsls	r3, r3, #13
 8001b80:	430b      	orrs	r3, r1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b88:	4829      	ldr	r0, [pc, #164]	; (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b8a:	f7ff ff83 	bl	8001a94 <LL_ADC_IsEnabled>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4828      	ldr	r0, [pc, #160]	; (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b92:	f7ff ff7f 	bl	8001a94 <LL_ADC_IsEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	431c      	orrs	r4, r3
 8001b9a:	4828      	ldr	r0, [pc, #160]	; (8001c3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b9c:	f7ff ff7a 	bl	8001a94 <LL_ADC_IsEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4323      	orrs	r3, r4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d137      	bne.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bb0:	f023 030f 	bic.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6811      	ldr	r1, [r2, #0]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	6892      	ldr	r2, [r2, #8]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bc4:	e028      	b.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd2:	4817      	ldr	r0, [pc, #92]	; (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001bd4:	f7ff ff5e 	bl	8001a94 <LL_ADC_IsEnabled>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	4816      	ldr	r0, [pc, #88]	; (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001bdc:	f7ff ff5a 	bl	8001a94 <LL_ADC_IsEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	431c      	orrs	r4, r3
 8001be4:	4815      	ldr	r0, [pc, #84]	; (8001c3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001be6:	f7ff ff55 	bl	8001a94 <LL_ADC_IsEnabled>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4323      	orrs	r3, r4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d112      	bne.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bfa:	f023 030f 	bic.w	r3, r3, #15
 8001bfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c02:	e009      	b.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c16:	e000      	b.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	377c      	adds	r7, #124	; 0x7c
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	50040000 	.word	0x50040000
 8001c34:	50040100 	.word	0x50040100
 8001c38:	50040300 	.word	0x50040300
 8001c3c:	50040200 	.word	0x50040200

08001c40 <__NVIC_SetPriorityGrouping>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff4c 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc2:	f7ff ff61 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001dc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7ff ffb1 	bl	8001d34 <NVIC_EncodePriority>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff80 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff54 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	e17f      	b.n	8002114 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8171 	beq.w	800210e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d00b      	beq.n	8001e4c <HAL_GPIO_Init+0x48>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e40:	2b11      	cmp	r3, #17
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b12      	cmp	r3, #18
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d118      	bne.n	8001eec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x128>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b12      	cmp	r3, #18
 8001f2a:	d123      	bne.n	8001f74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	6939      	ldr	r1, [r7, #16]
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80ac 	beq.w	800210e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HAL_GPIO_Init+0x330>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	4a5e      	ldr	r2, [pc, #376]	; (8002134 <HAL_GPIO_Init+0x330>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_GPIO_Init+0x330>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_GPIO_Init+0x334>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x242>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	; (800213c <HAL_GPIO_Init+0x338>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x23e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_GPIO_Init+0x33c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x23a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x340>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x236>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x344>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x232>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x348>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x22e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <HAL_GPIO_Init+0x34c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x22a>
 800202a:	2306      	movs	r3, #6
 800202c:	e00c      	b.n	8002048 <HAL_GPIO_Init+0x244>
 800202e:	2307      	movs	r3, #7
 8002030:	e00a      	b.n	8002048 <HAL_GPIO_Init+0x244>
 8002032:	2305      	movs	r3, #5
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x244>
 8002036:	2304      	movs	r3, #4
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x244>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x244>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x244>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x244>
 8002046:	2300      	movs	r3, #0
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002058:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_GPIO_Init+0x334>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_GPIO_Init+0x350>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800208a:	4a32      	ldr	r2, [pc, #200]	; (8002154 <HAL_GPIO_Init+0x350>)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_GPIO_Init+0x350>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <HAL_GPIO_Init+0x350>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_GPIO_Init+0x350>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_GPIO_Init+0x350>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_GPIO_Init+0x350>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_GPIO_Init+0x350>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	f47f ae78 	bne.w	8001e14 <HAL_GPIO_Init+0x10>
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	48000400 	.word	0x48000400
 8002140:	48000800 	.word	0x48000800
 8002144:	48000c00 	.word	0x48000c00
 8002148:	48001000 	.word	0x48001000
 800214c:	48001400 	.word	0x48001400
 8002150:	48001800 	.word	0x48001800
 8002154:	40010400 	.word	0x40010400

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002174:	e002      	b.n	800217c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b2:	d130      	bne.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c0:	d038      	beq.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2232      	movs	r2, #50	; 0x32
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e8:	e002      	b.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d102      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f2      	bne.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002210:	d110      	bne.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e00f      	b.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d007      	beq.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800222c:	4a05      	ldr	r2, [pc, #20]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40007000 	.word	0x40007000
 8002248:	20000000 	.word	0x20000000
 800224c:	431bde83 	.word	0x431bde83

08002250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3d4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	4ba1      	ldr	r3, [pc, #644]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226c:	4b9e      	ldr	r3, [pc, #632]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80e4 	beq.w	800244c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_RCC_OscConfig+0x4a>
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	f040 808b 	bne.w	80023a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b01      	cmp	r3, #1
 8002296:	f040 8087 	bne.w	80023a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229a:	4b93      	ldr	r3, [pc, #588]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x62>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e3ac      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1a      	ldr	r2, [r3, #32]
 80022b6:	4b8c      	ldr	r3, [pc, #560]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_RCC_OscConfig+0x7c>
 80022c2:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_OscConfig+0x88>
 80022cc:	4b86      	ldr	r3, [pc, #536]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d223      	bcs.n	8002324 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fd5d 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e38d      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	4b7d      	ldr	r3, [pc, #500]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7c      	ldr	r2, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b7a      	ldr	r3, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4977      	ldr	r1, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230e:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4972      	ldr	r1, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
 8002322:	e025      	b.n	8002370 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002324:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6f      	ldr	r2, [pc, #444]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	496a      	ldr	r1, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002342:	4b69      	ldr	r3, [pc, #420]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4965      	ldr	r1, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fd1d 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e34d      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002370:	f000 fc36 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	495a      	ldr	r1, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x29c>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_OscConfig+0x2a0>)
 800238e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x2a4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fb8f 	bl	8000ab8 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d052      	beq.n	800244a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	e331      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023bc:	f7fe fc8c 	bl	8000cd8 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c4:	f7fe fc88 	bl	8000cd8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e31a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	493b      	ldr	r1, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	4936      	ldr	r1, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e01a      	b.n	800244c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002422:	f7fe fc59 	bl	8000cd8 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800242a:	f7fe fc55 	bl	8000cd8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e2e7      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800243c:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x1da>
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800244a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d074      	beq.n	8002542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x21a>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d10e      	bne.n	8002482 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d10b      	bne.n	8002482 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d064      	beq.n	8002540 <HAL_RCC_OscConfig+0x2f0>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d160      	bne.n	8002540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e2c4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x24a>
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e01d      	b.n	80024d6 <HAL_RCC_OscConfig+0x286>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0x26e>
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e00b      	b.n	80024d6 <HAL_RCC_OscConfig+0x286>
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01c      	beq.n	8002518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fbfb 	bl	8000cd8 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e4:	e011      	b.n	800250a <HAL_RCC_OscConfig+0x2ba>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08006bcc 	.word	0x08006bcc
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fbee 	bl	8000cd8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e280      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	4baf      	ldr	r3, [pc, #700]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2a8>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fbde 	bl	8000cd8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fbda 	bl	8000cd8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e26c      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002532:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x2d0>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d060      	beq.n	8002610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x310>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d119      	bne.n	800258e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d116      	bne.n	800258e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002560:	4b99      	ldr	r3, [pc, #612]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x328>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e249      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b93      	ldr	r3, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	4990      	ldr	r1, [pc, #576]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258c:	e040      	b.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d023      	beq.n	80025de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002596:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a8b      	ldr	r2, [pc, #556]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fb99 	bl	8000cd8 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025aa:	f7fe fb95 	bl	8000cd8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e227      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	497c      	ldr	r1, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	e018      	b.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a79      	ldr	r2, [pc, #484]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fb75 	bl	8000cd8 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7fe fb71 	bl	8000cd8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e203      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002604:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03c      	beq.n	8002696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe fb50 	bl	8000cd8 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7fe fb4c 	bl	8000cd8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1de      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800264e:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCC_OscConfig+0x3ec>
 800265c:	e01b      	b.n	8002696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe fb33 	bl	8000cd8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7fe fb2f 	bl	8000cd8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1c1      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ef      	bne.n	8002676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80a6 	beq.w	80027f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10d      	bne.n	80026d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b4:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	6593      	str	r3, [r2, #88]	; 0x58
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d0:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d118      	bne.n	800270e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e8:	f7fe faf6 	bl	8000cd8 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe faf2 	bl	8000cd8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e184      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x4d8>
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002726:	e024      	b.n	8002772 <HAL_RCC_OscConfig+0x522>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d110      	bne.n	8002752 <HAL_RCC_OscConfig+0x502>
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002750:	e00f      	b.n	8002772 <HAL_RCC_OscConfig+0x522>
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800276a:	f023 0304 	bic.w	r3, r3, #4
 800276e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe faad 	bl	8000cd8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe faa9 	bl	8000cd8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e139      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ed      	beq.n	8002782 <HAL_RCC_OscConfig+0x532>
 80027a6:	e01a      	b.n	80027de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fa96 	bl	8000cd8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fa92 	bl	8000cd8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d906      	bls.n	80027d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e122      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d0:	4b90      	ldr	r3, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e8      	bne.n	80027b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027de:	7ffb      	ldrb	r3, [r7, #31]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b8b      	ldr	r3, [pc, #556]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a8a      	ldr	r2, [pc, #552]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8108 	beq.w	8002a0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2b02      	cmp	r3, #2
 8002800:	f040 80d0 	bne.w	80029a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002804:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	429a      	cmp	r2, r3
 8002816:	d130      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	3b01      	subs	r3, #1
 8002824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d127      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d11f      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002844:	2a07      	cmp	r2, #7
 8002846:	bf14      	ite	ne
 8002848:	2201      	movne	r2, #1
 800284a:	2200      	moveq	r2, #0
 800284c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	4293      	cmp	r3, r2
 8002850:	d113      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d109      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	3b01      	subs	r3, #1
 8002874:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d06e      	beq.n	8002958 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d069      	beq.n	8002954 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002880:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800288c:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b7      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800289c:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a8:	f7fe fa16 	bl	8000cd8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fa12 	bl	8000cd8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0a4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_RCC_OscConfig+0x7c8>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028de:	3a01      	subs	r2, #1
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028e8:	0212      	lsls	r2, r2, #8
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028f0:	0852      	lsrs	r2, r2, #1
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0552      	lsls	r2, r2, #21
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028fc:	0852      	lsrs	r2, r2, #1
 80028fe:	3a01      	subs	r2, #1
 8002900:	0652      	lsls	r2, r2, #25
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002908:	0912      	lsrs	r2, r2, #4
 800290a:	0452      	lsls	r2, r2, #17
 800290c:	430a      	orrs	r2, r1
 800290e:	4941      	ldr	r1, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a3b      	ldr	r2, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800292c:	f7fe f9d4 	bl	8000cd8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe f9d0 	bl	8000cd8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e062      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002952:	e05a      	b.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e059      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d152      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800297c:	f7fe f9ac 	bl	8000cd8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe f9a8 	bl	8000cd8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e03a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x734>
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d02d      	beq.n	8002a06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029c8:	f023 0303 	bic.w	r3, r3, #3
 80029cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe f97b 	bl	8000cd8 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe f977 	bl	8000cd8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x796>
 8002a04:	e001      	b.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	f99d808c 	.word	0xf99d808c

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0c8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4961      	ldr	r1, [pc, #388]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d04c      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d121      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e09e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d115      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e092      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e086      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e07e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac4:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 0203 	bic.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	493f      	ldr	r1, [pc, #252]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad6:	f7fe f8ff 	bl	8000cd8 <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7fe f8fb 	bl	8000cd8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e066      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 020c 	and.w	r2, r3, #12
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d1eb      	bne.n	8002ade <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	492c      	ldr	r1, [pc, #176]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d210      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4924      	ldr	r1, [pc, #144]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e036      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4918      	ldr	r1, [pc, #96]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4910      	ldr	r1, [pc, #64]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b92:	f000 f825 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd ff7e 	bl	8000ab8 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08006bcc 	.word	0x08006bcc
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11e      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c20:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d134      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0xac>
 8002c84:	e005      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c88:	617b      	str	r3, [r7, #20]
      break;
 8002c8a:	e005      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c8e:	617b      	str	r3, [r7, #20]
      break;
 8002c90:	e002      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	617b      	str	r3, [r7, #20]
      break;
 8002c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	fb02 f203 	mul.w	r2, r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0e5b      	lsrs	r3, r3, #25
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08006be4 	.word	0x08006be4
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0adb      	lsrs	r3, r3, #11
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08006bdc 	.word	0x08006bdc

08002d3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	220f      	movs	r2, #15
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_RCC_GetClockConfig+0x60>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40022000 	.word	0x40022000

08002da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002db8:	f7ff f9e6 	bl	8002188 <HAL_PWREx_GetVoltageRange>
 8002dbc:	6178      	str	r0, [r7, #20]
 8002dbe:	e014      	b.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	6593      	str	r3, [r2, #88]	; 0x58
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dd8:	f7ff f9d6 	bl	8002188 <HAL_PWREx_GetVoltageRange>
 8002ddc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df0:	d10b      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d919      	bls.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2ba0      	cmp	r3, #160	; 0xa0
 8002dfc:	d902      	bls.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dfe:	2302      	movs	r3, #2
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e013      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e010      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d902      	bls.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e10:	2303      	movs	r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e00a      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d102      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e004      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b70      	cmp	r3, #112	; 0x70
 8002e26:	d101      	bne.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e28:	2301      	movs	r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 0207 	bic.w	r2, r3, #7
 8002e34:	4909      	ldr	r1, [pc, #36]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40022000 	.word	0x40022000

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e68:	2300      	movs	r3, #0
 8002e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d041      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e84:	d02a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e8a:	d824      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e96:	d81e      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ea2:	e018      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea4:	4b86      	ldr	r3, [pc, #536]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a85      	ldr	r2, [pc, #532]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb0:	e015      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fabb 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec2:	e00c      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3320      	adds	r3, #32
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fba6 	bl	800361c <RCCEx_PLLSAI2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee4:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef2:	4973      	ldr	r1, [pc, #460]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002efa:	e001      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d041      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f14:	d02a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f1a:	d824      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f26:	d81e      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d010      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f32:	e018      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f34:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a61      	ldr	r2, [pc, #388]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f40:	e015      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa73 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f52:	e00c      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3320      	adds	r3, #32
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb5e 	bl	800361c <RCCEx_PLLSAI2_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f64:	e003      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	74fb      	strb	r3, [r7, #19]
      break;
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f74:	4b52      	ldr	r3, [pc, #328]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f82:	494f      	ldr	r1, [pc, #316]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f8a:	e001      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a0 	beq.w	80030de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	4a40      	ldr	r2, [pc, #256]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc4:	4b3e      	ldr	r3, [pc, #248]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe0:	f7fd fe7a 	bl	8000cd8 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe6:	e009      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7fd fe76 	bl	8000cd8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8002ffa:	e005      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ef      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d15c      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	d019      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd fe35 	bl	8000cd8 <HAL_GetTick>
 800306e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003070:	e00b      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fd fe31 	bl	8000cd8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d902      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	74fb      	strb	r3, [r7, #19]
            break;
 8003088:	e006      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ec      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ae:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030cc:	7c7b      	ldrb	r3, [r7, #17]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b9e      	ldr	r3, [pc, #632]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	4a9d      	ldr	r2, [pc, #628]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ea:	4b98      	ldr	r3, [pc, #608]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f023 0203 	bic.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	4994      	ldr	r1, [pc, #592]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800310c:	4b8f      	ldr	r3, [pc, #572]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 020c 	bic.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	498c      	ldr	r1, [pc, #560]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800312e:	4b87      	ldr	r3, [pc, #540]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	4983      	ldr	r1, [pc, #524]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003150:	4b7e      	ldr	r3, [pc, #504]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	497b      	ldr	r1, [pc, #492]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	4972      	ldr	r1, [pc, #456]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003194:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	496a      	ldr	r1, [pc, #424]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	4961      	ldr	r1, [pc, #388]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031d8:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	4959      	ldr	r1, [pc, #356]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031fa:	4b54      	ldr	r3, [pc, #336]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	4950      	ldr	r1, [pc, #320]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800321c:	4b4b      	ldr	r3, [pc, #300]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	4948      	ldr	r1, [pc, #288]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800323e:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	493f      	ldr	r1, [pc, #252]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d028      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003260:	4b3a      	ldr	r3, [pc, #232]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326e:	4937      	ldr	r1, [pc, #220]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327e:	d106      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003280:	4b32      	ldr	r3, [pc, #200]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a31      	ldr	r2, [pc, #196]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800328a:	60d3      	str	r3, [r2, #12]
 800328c:	e011      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003296:	d10c      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f8c8 	bl	8003434 <RCCEx_PLLSAI1_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	491f      	ldr	r1, [pc, #124]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032dc:	d106      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4a1a      	ldr	r2, [pc, #104]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e8:	60d3      	str	r3, [r2, #12]
 80032ea:	e011      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f4:	d10c      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2101      	movs	r1, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f899 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02b      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333a:	d109      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a02      	ldr	r2, [pc, #8]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003346:	60d3      	str	r3, [r2, #12]
 8003348:	e014      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003358:	d10c      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	2101      	movs	r1, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f867 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02f      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800338e:	4928      	ldr	r1, [pc, #160]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339e:	d10d      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	2102      	movs	r1, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f844 	bl	8003434 <RCCEx_PLLSAI1_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d014      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	74bb      	strb	r3, [r7, #18]
 80033ba:	e011      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3320      	adds	r3, #32
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f925 	bl	800361c <RCCEx_PLLSAI2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fa:	490d      	ldr	r1, [pc, #52]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341e:	4904      	ldr	r1, [pc, #16]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003426:	7cbb      	ldrb	r3, [r7, #18]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000

08003434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003442:	4b75      	ldr	r3, [pc, #468]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d018      	beq.n	8003480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0203 	and.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d10d      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
       ||
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003466:	4b6c      	ldr	r3, [pc, #432]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
       ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d047      	beq.n	800350a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	e044      	b.n	800350a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d018      	beq.n	80034ba <RCCEx_PLLSAI1_Config+0x86>
 8003488:	2b03      	cmp	r3, #3
 800348a:	d825      	bhi.n	80034d8 <RCCEx_PLLSAI1_Config+0xa4>
 800348c:	2b01      	cmp	r3, #1
 800348e:	d002      	beq.n	8003496 <RCCEx_PLLSAI1_Config+0x62>
 8003490:	2b02      	cmp	r3, #2
 8003492:	d009      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x74>
 8003494:	e020      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003496:	4b60      	ldr	r3, [pc, #384]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11d      	bne.n	80034de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a6:	e01a      	b.n	80034de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034a8:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d116      	bne.n	80034e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b8:	e013      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ba:	4b57      	ldr	r3, [pc, #348]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034c6:	4b54      	ldr	r3, [pc, #336]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034d6:	e006      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      break;
 80034dc:	e004      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10d      	bne.n	800350a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	430b      	orrs	r3, r1
 8003504:	4944      	ldr	r1, [pc, #272]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d17d      	bne.n	800360c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a40      	ldr	r2, [pc, #256]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003516:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800351a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351c:	f7fd fbdc 	bl	8000cd8 <HAL_GetTick>
 8003520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003522:	e009      	b.n	8003538 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003524:	f7fd fbd8 	bl	8000cd8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d902      	bls.n	8003538 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	73fb      	strb	r3, [r7, #15]
        break;
 8003536:	e005      	b.n	8003544 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003538:	4b37      	ldr	r3, [pc, #220]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ef      	bne.n	8003524 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d160      	bne.n	800360c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003550:	4b31      	ldr	r3, [pc, #196]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6892      	ldr	r2, [r2, #8]
 8003560:	0211      	lsls	r1, r2, #8
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	0912      	lsrs	r2, r2, #4
 8003568:	0452      	lsls	r2, r2, #17
 800356a:	430a      	orrs	r2, r1
 800356c:	492a      	ldr	r1, [pc, #168]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
 8003572:	e027      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d112      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003582:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	0211      	lsls	r1, r2, #8
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6912      	ldr	r2, [r2, #16]
 8003590:	0852      	lsrs	r2, r2, #1
 8003592:	3a01      	subs	r2, #1
 8003594:	0552      	lsls	r2, r2, #21
 8003596:	430a      	orrs	r2, r1
 8003598:	491f      	ldr	r1, [pc, #124]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	610b      	str	r3, [r1, #16]
 800359e:	e011      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6892      	ldr	r2, [r2, #8]
 80035b0:	0211      	lsls	r1, r2, #8
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6952      	ldr	r2, [r2, #20]
 80035b6:	0852      	lsrs	r2, r2, #1
 80035b8:	3a01      	subs	r2, #1
 80035ba:	0652      	lsls	r2, r2, #25
 80035bc:	430a      	orrs	r2, r1
 80035be:	4916      	ldr	r1, [pc, #88]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fd fb82 	bl	8000cd8 <HAL_GetTick>
 80035d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035d6:	e009      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d8:	f7fd fb7e 	bl	8000cd8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	73fb      	strb	r3, [r7, #15]
          break;
 80035ea:	e005      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	4904      	ldr	r1, [pc, #16]	; (8003618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000

0800361c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800362a:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003636:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0203 	and.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d10d      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
       ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
       ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d047      	beq.n	80036f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e044      	b.n	80036f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d018      	beq.n	80036a2 <RCCEx_PLLSAI2_Config+0x86>
 8003670:	2b03      	cmp	r3, #3
 8003672:	d825      	bhi.n	80036c0 <RCCEx_PLLSAI2_Config+0xa4>
 8003674:	2b01      	cmp	r3, #1
 8003676:	d002      	beq.n	800367e <RCCEx_PLLSAI2_Config+0x62>
 8003678:	2b02      	cmp	r3, #2
 800367a:	d009      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x74>
 800367c:	e020      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800367e:	4b55      	ldr	r3, [pc, #340]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d11d      	bne.n	80036c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368e:	e01a      	b.n	80036c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d116      	bne.n	80036ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a0:	e013      	b.n	80036ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036a2:	4b4c      	ldr	r3, [pc, #304]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ae:	4b49      	ldr	r3, [pc, #292]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036be:	e006      	b.n	80036ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	e004      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	430b      	orrs	r3, r1
 80036ec:	4939      	ldr	r1, [pc, #228]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d167      	bne.n	80037c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036f8:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a35      	ldr	r2, [pc, #212]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003704:	f7fd fae8 	bl	8000cd8 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800370a:	e009      	b.n	8003720 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800370c:	f7fd fae4 	bl	8000cd8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	73fb      	strb	r3, [r7, #15]
        break;
 800371e:	e005      	b.n	800372c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003720:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ef      	bne.n	800370c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d14a      	bne.n	80037c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d111      	bne.n	800375c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6892      	ldr	r2, [r2, #8]
 8003748:	0211      	lsls	r1, r2, #8
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68d2      	ldr	r2, [r2, #12]
 800374e:	0912      	lsrs	r2, r2, #4
 8003750:	0452      	lsls	r2, r2, #17
 8003752:	430a      	orrs	r2, r1
 8003754:	491f      	ldr	r1, [pc, #124]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	614b      	str	r3, [r1, #20]
 800375a:	e011      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003764:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6892      	ldr	r2, [r2, #8]
 800376c:	0211      	lsls	r1, r2, #8
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6912      	ldr	r2, [r2, #16]
 8003772:	0852      	lsrs	r2, r2, #1
 8003774:	3a01      	subs	r2, #1
 8003776:	0652      	lsls	r2, r2, #25
 8003778:	430a      	orrs	r2, r1
 800377a:	4916      	ldr	r1, [pc, #88]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd faa4 	bl	8000cd8 <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003792:	e009      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003794:	f7fd faa0 	bl	8000cd8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d902      	bls.n	80037a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	73fb      	strb	r3, [r7, #15]
          break;
 80037a6:	e005      	b.n	80037b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4904      	ldr	r1, [pc, #16]	; (80037d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e049      	b.n	800387e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f8ee 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fc24 	bl	8004064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04f      	b.n	8003940 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_TIM_Base_Start_IT+0xc4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x76>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d018      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x76>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_TIM_Base_Start_IT+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x76>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_TIM_Base_Start_IT+0xcc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x76>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_TIM_Base_Start_IT+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x76>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_TIM_Base_Start_IT+0xd4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x76>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_TIM_Base_Start_IT+0xd8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d115      	bne.n	800392a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <HAL_TIM_Base_Start_IT+0xdc>)
 8003906:	4013      	ands	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b06      	cmp	r3, #6
 800390e:	d015      	beq.n	800393c <HAL_TIM_Base_Start_IT+0xb4>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003916:	d011      	beq.n	800393c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003928:	e008      	b.n	800393c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e000      	b.n	800393e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40013400 	.word	0x40013400
 8003960:	40014000 	.word	0x40014000
 8003964:	00010007 	.word	0x00010007

08003968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e049      	b.n	8003a0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f841 	bl	8003a16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f000 fb5c 	bl	8004064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d122      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d11b      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0202 	mvn.w	r2, #2
 8003a56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fadb 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003a72:	e005      	b.n	8003a80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 facd 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fade 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d122      	bne.n	8003ada <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d11b      	bne.n	8003ada <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0204 	mvn.w	r2, #4
 8003aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fab1 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003ac6:	e005      	b.n	8003ad4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 faa3 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fab4 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d122      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d11b      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f06f 0208 	mvn.w	r2, #8
 8003afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2204      	movs	r2, #4
 8003b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa87 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003b1a:	e005      	b.n	8003b28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fa79 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa8a 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d122      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d11b      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0210 	mvn.w	r2, #16
 8003b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2208      	movs	r2, #8
 8003b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa5d 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003b6e:	e005      	b.n	8003b7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa4f 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa60 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10e      	bne.n	8003bae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0201 	mvn.w	r2, #1
 8003ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fc fe71 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d10e      	bne.n	8003bda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b80      	cmp	r3, #128	; 0x80
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fee1 	bl	800499c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fed4 	bl	80049b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa0e 	bl	8004050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0220 	mvn.w	r2, #32
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fe94 	bl	8004988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0fd      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b14      	cmp	r3, #20
 8003c8e:	f200 80f0 	bhi.w	8003e72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003e73 	.word	0x08003e73
 8003ca0:	08003e73 	.word	0x08003e73
 8003ca4:	08003e73 	.word	0x08003e73
 8003ca8:	08003d2d 	.word	0x08003d2d
 8003cac:	08003e73 	.word	0x08003e73
 8003cb0:	08003e73 	.word	0x08003e73
 8003cb4:	08003e73 	.word	0x08003e73
 8003cb8:	08003d6f 	.word	0x08003d6f
 8003cbc:	08003e73 	.word	0x08003e73
 8003cc0:	08003e73 	.word	0x08003e73
 8003cc4:	08003e73 	.word	0x08003e73
 8003cc8:	08003daf 	.word	0x08003daf
 8003ccc:	08003e73 	.word	0x08003e73
 8003cd0:	08003e73 	.word	0x08003e73
 8003cd4:	08003e73 	.word	0x08003e73
 8003cd8:	08003df1 	.word	0x08003df1
 8003cdc:	08003e73 	.word	0x08003e73
 8003ce0:	08003e73 	.word	0x08003e73
 8003ce4:	08003e73 	.word	0x08003e73
 8003ce8:	08003e31 	.word	0x08003e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa50 	bl	8004198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
      break;
 8003d2a:	e0a3      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fac0 	bl	80042b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e082      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fb29 	bl	80043cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0208 	orr.w	r2, r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
      break;
 8003dac:	e062      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb91 	bl	80044dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
      break;
 8003dee:	e041      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fbda 	bl	80045b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e2e:	e021      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fc1e 	bl	8004678 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003e72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop

08003e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_ConfigClockSource+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0b5      	b.n	800400c <HAL_TIM_ConfigClockSource+0x184>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003edc:	d03e      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xd4>
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	f200 8087 	bhi.w	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	f000 8085 	beq.w	8003ff8 <HAL_TIM_ConfigClockSource+0x170>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d87f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d01a      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xa6>
 8003ef8:	2b70      	cmp	r3, #112	; 0x70
 8003efa:	d87b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b60      	cmp	r3, #96	; 0x60
 8003efe:	d050      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f00:	2b60      	cmp	r3, #96	; 0x60
 8003f02:	d877      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b50      	cmp	r3, #80	; 0x50
 8003f06:	d03c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xfa>
 8003f08:	2b50      	cmp	r3, #80	; 0x50
 8003f0a:	d873      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d058      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d86f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b30      	cmp	r3, #48	; 0x30
 8003f16:	d064      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f18:	2b30      	cmp	r3, #48	; 0x30
 8003f1a:	d86b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d060      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d867      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05c      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d05a      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f2c:	e062      	b.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6899      	ldr	r1, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f000 fc7b 	bl	8004838 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	609a      	str	r2, [r3, #8]
      break;
 8003f5a:	e04e      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f000 fc64 	bl	8004838 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7e:	609a      	str	r2, [r3, #8]
      break;
 8003f80:	e03b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fbd8 	bl	8004744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2150      	movs	r1, #80	; 0x50
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fc31 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e02b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fbf7 	bl	80047a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2160      	movs	r1, #96	; 0x60
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fc21 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e01b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 fbb8 	bl	8004744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fc11 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 fc08 	bl	8004802 <TIM_ITRx_SetConfig>
        break;
 8003ff2:	e002      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003ff8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a40      	ldr	r2, [pc, #256]	; (8004178 <TIM_Base_SetConfig+0x114>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d00f      	beq.n	80040a4 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3d      	ldr	r2, [pc, #244]	; (800417c <TIM_Base_SetConfig+0x118>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3c      	ldr	r2, [pc, #240]	; (8004180 <TIM_Base_SetConfig+0x11c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_Base_SetConfig+0x40>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a3b      	ldr	r2, [pc, #236]	; (8004184 <TIM_Base_SetConfig+0x120>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0x40>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a3a      	ldr	r2, [pc, #232]	; (8004188 <TIM_Base_SetConfig+0x124>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d108      	bne.n	80040b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <TIM_Base_SetConfig+0x114>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d01b      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2c      	ldr	r2, [pc, #176]	; (800417c <TIM_Base_SetConfig+0x118>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d017      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2b      	ldr	r2, [pc, #172]	; (8004180 <TIM_Base_SetConfig+0x11c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <TIM_Base_SetConfig+0x120>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00f      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a29      	ldr	r2, [pc, #164]	; (8004188 <TIM_Base_SetConfig+0x124>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00b      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a28      	ldr	r2, [pc, #160]	; (800418c <TIM_Base_SetConfig+0x128>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d007      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <TIM_Base_SetConfig+0x12c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d003      	beq.n	80040fe <TIM_Base_SetConfig+0x9a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <TIM_Base_SetConfig+0x130>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d108      	bne.n	8004110 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <TIM_Base_SetConfig+0x114>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <TIM_Base_SetConfig+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a11      	ldr	r2, [pc, #68]	; (800418c <TIM_Base_SetConfig+0x128>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0xf8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <TIM_Base_SetConfig+0x12c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0xf8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <TIM_Base_SetConfig+0x130>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d103      	bne.n	8004164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	615a      	str	r2, [r3, #20]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800

08004198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 0302 	bic.w	r3, r3, #2
 80041e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <TIM_OC1_SetConfig+0x10c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00f      	beq.n	8004218 <TIM_OC1_SetConfig+0x80>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <TIM_OC1_SetConfig+0x110>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_OC1_SetConfig+0x80>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a2a      	ldr	r2, [pc, #168]	; (80042ac <TIM_OC1_SetConfig+0x114>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_OC1_SetConfig+0x80>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <TIM_OC1_SetConfig+0x118>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_OC1_SetConfig+0x80>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <TIM_OC1_SetConfig+0x11c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10c      	bne.n	8004232 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0308 	bic.w	r3, r3, #8
 800421e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 0304 	bic.w	r3, r3, #4
 8004230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <TIM_OC1_SetConfig+0x10c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00f      	beq.n	800425a <TIM_OC1_SetConfig+0xc2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <TIM_OC1_SetConfig+0x110>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00b      	beq.n	800425a <TIM_OC1_SetConfig+0xc2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a19      	ldr	r2, [pc, #100]	; (80042ac <TIM_OC1_SetConfig+0x114>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d007      	beq.n	800425a <TIM_OC1_SetConfig+0xc2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <TIM_OC1_SetConfig+0x118>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d003      	beq.n	800425a <TIM_OC1_SetConfig+0xc2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <TIM_OC1_SetConfig+0x11c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d111      	bne.n	800427e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	621a      	str	r2, [r3, #32]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40013400 	.word	0x40013400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40014400 	.word	0x40014400
 80042b4:	40014800 	.word	0x40014800

080042b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0210 	bic.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <TIM_OC2_SetConfig+0x100>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC2_SetConfig+0x6c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <TIM_OC2_SetConfig+0x104>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10d      	bne.n	8004340 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <TIM_OC2_SetConfig+0x100>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00f      	beq.n	8004368 <TIM_OC2_SetConfig+0xb0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <TIM_OC2_SetConfig+0x104>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_OC2_SetConfig+0xb0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <TIM_OC2_SetConfig+0x108>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_OC2_SetConfig+0xb0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <TIM_OC2_SetConfig+0x10c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC2_SetConfig+0xb0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <TIM_OC2_SetConfig+0x110>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d113      	bne.n	8004390 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800436e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40013400 	.word	0x40013400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800

080043cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <TIM_OC3_SetConfig+0xfc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC3_SetConfig+0x6a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <TIM_OC3_SetConfig+0x100>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10d      	bne.n	8004452 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <TIM_OC3_SetConfig+0xfc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_OC3_SetConfig+0xae>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <TIM_OC3_SetConfig+0x100>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_OC3_SetConfig+0xae>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <TIM_OC3_SetConfig+0x104>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_OC3_SetConfig+0xae>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <TIM_OC3_SetConfig+0x108>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_OC3_SetConfig+0xae>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <TIM_OC3_SetConfig+0x10c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d113      	bne.n	80044a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800

080044dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800452a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a18      	ldr	r2, [pc, #96]	; (800459c <TIM_OC4_SetConfig+0xc0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00f      	beq.n	8004560 <TIM_OC4_SetConfig+0x84>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <TIM_OC4_SetConfig+0xc4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_OC4_SetConfig+0x84>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <TIM_OC4_SetConfig+0xc8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_OC4_SetConfig+0x84>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <TIM_OC4_SetConfig+0xcc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC4_SetConfig+0x84>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a14      	ldr	r2, [pc, #80]	; (80045ac <TIM_OC4_SetConfig+0xd0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d109      	bne.n	8004574 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40013400 	.word	0x40013400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800

080045b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a17      	ldr	r2, [pc, #92]	; (8004664 <TIM_OC5_SetConfig+0xb4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_OC5_SetConfig+0x7a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a16      	ldr	r2, [pc, #88]	; (8004668 <TIM_OC5_SetConfig+0xb8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_OC5_SetConfig+0x7a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <TIM_OC5_SetConfig+0xbc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_OC5_SetConfig+0x7a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <TIM_OC5_SetConfig+0xc0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_OC5_SetConfig+0x7a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a13      	ldr	r2, [pc, #76]	; (8004674 <TIM_OC5_SetConfig+0xc4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d109      	bne.n	800463e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40013400 	.word	0x40013400
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800

08004678 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	051b      	lsls	r3, r3, #20
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <TIM_OC6_SetConfig+0xb8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00f      	beq.n	80046f4 <TIM_OC6_SetConfig+0x7c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <TIM_OC6_SetConfig+0xbc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00b      	beq.n	80046f4 <TIM_OC6_SetConfig+0x7c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a16      	ldr	r2, [pc, #88]	; (8004738 <TIM_OC6_SetConfig+0xc0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d007      	beq.n	80046f4 <TIM_OC6_SetConfig+0x7c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <TIM_OC6_SetConfig+0xc4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC6_SetConfig+0x7c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a14      	ldr	r2, [pc, #80]	; (8004740 <TIM_OC6_SetConfig+0xc8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d109      	bne.n	8004708 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	029b      	lsls	r3, r3, #10
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40013400 	.word	0x40013400
 8004738:	40014000 	.word	0x40014000
 800473c:	40014400 	.word	0x40014400
 8004740:	40014800 	.word	0x40014800

08004744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 030a 	bic.w	r3, r3, #10
 8004780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b087      	sub	sp, #28
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0210 	bic.w	r2, r3, #16
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	f043 0307 	orr.w	r3, r3, #7
 8004824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	431a      	orrs	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e068      	b.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2e      	ldr	r2, [pc, #184]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2d      	ldr	r2, [pc, #180]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d108      	bne.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01d      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d018      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1a      	ldr	r2, [pc, #104]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a13      	ldr	r2, [pc, #76]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d10c      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4313      	orrs	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40013400 	.word	0x40013400
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40000c00 	.word	0x40000c00
 8004984:	40014000 	.word	0x40014000

08004988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b08b      	sub	sp, #44	; 0x2c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	613b      	str	r3, [r7, #16]
  return result;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80049ea:	2320      	movs	r3, #32
 80049ec:	e003      	b.n	80049f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	2103      	movs	r1, #3
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	401a      	ands	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e003      	b.n	8004a24 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	372c      	adds	r7, #44	; 0x2c
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b08b      	sub	sp, #44	; 0x2c
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	fa93 f3a3 	rbit	r3, r3
 8004a88:	613b      	str	r3, [r7, #16]
  return result;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004a94:	2320      	movs	r3, #32
 8004a96:	e003      	b.n	8004aa0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2103      	movs	r1, #3
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	401a      	ands	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	e003      	b.n	8004ace <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	fab3 f383 	clz	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004adc:	bf00      	nop
 8004ade:	372c      	adds	r7, #44	; 0x2c
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b08b      	sub	sp, #44	; 0x2c
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	613b      	str	r3, [r7, #16]
  return result;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	e003      	b.n	8004b1a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	fab3 f383 	clz	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2103      	movs	r1, #3
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	401a      	ands	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	61fb      	str	r3, [r7, #28]
  return result;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	e003      	b.n	8004b48 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	60da      	str	r2, [r3, #12]
}
 8004b56:	bf00      	nop
 8004b58:	372c      	adds	r7, #44	; 0x2c
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b08b      	sub	sp, #44	; 0x2c
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	613b      	str	r3, [r7, #16]
  return result;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	e003      	b.n	8004b94 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	210f      	movs	r1, #15
 8004b98:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	61fb      	str	r3, [r7, #28]
  return result;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004bb6:	2320      	movs	r3, #32
 8004bb8:	e003      	b.n	8004bc2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	fab3 f383 	clz	r3, r3
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004bd0:	bf00      	nop
 8004bd2:	372c      	adds	r7, #44	; 0x2c
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b08b      	sub	sp, #44	; 0x2c
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	613b      	str	r3, [r7, #16]
  return result;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e003      	b.n	8004c10 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	210f      	movs	r1, #15
 8004c14:	fa01 f303 	lsl.w	r3, r1, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	61fb      	str	r3, [r7, #28]
  return result;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004c34:	2320      	movs	r3, #32
 8004c36:	e003      	b.n	8004c40 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	fab3 f383 	clz	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004c4e:	bf00      	nop
 8004c50:	372c      	adds	r7, #44	; 0x2c
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b088      	sub	sp, #32
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	60fb      	str	r3, [r7, #12]
  return result;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <LL_GPIO_Init+0x26>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004c8a:	e048      	b.n	8004d1e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d03a      	beq.n	8004d18 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d003      	beq.n	8004cb2 <LL_GPIO_Init+0x58>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d10e      	bne.n	8004cd0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fed7 	bl	8004a6e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff feb7 	bl	8004a3e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	69b9      	ldr	r1, [r7, #24]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff05 	bl	8004ae8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d111      	bne.n	8004d0a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2bff      	cmp	r3, #255	; 0xff
 8004cea:	d807      	bhi.n	8004cfc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	69b9      	ldr	r1, [r7, #24]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff34 	bl	8004b62 <LL_GPIO_SetAFPin_0_7>
 8004cfa:	e006      	b.n	8004d0a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	461a      	mov	r2, r3
 8004d02:	69b9      	ldr	r1, [r7, #24]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff69 	bl	8004bdc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	69b9      	ldr	r1, [r7, #24]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fe56 	bl	80049c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1af      	bne.n	8004c8c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <LL_RCC_HSI_IsReady+0x24>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d101      	bne.n	8004d4e <LL_RCC_HSI_IsReady+0x16>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <LL_RCC_HSI_IsReady+0x18>
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000

08004d60 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <LL_RCC_LSE_IsReady+0x24>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d101      	bne.n	8004d76 <LL_RCC_LSE_IsReady+0x16>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <LL_RCC_LSE_IsReady+0x18>
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000

08004d88 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d101      	bne.n	8004d9c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40021000 	.word	0x40021000

08004dac <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <LL_RCC_MSI_GetRange+0x18>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40021000 	.word	0x40021000

08004de4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <LL_RCC_GetSysClkSource+0x18>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000

08004e00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <LL_RCC_GetAHBPrescaler+0x18>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000

08004e1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000

08004e38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000

08004e54 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <LL_RCC_GetUSARTClockSource+0x24>)
 8004e5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	401a      	ands	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	4313      	orrs	r3, r2
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40021000 	.word	0x40021000

08004e7c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <LL_RCC_GetUARTClockSource+0x24>)
 8004e86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	401a      	ands	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	4313      	orrs	r3, r2
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <LL_RCC_PLL_GetMainSource+0x18>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0303 	and.w	r3, r3, #3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ec4:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <LL_RCC_PLL_GetN+0x18>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40021000 	.word	0x40021000

08004edc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <LL_RCC_PLL_GetR+0x18>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000

08004ef8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <LL_RCC_PLL_GetDivider+0x18>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d137      	bne.n	8004f96 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff94 	bl	8004e54 <LL_RCC_GetUSARTClockSource>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	f200 80b3 	bhi.w	800509e <LL_RCC_GetUSARTClockFreq+0x18a>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f7f 	.word	0x08004f7f
 8004f44:	08004f51 	.word	0x08004f51
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f6b 	.word	0x08004f6b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004f50:	f000 f95c 	bl	800520c <RCC_GetSystemClockFreq>
 8004f54:	60f8      	str	r0, [r7, #12]
        break;
 8004f56:	e0b5      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004f58:	f7ff feee 	bl	8004d38 <LL_RCC_HSI_IsReady>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 809f 	beq.w	80050a2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8004f64:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004f66:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004f68:	e09b      	b.n	80050a2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004f6a:	f7ff fef9 	bl	8004d60 <LL_RCC_LSE_IsReady>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8098 	beq.w	80050a6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004f7c:	e093      	b.n	80050a6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004f7e:	f000 f945 	bl	800520c <RCC_GetSystemClockFreq>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f9d1 	bl	800532c <RCC_GetHCLKClockFreq>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f9f7 	bl	8005380 <RCC_GetPCLK2ClockFreq>
 8004f92:	60f8      	str	r0, [r7, #12]
        break;
 8004f94:	e096      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d146      	bne.n	800502a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff59 	bl	8004e54 <LL_RCC_GetUSARTClockSource>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004fa8:	2b0c      	cmp	r3, #12
 8004faa:	d87e      	bhi.n	80050aa <LL_RCC_GetUSARTClockFreq+0x196>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08005013 	.word	0x08005013
 8004fb8:	080050ab 	.word	0x080050ab
 8004fbc:	080050ab 	.word	0x080050ab
 8004fc0:	080050ab 	.word	0x080050ab
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	080050ab 	.word	0x080050ab
 8004fcc:	080050ab 	.word	0x080050ab
 8004fd0:	080050ab 	.word	0x080050ab
 8004fd4:	08004ff1 	.word	0x08004ff1
 8004fd8:	080050ab 	.word	0x080050ab
 8004fdc:	080050ab 	.word	0x080050ab
 8004fe0:	080050ab 	.word	0x080050ab
 8004fe4:	08005001 	.word	0x08005001
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004fe8:	f000 f910 	bl	800520c <RCC_GetSystemClockFreq>
 8004fec:	60f8      	str	r0, [r7, #12]
        break;
 8004fee:	e069      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004ff0:	f7ff fea2 	bl	8004d38 <LL_RCC_HSI_IsReady>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d059      	beq.n	80050ae <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8004ffa:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004ffc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004ffe:	e056      	b.n	80050ae <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005000:	f7ff feae 	bl	8004d60 <LL_RCC_LSE_IsReady>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d053      	beq.n	80050b2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005010:	e04f      	b.n	80050b2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005012:	f000 f8fb 	bl	800520c <RCC_GetSystemClockFreq>
 8005016:	4603      	mov	r3, r0
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f987 	bl	800532c <RCC_GetHCLKClockFreq>
 800501e:	4603      	mov	r3, r0
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f999 	bl	8005358 <RCC_GetPCLK1ClockFreq>
 8005026:	60f8      	str	r0, [r7, #12]
        break;
 8005028:	e04c      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d142      	bne.n	80050b6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff0f 	bl	8004e54 <LL_RCC_GetUSARTClockSource>
 8005036:	4603      	mov	r3, r0
 8005038:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800503c:	d01a      	beq.n	8005074 <LL_RCC_GetUSARTClockFreq+0x160>
 800503e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005042:	d83a      	bhi.n	80050ba <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005044:	4a23      	ldr	r2, [pc, #140]	; (80050d4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00c      	beq.n	8005064 <LL_RCC_GetUSARTClockFreq+0x150>
 800504a:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d834      	bhi.n	80050ba <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005054:	d017      	beq.n	8005086 <LL_RCC_GetUSARTClockFreq+0x172>
 8005056:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d12e      	bne.n	80050ba <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800505c:	f000 f8d6 	bl	800520c <RCC_GetSystemClockFreq>
 8005060:	60f8      	str	r0, [r7, #12]
          break;
 8005062:	e02f      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005064:	f7ff fe68 	bl	8004d38 <LL_RCC_HSI_IsReady>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d027      	beq.n	80050be <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005070:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005072:	e024      	b.n	80050be <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005074:	f7ff fe74 	bl	8004d60 <LL_RCC_LSE_IsReady>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d021      	beq.n	80050c2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005084:	e01d      	b.n	80050c2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005086:	f000 f8c1 	bl	800520c <RCC_GetSystemClockFreq>
 800508a:	4603      	mov	r3, r0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f94d 	bl	800532c <RCC_GetHCLKClockFreq>
 8005092:	4603      	mov	r3, r0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f95f 	bl	8005358 <RCC_GetPCLK1ClockFreq>
 800509a:	60f8      	str	r0, [r7, #12]
          break;
 800509c:	e012      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800509e:	bf00      	nop
 80050a0:	e010      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80050a2:	bf00      	nop
 80050a4:	e00e      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80050a6:	bf00      	nop
 80050a8:	e00c      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80050aa:	bf00      	nop
 80050ac:	e00a      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80050ae:	bf00      	nop
 80050b0:	e008      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80050b2:	bf00      	nop
 80050b4:	e006      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80050b6:	bf00      	nop
 80050b8:	e004      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80050c2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	00f42400 	.word	0x00f42400
 80050d4:	00300020 	.word	0x00300020
 80050d8:	00300010 	.word	0x00300010

080050dc <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2bc0      	cmp	r3, #192	; 0xc0
 80050ec:	d136      	bne.n	800515c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fec4 	bl	8004e7c <LL_RCC_GetUARTClockSource>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80050fa:	d01a      	beq.n	8005132 <LL_RCC_GetUARTClockFreq+0x56>
 80050fc:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005100:	d82e      	bhi.n	8005160 <LL_RCC_GetUARTClockFreq+0x84>
 8005102:	4a3d      	ldr	r2, [pc, #244]	; (80051f8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00c      	beq.n	8005122 <LL_RCC_GetUARTClockFreq+0x46>
 8005108:	4a3b      	ldr	r2, [pc, #236]	; (80051f8 <LL_RCC_GetUARTClockFreq+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d828      	bhi.n	8005160 <LL_RCC_GetUARTClockFreq+0x84>
 800510e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005112:	d017      	beq.n	8005144 <LL_RCC_GetUARTClockFreq+0x68>
 8005114:	4a39      	ldr	r2, [pc, #228]	; (80051fc <LL_RCC_GetUARTClockFreq+0x120>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d122      	bne.n	8005160 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800511a:	f000 f877 	bl	800520c <RCC_GetSystemClockFreq>
 800511e:	60f8      	str	r0, [r7, #12]
        break;
 8005120:	e023      	b.n	800516a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005122:	f7ff fe09 	bl	8004d38 <LL_RCC_HSI_IsReady>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 800512c:	4b34      	ldr	r3, [pc, #208]	; (8005200 <LL_RCC_GetUARTClockFreq+0x124>)
 800512e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005130:	e018      	b.n	8005164 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005132:	f7ff fe15 	bl	8004d60 <LL_RCC_LSE_IsReady>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 800513c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005140:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005142:	e011      	b.n	8005168 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005144:	f000 f862 	bl	800520c <RCC_GetSystemClockFreq>
 8005148:	4603      	mov	r3, r0
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f8ee 	bl	800532c <RCC_GetHCLKClockFreq>
 8005150:	4603      	mov	r3, r0
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f900 	bl	8005358 <RCC_GetPCLK1ClockFreq>
 8005158:	60f8      	str	r0, [r7, #12]
        break;
 800515a:	e006      	b.n	800516a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800515c:	bf00      	nop
 800515e:	e004      	b.n	800516a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005160:	bf00      	nop
 8005162:	e002      	b.n	800516a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005164:	bf00      	nop
 8005166:	e000      	b.n	800516a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005168:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005170:	d136      	bne.n	80051e0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fe82 	bl	8004e7c <LL_RCC_GetUARTClockSource>
 8005178:	4603      	mov	r3, r0
 800517a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800517e:	d01a      	beq.n	80051b6 <LL_RCC_GetUARTClockFreq+0xda>
 8005180:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005184:	d82e      	bhi.n	80051e4 <LL_RCC_GetUARTClockFreq+0x108>
 8005186:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <LL_RCC_GetUARTClockFreq+0x128>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00c      	beq.n	80051a6 <LL_RCC_GetUARTClockFreq+0xca>
 800518c:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <LL_RCC_GetUARTClockFreq+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d828      	bhi.n	80051e4 <LL_RCC_GetUARTClockFreq+0x108>
 8005192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005196:	d017      	beq.n	80051c8 <LL_RCC_GetUARTClockFreq+0xec>
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <LL_RCC_GetUARTClockFreq+0x12c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d122      	bne.n	80051e4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800519e:	f000 f835 	bl	800520c <RCC_GetSystemClockFreq>
 80051a2:	60f8      	str	r0, [r7, #12]
        break;
 80051a4:	e023      	b.n	80051ee <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80051a6:	f7ff fdc7 	bl	8004d38 <LL_RCC_HSI_IsReady>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <LL_RCC_GetUARTClockFreq+0x124>)
 80051b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80051b4:	e018      	b.n	80051e8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80051b6:	f7ff fdd3 	bl	8004d60 <LL_RCC_LSE_IsReady>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d015      	beq.n	80051ec <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80051c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80051c6:	e011      	b.n	80051ec <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80051c8:	f000 f820 	bl	800520c <RCC_GetSystemClockFreq>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f8ac 	bl	800532c <RCC_GetHCLKClockFreq>
 80051d4:	4603      	mov	r3, r0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f8be 	bl	8005358 <RCC_GetPCLK1ClockFreq>
 80051dc:	60f8      	str	r0, [r7, #12]
        break;
 80051de:	e006      	b.n	80051ee <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80051e0:	bf00      	nop
 80051e2:	e004      	b.n	80051ee <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80051e4:	bf00      	nop
 80051e6:	e002      	b.n	80051ee <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80051ec:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	00c00080 	.word	0x00c00080
 80051fc:	00c00040 	.word	0x00c00040
 8005200:	00f42400 	.word	0x00f42400
 8005204:	03000200 	.word	0x03000200
 8005208:	03000100 	.word	0x03000100

0800520c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005212:	f7ff fde7 	bl	8004de4 <LL_RCC_GetSysClkSource>
 8005216:	4603      	mov	r3, r0
 8005218:	2b0c      	cmp	r3, #12
 800521a:	d851      	bhi.n	80052c0 <RCC_GetSystemClockFreq+0xb4>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <RCC_GetSystemClockFreq+0x18>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005259 	.word	0x08005259
 8005228:	080052c1 	.word	0x080052c1
 800522c:	080052c1 	.word	0x080052c1
 8005230:	080052c1 	.word	0x080052c1
 8005234:	080052ad 	.word	0x080052ad
 8005238:	080052c1 	.word	0x080052c1
 800523c:	080052c1 	.word	0x080052c1
 8005240:	080052c1 	.word	0x080052c1
 8005244:	080052b3 	.word	0x080052b3
 8005248:	080052c1 	.word	0x080052c1
 800524c:	080052c1 	.word	0x080052c1
 8005250:	080052c1 	.word	0x080052c1
 8005254:	080052b9 	.word	0x080052b9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005258:	f7ff fd96 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d111      	bne.n	8005286 <RCC_GetSystemClockFreq+0x7a>
 8005262:	f7ff fd91 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <RCC_GetSystemClockFreq+0x6a>
 800526c:	f7ff fd9e 	bl	8004dac <LL_RCC_MSI_GetRange>
 8005270:	4603      	mov	r3, r0
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	e003      	b.n	800527e <RCC_GetSystemClockFreq+0x72>
 8005276:	f7ff fda7 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 800527a:	4603      	mov	r3, r0
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	4a28      	ldr	r2, [pc, #160]	; (8005320 <RCC_GetSystemClockFreq+0x114>)
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	e010      	b.n	80052a8 <RCC_GetSystemClockFreq+0x9c>
 8005286:	f7ff fd7f 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <RCC_GetSystemClockFreq+0x8e>
 8005290:	f7ff fd8c 	bl	8004dac <LL_RCC_MSI_GetRange>
 8005294:	4603      	mov	r3, r0
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	e003      	b.n	80052a2 <RCC_GetSystemClockFreq+0x96>
 800529a:	f7ff fd95 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 800529e:	4603      	mov	r3, r0
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <RCC_GetSystemClockFreq+0x114>)
 80052a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80052aa:	e033      	b.n	8005314 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <RCC_GetSystemClockFreq+0x118>)
 80052ae:	607b      	str	r3, [r7, #4]
      break;
 80052b0:	e030      	b.n	8005314 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80052b2:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <RCC_GetSystemClockFreq+0x11c>)
 80052b4:	607b      	str	r3, [r7, #4]
      break;
 80052b6:	e02d      	b.n	8005314 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80052b8:	f000 f876 	bl	80053a8 <RCC_PLL_GetFreqDomain_SYS>
 80052bc:	6078      	str	r0, [r7, #4]
      break;
 80052be:	e029      	b.n	8005314 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80052c0:	f7ff fd62 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d111      	bne.n	80052ee <RCC_GetSystemClockFreq+0xe2>
 80052ca:	f7ff fd5d 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <RCC_GetSystemClockFreq+0xd2>
 80052d4:	f7ff fd6a 	bl	8004dac <LL_RCC_MSI_GetRange>
 80052d8:	4603      	mov	r3, r0
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	e003      	b.n	80052e6 <RCC_GetSystemClockFreq+0xda>
 80052de:	f7ff fd73 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 80052e2:	4603      	mov	r3, r0
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <RCC_GetSystemClockFreq+0x114>)
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	e010      	b.n	8005310 <RCC_GetSystemClockFreq+0x104>
 80052ee:	f7ff fd4b 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <RCC_GetSystemClockFreq+0xf6>
 80052f8:	f7ff fd58 	bl	8004dac <LL_RCC_MSI_GetRange>
 80052fc:	4603      	mov	r3, r0
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	e003      	b.n	800530a <RCC_GetSystemClockFreq+0xfe>
 8005302:	f7ff fd61 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005306:	4603      	mov	r3, r0
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	4a05      	ldr	r2, [pc, #20]	; (8005320 <RCC_GetSystemClockFreq+0x114>)
 800530c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005310:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005312:	bf00      	nop
  }

  return frequency;
 8005314:	687b      	ldr	r3, [r7, #4]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08006be4 	.word	0x08006be4
 8005324:	00f42400 	.word	0x00f42400
 8005328:	007a1200 	.word	0x007a1200

0800532c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005334:	f7ff fd64 	bl	8004e00 <LL_RCC_GetAHBPrescaler>
 8005338:	4603      	mov	r3, r0
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <RCC_GetHCLKClockFreq+0x28>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	40d3      	lsrs	r3, r2
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	08006bcc 	.word	0x08006bcc

08005358 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005360:	f7ff fd5c 	bl	8004e1c <LL_RCC_GetAPB1Prescaler>
 8005364:	4603      	mov	r3, r0
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	4a04      	ldr	r2, [pc, #16]	; (800537c <RCC_GetPCLK1ClockFreq+0x24>)
 800536a:	5cd3      	ldrb	r3, [r2, r3]
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	40d3      	lsrs	r3, r2
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	08006bdc 	.word	0x08006bdc

08005380 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005388:	f7ff fd56 	bl	8004e38 <LL_RCC_GetAPB2Prescaler>
 800538c:	4603      	mov	r3, r0
 800538e:	0adb      	lsrs	r3, r3, #11
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	40d3      	lsrs	r3, r2
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	08006bdc 	.word	0x08006bdc

080053a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80053ae:	f7ff fd79 	bl	8004ea4 <LL_RCC_PLL_GetMainSource>
 80053b2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d036      	beq.n	8005428 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d836      	bhi.n	800542e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d003      	beq.n	80053ce <RCC_PLL_GetFreqDomain_SYS+0x26>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d02a      	beq.n	8005422 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80053cc:	e02f      	b.n	800542e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80053ce:	f7ff fcdb 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d111      	bne.n	80053fc <RCC_PLL_GetFreqDomain_SYS+0x54>
 80053d8:	f7ff fcd6 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <RCC_PLL_GetFreqDomain_SYS+0x44>
 80053e2:	f7ff fce3 	bl	8004dac <LL_RCC_MSI_GetRange>
 80053e6:	4603      	mov	r3, r0
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	e003      	b.n	80053f4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80053ec:	f7ff fcec 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 80053f0:	4603      	mov	r3, r0
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	4a2f      	ldr	r2, [pc, #188]	; (80054b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80053f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fa:	e010      	b.n	800541e <RCC_PLL_GetFreqDomain_SYS+0x76>
 80053fc:	f7ff fcc4 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005406:	f7ff fcd1 	bl	8004dac <LL_RCC_MSI_GetRange>
 800540a:	4603      	mov	r3, r0
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	e003      	b.n	8005418 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005410:	f7ff fcda 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005414:	4603      	mov	r3, r0
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	4a26      	ldr	r2, [pc, #152]	; (80054b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005420:	e02f      	b.n	8005482 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005422:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005424:	607b      	str	r3, [r7, #4]
      break;
 8005426:	e02c      	b.n	8005482 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005428:	4b24      	ldr	r3, [pc, #144]	; (80054bc <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800542a:	607b      	str	r3, [r7, #4]
      break;
 800542c:	e029      	b.n	8005482 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800542e:	f7ff fcab 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d111      	bne.n	800545c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005438:	f7ff fca6 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005442:	f7ff fcb3 	bl	8004dac <LL_RCC_MSI_GetRange>
 8005446:	4603      	mov	r3, r0
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	e003      	b.n	8005454 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800544c:	f7ff fcbc 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005450:	4603      	mov	r3, r0
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545a:	e010      	b.n	800547e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800545c:	f7ff fc94 	bl	8004d88 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005466:	f7ff fca1 	bl	8004dac <LL_RCC_MSI_GetRange>
 800546a:	4603      	mov	r3, r0
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	e003      	b.n	8005478 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005470:	f7ff fcaa 	bl	8004dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005474:	4603      	mov	r3, r0
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800547a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005480:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005482:	f7ff fd39 	bl	8004ef8 <LL_RCC_PLL_GetDivider>
 8005486:	4603      	mov	r3, r0
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	3301      	adds	r3, #1
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	fbb2 f4f3 	udiv	r4, r2, r3
 8005492:	f7ff fd15 	bl	8004ec0 <LL_RCC_PLL_GetN>
 8005496:	4603      	mov	r3, r0
 8005498:	fb03 f404 	mul.w	r4, r3, r4
 800549c:	f7ff fd1e 	bl	8004edc <LL_RCC_PLL_GetR>
 80054a0:	4603      	mov	r3, r0
 80054a2:	0e5b      	lsrs	r3, r3, #25
 80054a4:	3301      	adds	r3, #1
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd90      	pop	{r4, r7, pc}
 80054b4:	08006be4 	.word	0x08006be4
 80054b8:	00f42400 	.word	0x00f42400
 80054bc:	007a1200 	.word	0x007a1200

080054c0 <LL_USART_IsEnabled>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <LL_USART_IsEnabled+0x18>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <LL_USART_IsEnabled+0x1a>
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <LL_USART_SetStopBitsLength>:
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <LL_USART_SetHWFlowCtrl>:
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <LL_USART_SetBaudRate>:
{
 8005532:	b480      	push	{r7}
 8005534:	b087      	sub	sp, #28
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005546:	d11a      	bne.n	800557e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	005a      	lsls	r2, r3, #1
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	441a      	add	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	b29b      	uxth	r3, r3
 800555a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	b29b      	uxth	r3, r3
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	60da      	str	r2, [r3, #12]
}
 800557c:	e00a      	b.n	8005594 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	085a      	lsrs	r2, r3, #1
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	441a      	add	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	b29b      	uxth	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	60da      	str	r2, [r3, #12]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ff84 	bl	80054c0 <LL_USART_IsEnabled>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d15b      	bne.n	8005676 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <LL_USART_Init+0xe0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	6851      	ldr	r1, [r2, #4]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	4311      	orrs	r1, r2
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	6912      	ldr	r2, [r2, #16]
 80055d4:	4311      	orrs	r1, r2
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	6992      	ldr	r2, [r2, #24]
 80055da:	430a      	orrs	r2, r1
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff7c 	bl	80054e6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff89 	bl	800550c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <LL_USART_Init+0xe4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d104      	bne.n	800560c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005602:	2003      	movs	r0, #3
 8005604:	f7ff fc86 	bl	8004f14 <LL_RCC_GetUSARTClockFreq>
 8005608:	60b8      	str	r0, [r7, #8]
 800560a:	e023      	b.n	8005654 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <LL_USART_Init+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d104      	bne.n	800561e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005614:	200c      	movs	r0, #12
 8005616:	f7ff fc7d 	bl	8004f14 <LL_RCC_GetUSARTClockFreq>
 800561a:	60b8      	str	r0, [r7, #8]
 800561c:	e01a      	b.n	8005654 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <LL_USART_Init+0xec>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d104      	bne.n	8005630 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005626:	2030      	movs	r0, #48	; 0x30
 8005628:	f7ff fc74 	bl	8004f14 <LL_RCC_GetUSARTClockFreq>
 800562c:	60b8      	str	r0, [r7, #8]
 800562e:	e011      	b.n	8005654 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <LL_USART_Init+0xf0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d104      	bne.n	8005642 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005638:	20c0      	movs	r0, #192	; 0xc0
 800563a:	f7ff fd4f 	bl	80050dc <LL_RCC_GetUARTClockFreq>
 800563e:	60b8      	str	r0, [r7, #8]
 8005640:	e008      	b.n	8005654 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <LL_USART_Init+0xf4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d104      	bne.n	8005654 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800564a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800564e:	f7ff fd45 	bl	80050dc <LL_RCC_GetUARTClockFreq>
 8005652:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff ff5e 	bl	8005532 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005676:	7bfb      	ldrb	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40013800 	.word	0x40013800
 8005688:	40004400 	.word	0x40004400
 800568c:	40004800 	.word	0x40004800
 8005690:	40004c00 	.word	0x40004c00
 8005694:	40005000 	.word	0x40005000

08005698 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056aa:	2b84      	cmp	r3, #132	; 0x84
 80056ac:	d005      	beq.n	80056ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	3303      	adds	r3, #3
 80056b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056cc:	f000 fade 	bl	8005c8c <vTaskStartScheduler>
  
  return osOK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d8:	b089      	sub	sp, #36	; 0x24
 80056da:	af04      	add	r7, sp, #16
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d020      	beq.n	800572a <osThreadCreate+0x54>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01c      	beq.n	800572a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685c      	ldr	r4, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681d      	ldr	r5, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691e      	ldr	r6, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff ffc8 	bl	8005698 <makeFreeRtosPriority>
 8005708:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005712:	9202      	str	r2, [sp, #8]
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	9100      	str	r1, [sp, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4632      	mov	r2, r6
 800571c:	4629      	mov	r1, r5
 800571e:	4620      	mov	r0, r4
 8005720:	f000 f8ed 	bl	80058fe <xTaskCreateStatic>
 8005724:	4603      	mov	r3, r0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e01c      	b.n	8005764 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685c      	ldr	r4, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005736:	b29e      	uxth	r6, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ffaa 	bl	8005698 <makeFreeRtosPriority>
 8005744:	4602      	mov	r2, r0
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	9200      	str	r2, [sp, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	4632      	mov	r2, r6
 8005752:	4629      	mov	r1, r5
 8005754:	4620      	mov	r0, r4
 8005756:	f000 f92f 	bl	80059b8 <xTaskCreate>
 800575a:	4603      	mov	r3, r0
 800575c:	2b01      	cmp	r3, #1
 800575e:	d001      	beq.n	8005764 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005760:	2300      	movs	r3, #0
 8005762:	e000      	b.n	8005766 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005764:	68fb      	ldr	r3, [r7, #12]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800576e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <osDelay+0x16>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	e000      	b.n	8005786 <osDelay+0x18>
 8005784:	2301      	movs	r3, #1
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fa4c 	bl	8005c24 <vTaskDelay>
  
  return osOK;
 800578c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f103 0208 	add.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0208 	add.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f103 0208 	add.w	r2, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d103      	bne.n	8005858 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e00c      	b.n	8005872 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3308      	adds	r3, #8
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e002      	b.n	8005866 <vListInsert+0x2e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	d2f6      	bcs.n	8005860 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6892      	ldr	r2, [r2, #8]
 80058c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6852      	ldr	r2, [r2, #4]
 80058ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d103      	bne.n	80058de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1e5a      	subs	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b08e      	sub	sp, #56	; 0x38
 8005902:	af04      	add	r7, sp, #16
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskCreateStatic+0x46>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	61fb      	str	r3, [r7, #28]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005944:	2354      	movs	r3, #84	; 0x54
 8005946:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b54      	cmp	r3, #84	; 0x54
 800594c:	d00a      	beq.n	8005964 <xTaskCreateStatic+0x66>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61bb      	str	r3, [r7, #24]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01e      	beq.n	80059aa <xTaskCreateStatic+0xac>
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01b      	beq.n	80059aa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005984:	2300      	movs	r3, #0
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f850 	bl	8005a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a4:	f000 f8d4 	bl	8005b50 <prvAddNewTaskToReadyList>
 80059a8:	e001      	b.n	80059ae <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059ae:	697b      	ldr	r3, [r7, #20]
	}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3728      	adds	r7, #40	; 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af04      	add	r7, sp, #16
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fec3 	bl	8006758 <pvPortMalloc>
 80059d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059da:	2054      	movs	r0, #84	; 0x54
 80059dc:	f000 febc 	bl	8006758 <pvPortMalloc>
 80059e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
 80059ee:	e005      	b.n	80059fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059f0:	6978      	ldr	r0, [r7, #20]
 80059f2:	f000 ff7d 	bl	80068f0 <vPortFree>
 80059f6:	e001      	b.n	80059fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d017      	beq.n	8005a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f80e 	bl	8005a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a26:	69f8      	ldr	r0, [r7, #28]
 8005a28:	f000 f892 	bl	8005b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e002      	b.n	8005a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295
 8005a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a38:	69bb      	ldr	r3, [r7, #24]
	}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b088      	sub	sp, #32
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f023 0307 	bic.w	r3, r3, #7
 8005a68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	617b      	str	r3, [r7, #20]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01f      	beq.n	8005ad0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e012      	b.n	8005abc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	7819      	ldrb	r1, [r3, #0]
 8005a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3334      	adds	r3, #52	; 0x34
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d006      	beq.n	8005ac4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	d9e9      	bls.n	8005a96 <prvInitialiseNewTask+0x54>
 8005ac2:	e000      	b.n	8005ac6 <prvInitialiseNewTask+0x84>
			{
				break;
 8005ac4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ace:	e003      	b.n	8005ad8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d901      	bls.n	8005ae2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ade:	2306      	movs	r3, #6
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	2200      	movs	r2, #0
 8005af2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	3304      	adds	r3, #4
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fe6c 	bl	80057d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	3318      	adds	r3, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fe67 	bl	80057d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	f1c3 0207 	rsb	r2, r3, #7
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	2200      	movs	r2, #0
 8005b22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	69b8      	ldr	r0, [r7, #24]
 8005b32:	f000 fc05 	bl	8006340 <pxPortInitialiseStack>
 8005b36:	4602      	mov	r2, r0
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b48:	bf00      	nop
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b58:	f000 fd1c 	bl	8006594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b5c:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <prvAddNewTaskToReadyList+0xb8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <prvAddNewTaskToReadyList+0xb8>)
 8005b64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <prvAddNewTaskToReadyList+0xbc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <prvAddNewTaskToReadyList+0xbc>)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <prvAddNewTaskToReadyList+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d110      	bne.n	8005b9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b7c:	f000 fabc 	bl	80060f8 <prvInitialiseTaskLists>
 8005b80:	e00d      	b.n	8005b9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b82:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <prvAddNewTaskToReadyList+0xc0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <prvAddNewTaskToReadyList+0xbc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d802      	bhi.n	8005b9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b98:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <prvAddNewTaskToReadyList+0xbc>)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <prvAddNewTaskToReadyList+0xc4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <prvAddNewTaskToReadyList+0xc4>)
 8005ba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	4b19      	ldr	r3, [pc, #100]	; (8005c18 <prvAddNewTaskToReadyList+0xc8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <prvAddNewTaskToReadyList+0xc8>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <prvAddNewTaskToReadyList+0xcc>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7ff fe0d 	bl	80057f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bd6:	f000 fd0d 	bl	80065f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <prvAddNewTaskToReadyList+0xc0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <prvAddNewTaskToReadyList+0xbc>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d207      	bcs.n	8005c00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <prvAddNewTaskToReadyList+0xd0>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000380 	.word	0x20000380
 8005c0c:	20000280 	.word	0x20000280
 8005c10:	2000038c 	.word	0x2000038c
 8005c14:	2000039c 	.word	0x2000039c
 8005c18:	20000388 	.word	0x20000388
 8005c1c:	20000284 	.word	0x20000284
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d017      	beq.n	8005c66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c36:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <vTaskDelay+0x60>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <vTaskDelay+0x30>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60bb      	str	r3, [r7, #8]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c54:	f000 f87a 	bl	8005d4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c58:	2100      	movs	r1, #0
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fb0a 	bl	8006274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c60:	f000 f882 	bl	8005d68 <xTaskResumeAll>
 8005c64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <vTaskDelay+0x64>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	200003a8 	.word	0x200003a8
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	1d39      	adds	r1, r7, #4
 8005c9e:	f107 0308 	add.w	r3, r7, #8
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fa94 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	9202      	str	r2, [sp, #8]
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	460a      	mov	r2, r1
 8005cba:	491e      	ldr	r1, [pc, #120]	; (8005d34 <vTaskStartScheduler+0xa8>)
 8005cbc:	481e      	ldr	r0, [pc, #120]	; (8005d38 <vTaskStartScheduler+0xac>)
 8005cbe:	f7ff fe1e 	bl	80058fe <xTaskCreateStatic>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <vTaskStartScheduler+0xb0>)
 8005cc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <vTaskStartScheduler+0xb0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e001      	b.n	8005cda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d116      	bne.n	8005d0e <vTaskStartScheduler+0x82>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
}
 8005cf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <vTaskStartScheduler+0xb4>)
 8005cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <vTaskStartScheduler+0xb8>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <vTaskStartScheduler+0xbc>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d08:	f000 fba2 	bl	8006450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d0c:	e00e      	b.n	8005d2c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d10a      	bne.n	8005d2c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60fb      	str	r3, [r7, #12]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <vTaskStartScheduler+0x9e>
}
 8005d2c:	bf00      	nop
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08006bc4 	.word	0x08006bc4
 8005d38:	080060c9 	.word	0x080060c9
 8005d3c:	200003a4 	.word	0x200003a4
 8005d40:	200003a0 	.word	0x200003a0
 8005d44:	2000038c 	.word	0x2000038c
 8005d48:	20000384 	.word	0x20000384

08005d4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d50:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <vTaskSuspendAll+0x18>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	4a03      	ldr	r2, [pc, #12]	; (8005d64 <vTaskSuspendAll+0x18>)
 8005d58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d5a:	bf00      	nop
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	200003a8 	.word	0x200003a8

08005d68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <xTaskResumeAll+0x114>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	603b      	str	r3, [r7, #0]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d94:	f000 fbfe 	bl	8006594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d98:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <xTaskResumeAll+0x114>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4a37      	ldr	r2, [pc, #220]	; (8005e7c <xTaskResumeAll+0x114>)
 8005da0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da2:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <xTaskResumeAll+0x114>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d161      	bne.n	8005e6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005daa:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <xTaskResumeAll+0x118>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d05d      	beq.n	8005e6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db2:	e02e      	b.n	8005e12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <xTaskResumeAll+0x11c>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3318      	adds	r3, #24
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fd72 	bl	80058aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fd6d 	bl	80058aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	4b2b      	ldr	r3, [pc, #172]	; (8005e88 <xTaskResumeAll+0x120>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <xTaskResumeAll+0x120>)
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4a27      	ldr	r2, [pc, #156]	; (8005e8c <xTaskResumeAll+0x124>)
 8005df0:	441a      	add	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7ff fcf9 	bl	80057f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <xTaskResumeAll+0x128>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e0c:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <xTaskResumeAll+0x12c>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <xTaskResumeAll+0x11c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1cc      	bne.n	8005db4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e20:	f000 fa08 	bl	8006234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e24:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <xTaskResumeAll+0x130>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e30:	f000 f836 	bl	8005ea0 <xTaskIncrementTick>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <xTaskResumeAll+0x12c>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f1      	bne.n	8005e30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005e4c:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <xTaskResumeAll+0x130>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <xTaskResumeAll+0x12c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <xTaskResumeAll+0x134>)
 8005e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e6e:	f000 fbc1 	bl	80065f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e72:	68bb      	ldr	r3, [r7, #8]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	200003a8 	.word	0x200003a8
 8005e80:	20000380 	.word	0x20000380
 8005e84:	20000340 	.word	0x20000340
 8005e88:	20000388 	.word	0x20000388
 8005e8c:	20000284 	.word	0x20000284
 8005e90:	20000280 	.word	0x20000280
 8005e94:	20000394 	.word	0x20000394
 8005e98:	20000390 	.word	0x20000390
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eaa:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <xTaskIncrementTick+0x144>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 808e 	bne.w	8005fd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005eb4:	4b4c      	ldr	r3, [pc, #304]	; (8005fe8 <xTaskIncrementTick+0x148>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ebc:	4a4a      	ldr	r2, [pc, #296]	; (8005fe8 <xTaskIncrementTick+0x148>)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d120      	bne.n	8005f0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ec8:	4b48      	ldr	r3, [pc, #288]	; (8005fec <xTaskIncrementTick+0x14c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	603b      	str	r3, [r7, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskIncrementTick+0x46>
 8005ee8:	4b40      	ldr	r3, [pc, #256]	; (8005fec <xTaskIncrementTick+0x14c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	4b40      	ldr	r3, [pc, #256]	; (8005ff0 <xTaskIncrementTick+0x150>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a3e      	ldr	r2, [pc, #248]	; (8005fec <xTaskIncrementTick+0x14c>)
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	4a3e      	ldr	r2, [pc, #248]	; (8005ff0 <xTaskIncrementTick+0x150>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <xTaskIncrementTick+0x154>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a3c      	ldr	r2, [pc, #240]	; (8005ff4 <xTaskIncrementTick+0x154>)
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	f000 f995 	bl	8006234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ff8 <xTaskIncrementTick+0x158>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d348      	bcc.n	8005fa6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f14:	4b35      	ldr	r3, [pc, #212]	; (8005fec <xTaskIncrementTick+0x14c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f1e:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <xTaskIncrementTick+0x158>)
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	601a      	str	r2, [r3, #0]
					break;
 8005f26:	e03e      	b.n	8005fa6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f28:	4b30      	ldr	r3, [pc, #192]	; (8005fec <xTaskIncrementTick+0x14c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d203      	bcs.n	8005f48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f40:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <xTaskIncrementTick+0x158>)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f46:	e02e      	b.n	8005fa6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fcac 	bl	80058aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	3318      	adds	r3, #24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fca3 	bl	80058aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	2201      	movs	r2, #1
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <xTaskIncrementTick+0x15c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <xTaskIncrementTick+0x15c>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <xTaskIncrementTick+0x160>)
 8005f84:	441a      	add	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7ff fc2f 	bl	80057f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <xTaskIncrementTick+0x164>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d3b9      	bcc.n	8005f14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa4:	e7b6      	b.n	8005f14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fa6:	4b17      	ldr	r3, [pc, #92]	; (8006004 <xTaskIncrementTick+0x164>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	4914      	ldr	r1, [pc, #80]	; (8006000 <xTaskIncrementTick+0x160>)
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d901      	bls.n	8005fc2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <xTaskIncrementTick+0x168>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e004      	b.n	8005fda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fd0:	4b0e      	ldr	r3, [pc, #56]	; (800600c <xTaskIncrementTick+0x16c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	4a0d      	ldr	r2, [pc, #52]	; (800600c <xTaskIncrementTick+0x16c>)
 8005fd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fda:	697b      	ldr	r3, [r7, #20]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	200003a8 	.word	0x200003a8
 8005fe8:	20000384 	.word	0x20000384
 8005fec:	20000338 	.word	0x20000338
 8005ff0:	2000033c 	.word	0x2000033c
 8005ff4:	20000398 	.word	0x20000398
 8005ff8:	200003a0 	.word	0x200003a0
 8005ffc:	20000388 	.word	0x20000388
 8006000:	20000284 	.word	0x20000284
 8006004:	20000280 	.word	0x20000280
 8006008:	20000394 	.word	0x20000394
 800600c:	20000390 	.word	0x20000390

08006010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006016:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <vTaskSwitchContext+0xa4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800601e:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <vTaskSwitchContext+0xa8>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006024:	e03f      	b.n	80060a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <vTaskSwitchContext+0xa8>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602c:	4b23      	ldr	r3, [pc, #140]	; (80060bc <vTaskSwitchContext+0xac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	fab3 f383 	clz	r3, r3
 8006038:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800603a:	7afb      	ldrb	r3, [r7, #11]
 800603c:	f1c3 031f 	rsb	r3, r3, #31
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	491f      	ldr	r1, [pc, #124]	; (80060c0 <vTaskSwitchContext+0xb0>)
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	607b      	str	r3, [r7, #4]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <vTaskSwitchContext+0x5a>
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <vTaskSwitchContext+0xb0>)
 8006078:	4413      	add	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3308      	adds	r3, #8
 800608e:	429a      	cmp	r2, r3
 8006090:	d104      	bne.n	800609c <vTaskSwitchContext+0x8c>
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <vTaskSwitchContext+0xb4>)
 80060a4:	6013      	str	r3, [r2, #0]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200003a8 	.word	0x200003a8
 80060b8:	20000394 	.word	0x20000394
 80060bc:	20000388 	.word	0x20000388
 80060c0:	20000284 	.word	0x20000284
 80060c4:	20000280 	.word	0x20000280

080060c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060d0:	f000 f852 	bl	8006178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <prvIdleTask+0x28>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d9f9      	bls.n	80060d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <prvIdleTask+0x2c>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060ec:	e7f0      	b.n	80060d0 <prvIdleTask+0x8>
 80060ee:	bf00      	nop
 80060f0:	20000284 	.word	0x20000284
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060fe:	2300      	movs	r3, #0
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	e00c      	b.n	800611e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a12      	ldr	r2, [pc, #72]	; (8006158 <prvInitialiseTaskLists+0x60>)
 8006110:	4413      	add	r3, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fb3f 	bl	8005796 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3301      	adds	r3, #1
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b06      	cmp	r3, #6
 8006122:	d9ef      	bls.n	8006104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006124:	480d      	ldr	r0, [pc, #52]	; (800615c <prvInitialiseTaskLists+0x64>)
 8006126:	f7ff fb36 	bl	8005796 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800612a:	480d      	ldr	r0, [pc, #52]	; (8006160 <prvInitialiseTaskLists+0x68>)
 800612c:	f7ff fb33 	bl	8005796 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006130:	480c      	ldr	r0, [pc, #48]	; (8006164 <prvInitialiseTaskLists+0x6c>)
 8006132:	f7ff fb30 	bl	8005796 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006136:	480c      	ldr	r0, [pc, #48]	; (8006168 <prvInitialiseTaskLists+0x70>)
 8006138:	f7ff fb2d 	bl	8005796 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800613c:	480b      	ldr	r0, [pc, #44]	; (800616c <prvInitialiseTaskLists+0x74>)
 800613e:	f7ff fb2a 	bl	8005796 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <prvInitialiseTaskLists+0x78>)
 8006144:	4a05      	ldr	r2, [pc, #20]	; (800615c <prvInitialiseTaskLists+0x64>)
 8006146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <prvInitialiseTaskLists+0x7c>)
 800614a:	4a05      	ldr	r2, [pc, #20]	; (8006160 <prvInitialiseTaskLists+0x68>)
 800614c:	601a      	str	r2, [r3, #0]
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000284 	.word	0x20000284
 800615c:	20000310 	.word	0x20000310
 8006160:	20000324 	.word	0x20000324
 8006164:	20000340 	.word	0x20000340
 8006168:	20000354 	.word	0x20000354
 800616c:	2000036c 	.word	0x2000036c
 8006170:	20000338 	.word	0x20000338
 8006174:	2000033c 	.word	0x2000033c

08006178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800617e:	e019      	b.n	80061b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006180:	f000 fa08 	bl	8006594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006184:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <prvCheckTasksWaitingTermination+0x50>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fb8a 	bl	80058aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <prvCheckTasksWaitingTermination+0x54>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3b01      	subs	r3, #1
 800619c:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <prvCheckTasksWaitingTermination+0x54>)
 800619e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <prvCheckTasksWaitingTermination+0x58>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <prvCheckTasksWaitingTermination+0x58>)
 80061a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061aa:	f000 fa23 	bl	80065f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f810 	bl	80061d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <prvCheckTasksWaitingTermination+0x58>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e1      	bne.n	8006180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000354 	.word	0x20000354
 80061cc:	20000380 	.word	0x20000380
 80061d0:	20000368 	.word	0x20000368

080061d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d108      	bne.n	80061f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fb80 	bl	80068f0 <vPortFree>
				vPortFree( pxTCB );
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fb7d 	bl	80068f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061f6:	e018      	b.n	800622a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d103      	bne.n	800620a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fb74 	bl	80068f0 <vPortFree>
	}
 8006208:	e00f      	b.n	800622a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006210:	2b02      	cmp	r3, #2
 8006212:	d00a      	beq.n	800622a <prvDeleteTCB+0x56>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <prvDeleteTCB+0x54>
	}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <prvResetNextTaskUnblockTime+0x38>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006244:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <prvResetNextTaskUnblockTime+0x3c>)
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800624c:	e008      	b.n	8006260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800624e:	4b07      	ldr	r3, [pc, #28]	; (800626c <prvResetNextTaskUnblockTime+0x38>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <prvResetNextTaskUnblockTime+0x3c>)
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000338 	.word	0x20000338
 8006270:	200003a0 	.word	0x200003a0

08006274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800627e:	4b29      	ldr	r3, [pc, #164]	; (8006324 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006284:	4b28      	ldr	r3, [pc, #160]	; (8006328 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3304      	adds	r3, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fb0d 	bl	80058aa <uxListRemove>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	2201      	movs	r2, #1
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43da      	mvns	r2, r3
 80062a4:	4b21      	ldr	r3, [pc, #132]	; (800632c <prvAddCurrentTaskToDelayedList+0xb8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4013      	ands	r3, r2
 80062aa:	4a20      	ldr	r2, [pc, #128]	; (800632c <prvAddCurrentTaskToDelayedList+0xb8>)
 80062ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d10a      	bne.n	80062cc <prvAddCurrentTaskToDelayedList+0x58>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062bc:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	481a      	ldr	r0, [pc, #104]	; (8006330 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062c6:	f7ff fa93 	bl	80057f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062ca:	e026      	b.n	800631a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062d4:	4b14      	ldr	r3, [pc, #80]	; (8006328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d209      	bcs.n	80062f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <prvAddCurrentTaskToDelayedList+0xc0>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7ff faa1 	bl	8005838 <vListInsert>
}
 80062f6:	e010      	b.n	800631a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f8:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <prvAddCurrentTaskToDelayedList+0xc4>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7ff fa97 	bl	8005838 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800630a:	4b0c      	ldr	r3, [pc, #48]	; (800633c <prvAddCurrentTaskToDelayedList+0xc8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	d202      	bcs.n	800631a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006314:	4a09      	ldr	r2, [pc, #36]	; (800633c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6013      	str	r3, [r2, #0]
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000384 	.word	0x20000384
 8006328:	20000280 	.word	0x20000280
 800632c:	20000388 	.word	0x20000388
 8006330:	2000036c 	.word	0x2000036c
 8006334:	2000033c 	.word	0x2000033c
 8006338:	20000338 	.word	0x20000338
 800633c:	200003a0 	.word	0x200003a0

08006340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3b04      	subs	r3, #4
 8006350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3b04      	subs	r3, #4
 800635e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f023 0201 	bic.w	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3b04      	subs	r3, #4
 800636e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006370:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <pxPortInitialiseStack+0x64>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b14      	subs	r3, #20
 800637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f06f 0202 	mvn.w	r2, #2
 800638e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3b20      	subs	r3, #32
 8006394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	080063a9 	.word	0x080063a9

080063a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <prvTaskExitError+0x54>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d00a      	beq.n	80063d2 <prvTaskExitError+0x2a>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60fb      	str	r3, [r7, #12]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <prvTaskExitError+0x28>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60bb      	str	r3, [r7, #8]
}
 80063e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063e6:	bf00      	nop
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0fc      	beq.n	80063e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	2000000c 	.word	0x2000000c

08006400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <pxCurrentTCBConst2>)
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	f380 8809 	msr	PSP, r0
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	4770      	bx	lr
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst2>:
 8006420:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006428:	4808      	ldr	r0, [pc, #32]	; (800644c <prvPortStartFirstTask+0x24>)
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f380 8808 	msr	MSP, r0
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8814 	msr	CONTROL, r0
 800643a:	b662      	cpsie	i
 800643c:	b661      	cpsie	f
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	df00      	svc	0
 8006448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800644a:	bf00      	nop
 800644c:	e000ed08 	.word	0xe000ed08

08006450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006456:	4b46      	ldr	r3, [pc, #280]	; (8006570 <xPortStartScheduler+0x120>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a46      	ldr	r2, [pc, #280]	; (8006574 <xPortStartScheduler+0x124>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10a      	bne.n	8006476 <xPortStartScheduler+0x26>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	613b      	str	r3, [r7, #16]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006476:	4b3e      	ldr	r3, [pc, #248]	; (8006570 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a3f      	ldr	r2, [pc, #252]	; (8006578 <xPortStartScheduler+0x128>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x46>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006496:	4b39      	ldr	r3, [pc, #228]	; (800657c <xPortStartScheduler+0x12c>)
 8006498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	22ff      	movs	r2, #255	; 0xff
 80064a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	4b31      	ldr	r3, [pc, #196]	; (8006580 <xPortStartScheduler+0x130>)
 80064bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064be:	4b31      	ldr	r3, [pc, #196]	; (8006584 <xPortStartScheduler+0x134>)
 80064c0:	2207      	movs	r2, #7
 80064c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064c4:	e009      	b.n	80064da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <xPortStartScheduler+0x134>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	4a2d      	ldr	r2, [pc, #180]	; (8006584 <xPortStartScheduler+0x134>)
 80064ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d0ef      	beq.n	80064c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064e6:	4b27      	ldr	r3, [pc, #156]	; (8006584 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1c3 0307 	rsb	r3, r3, #7
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d00a      	beq.n	8006508 <xPortStartScheduler+0xb8>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60bb      	str	r3, [r7, #8]
}
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006508:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <xPortStartScheduler+0x134>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <xPortStartScheduler+0x134>)
 8006510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006512:	4b1c      	ldr	r3, [pc, #112]	; (8006584 <xPortStartScheduler+0x134>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800651a:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <xPortStartScheduler+0x134>)
 800651c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <xPortStartScheduler+0x138>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <xPortStartScheduler+0x138>)
 800652c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <xPortStartScheduler+0x138>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a14      	ldr	r2, [pc, #80]	; (8006588 <xPortStartScheduler+0x138>)
 8006538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800653c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800653e:	f000 f8dd 	bl	80066fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <xPortStartScheduler+0x13c>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006548:	f000 f8fc 	bl	8006744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800654c:	4b10      	ldr	r3, [pc, #64]	; (8006590 <xPortStartScheduler+0x140>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0f      	ldr	r2, [pc, #60]	; (8006590 <xPortStartScheduler+0x140>)
 8006552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006558:	f7ff ff66 	bl	8006428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800655c:	f7ff fd58 	bl	8006010 <vTaskSwitchContext>
	prvTaskExitError();
 8006560:	f7ff ff22 	bl	80063a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000ed00 	.word	0xe000ed00
 8006574:	410fc271 	.word	0x410fc271
 8006578:	410fc270 	.word	0x410fc270
 800657c:	e000e400 	.word	0xe000e400
 8006580:	200003ac 	.word	0x200003ac
 8006584:	200003b0 	.word	0x200003b0
 8006588:	e000ed20 	.word	0xe000ed20
 800658c:	2000000c 	.word	0x2000000c
 8006590:	e000ef34 	.word	0xe000ef34

08006594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	607b      	str	r3, [r7, #4]
}
 80065ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <vPortEnterCritical+0x58>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	4a0d      	ldr	r2, [pc, #52]	; (80065ec <vPortEnterCritical+0x58>)
 80065b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <vPortEnterCritical+0x58>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d10f      	bne.n	80065e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <vPortEnterCritical+0x5c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	603b      	str	r3, [r7, #0]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <vPortEnterCritical+0x4a>
	}
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	e000ed04 	.word	0xe000ed04

080065f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <vPortExitCritical+0x50>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <vPortExitCritical+0x24>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	607b      	str	r3, [r7, #4]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <vPortExitCritical+0x50>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3b01      	subs	r3, #1
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <vPortExitCritical+0x50>)
 8006620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006622:	4b08      	ldr	r3, [pc, #32]	; (8006644 <vPortExitCritical+0x50>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d105      	bne.n	8006636 <vPortExitCritical+0x42>
 800662a:	2300      	movs	r3, #0
 800662c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	2000000c 	.word	0x2000000c
	...

08006650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006650:	f3ef 8009 	mrs	r0, PSP
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <pxCurrentTCBConst>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f01e 0f10 	tst.w	lr, #16
 8006660:	bf08      	it	eq
 8006662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	6010      	str	r0, [r2, #0]
 800666c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006674:	f380 8811 	msr	BASEPRI, r0
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f7ff fcc6 	bl	8006010 <vTaskSwitchContext>
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f380 8811 	msr	BASEPRI, r0
 800668c:	bc09      	pop	{r0, r3}
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	f01e 0f10 	tst.w	lr, #16
 800669a:	bf08      	it	eq
 800669c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066a0:	f380 8809 	msr	PSP, r0
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst>:
 80066b0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066d2:	f7ff fbe5 	bl	8005ea0 <xTaskIncrementTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <SysTick_Handler+0x40>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f383 8811 	msr	BASEPRI, r3
}
 80066ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <vPortSetupTimerInterrupt+0x34>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <vPortSetupTimerInterrupt+0x38>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <vPortSetupTimerInterrupt+0x3c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <vPortSetupTimerInterrupt+0x40>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <vPortSetupTimerInterrupt+0x44>)
 800671a:	3b01      	subs	r3, #1
 800671c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800671e:	4b04      	ldr	r3, [pc, #16]	; (8006730 <vPortSetupTimerInterrupt+0x34>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	e000e010 	.word	0xe000e010
 8006734:	e000e018 	.word	0xe000e018
 8006738:	20000000 	.word	0x20000000
 800673c:	10624dd3 	.word	0x10624dd3
 8006740:	e000e014 	.word	0xe000e014

08006744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006754 <vPortEnableVFP+0x10>
 8006748:	6801      	ldr	r1, [r0, #0]
 800674a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800674e:	6001      	str	r1, [r0, #0]
 8006750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006752:	bf00      	nop
 8006754:	e000ed88 	.word	0xe000ed88

08006758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006764:	f7ff faf2 	bl	8005d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006768:	4b5b      	ldr	r3, [pc, #364]	; (80068d8 <pvPortMalloc+0x180>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006770:	f000 f920 	bl	80069b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006774:	4b59      	ldr	r3, [pc, #356]	; (80068dc <pvPortMalloc+0x184>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4013      	ands	r3, r2
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 8093 	bne.w	80068a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01d      	beq.n	80067c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006788:	2208      	movs	r2, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4413      	add	r3, r2
 800678e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b00      	cmp	r3, #0
 8006798:	d014      	beq.n	80067c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f023 0307 	bic.w	r3, r3, #7
 80067a0:	3308      	adds	r3, #8
 80067a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <pvPortMalloc+0x6c>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	617b      	str	r3, [r7, #20]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d06e      	beq.n	80068a8 <pvPortMalloc+0x150>
 80067ca:	4b45      	ldr	r3, [pc, #276]	; (80068e0 <pvPortMalloc+0x188>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d869      	bhi.n	80068a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067d4:	4b43      	ldr	r3, [pc, #268]	; (80068e4 <pvPortMalloc+0x18c>)
 80067d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067d8:	4b42      	ldr	r3, [pc, #264]	; (80068e4 <pvPortMalloc+0x18c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067de:	e004      	b.n	80067ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d903      	bls.n	80067fc <pvPortMalloc+0xa4>
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f1      	bne.n	80067e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067fc:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <pvPortMalloc+0x180>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006802:	429a      	cmp	r2, r3
 8006804:	d050      	beq.n	80068a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2208      	movs	r2, #8
 800680c:	4413      	add	r3, r2
 800680e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	2308      	movs	r3, #8
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	429a      	cmp	r2, r3
 8006826:	d91f      	bls.n	8006868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <pvPortMalloc+0xf8>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	613b      	str	r3, [r7, #16]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	1ad2      	subs	r2, r2, r3
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006862:	69b8      	ldr	r0, [r7, #24]
 8006864:	f000 f908 	bl	8006a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006868:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <pvPortMalloc+0x188>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <pvPortMalloc+0x188>)
 8006874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <pvPortMalloc+0x188>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <pvPortMalloc+0x190>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d203      	bcs.n	800688a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006882:	4b17      	ldr	r3, [pc, #92]	; (80068e0 <pvPortMalloc+0x188>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <pvPortMalloc+0x190>)
 8006888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <pvPortMalloc+0x184>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	431a      	orrs	r2, r3
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <pvPortMalloc+0x194>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3301      	adds	r3, #1
 80068a4:	4a11      	ldr	r2, [pc, #68]	; (80068ec <pvPortMalloc+0x194>)
 80068a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068a8:	f7ff fa5e 	bl	8005d68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <pvPortMalloc+0x174>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60fb      	str	r3, [r7, #12]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <pvPortMalloc+0x172>
	return pvReturn;
 80068cc:	69fb      	ldr	r3, [r7, #28]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3728      	adds	r7, #40	; 0x28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000f74 	.word	0x20000f74
 80068dc:	20000f88 	.word	0x20000f88
 80068e0:	20000f78 	.word	0x20000f78
 80068e4:	20000f6c 	.word	0x20000f6c
 80068e8:	20000f7c 	.word	0x20000f7c
 80068ec:	20000f80 	.word	0x20000f80

080068f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d04d      	beq.n	800699e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006902:	2308      	movs	r3, #8
 8006904:	425b      	negs	r3, r3
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4413      	add	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <vPortFree+0xb8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <vPortFree+0x44>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60fb      	str	r3, [r7, #12]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <vPortFree+0x62>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60bb      	str	r3, [r7, #8]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <vPortFree+0xb8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01e      	beq.n	800699e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11a      	bne.n	800699e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <vPortFree+0xb8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	43db      	mvns	r3, r3
 8006972:	401a      	ands	r2, r3
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006978:	f7ff f9e8 	bl	8005d4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <vPortFree+0xbc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4413      	add	r3, r2
 8006986:	4a09      	ldr	r2, [pc, #36]	; (80069ac <vPortFree+0xbc>)
 8006988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800698a:	6938      	ldr	r0, [r7, #16]
 800698c:	f000 f874 	bl	8006a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <vPortFree+0xc0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <vPortFree+0xc0>)
 8006998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800699a:	f7ff f9e5 	bl	8005d68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800699e:	bf00      	nop
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000f88 	.word	0x20000f88
 80069ac:	20000f78 	.word	0x20000f78
 80069b0:	20000f84 	.word	0x20000f84

080069b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069c0:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <prvHeapInit+0xac>)
 80069c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00c      	beq.n	80069e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3307      	adds	r3, #7
 80069d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0307 	bic.w	r3, r3, #7
 80069da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <prvHeapInit+0xac>)
 80069e4:	4413      	add	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069ec:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <prvHeapInit+0xb0>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <prvHeapInit+0xb0>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	4413      	add	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a00:	2208      	movs	r2, #8
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0307 	bic.w	r3, r3, #7
 8006a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <prvHeapInit+0xb4>)
 8006a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <prvHeapInit+0xb4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a1e:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <prvHeapInit+0xb4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <prvHeapInit+0xb4>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <prvHeapInit+0xb8>)
 8006a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <prvHeapInit+0xbc>)
 8006a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <prvHeapInit+0xc0>)
 8006a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a52:	601a      	str	r2, [r3, #0]
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	200003b4 	.word	0x200003b4
 8006a64:	20000f6c 	.word	0x20000f6c
 8006a68:	20000f74 	.word	0x20000f74
 8006a6c:	20000f7c 	.word	0x20000f7c
 8006a70:	20000f78 	.word	0x20000f78
 8006a74:	20000f88 	.word	0x20000f88

08006a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <prvInsertBlockIntoFreeList+0xac>)
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e002      	b.n	8006a8c <prvInsertBlockIntoFreeList+0x14>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d8f7      	bhi.n	8006a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d108      	bne.n	8006aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	441a      	add	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d118      	bne.n	8006b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <prvInsertBlockIntoFreeList+0xb0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d00d      	beq.n	8006af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	441a      	add	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e008      	b.n	8006b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvInsertBlockIntoFreeList+0xb0>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	e003      	b.n	8006b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d002      	beq.n	8006b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000f6c 	.word	0x20000f6c
 8006b28:	20000f74 	.word	0x20000f74

08006b2c <__libc_init_array>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4d0d      	ldr	r5, [pc, #52]	; (8006b64 <__libc_init_array+0x38>)
 8006b30:	4c0d      	ldr	r4, [pc, #52]	; (8006b68 <__libc_init_array+0x3c>)
 8006b32:	1b64      	subs	r4, r4, r5
 8006b34:	10a4      	asrs	r4, r4, #2
 8006b36:	2600      	movs	r6, #0
 8006b38:	42a6      	cmp	r6, r4
 8006b3a:	d109      	bne.n	8006b50 <__libc_init_array+0x24>
 8006b3c:	4d0b      	ldr	r5, [pc, #44]	; (8006b6c <__libc_init_array+0x40>)
 8006b3e:	4c0c      	ldr	r4, [pc, #48]	; (8006b70 <__libc_init_array+0x44>)
 8006b40:	f000 f820 	bl	8006b84 <_init>
 8006b44:	1b64      	subs	r4, r4, r5
 8006b46:	10a4      	asrs	r4, r4, #2
 8006b48:	2600      	movs	r6, #0
 8006b4a:	42a6      	cmp	r6, r4
 8006b4c:	d105      	bne.n	8006b5a <__libc_init_array+0x2e>
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b54:	4798      	blx	r3
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7ee      	b.n	8006b38 <__libc_init_array+0xc>
 8006b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5e:	4798      	blx	r3
 8006b60:	3601      	adds	r6, #1
 8006b62:	e7f2      	b.n	8006b4a <__libc_init_array+0x1e>
 8006b64:	08006c14 	.word	0x08006c14
 8006b68:	08006c14 	.word	0x08006c14
 8006b6c:	08006c14 	.word	0x08006c14
 8006b70:	08006c18 	.word	0x08006c18

08006b74 <memset>:
 8006b74:	4402      	add	r2, r0
 8006b76:	4603      	mov	r3, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <_init>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr

08006b90 <_fini>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr
