
power-consumption2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007d94  08007d94  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d94  08007d94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e8  20000074  08007e10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000115c  08007e10  0002115c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd3a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c33  00000000  00000000  0003ddde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00041a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00043328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002da9b  00000000  00000000  00044a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bb4  00000000  00000000  0007252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117a02  00000000  00000000  0008c0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a3ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070dc  00000000  00000000  001a3b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c5c 	.word	0x08007c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007c5c 	.word	0x08007c5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	200000e4 	.word	0x200000e4

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800040e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000410:	4907      	ldr	r1, [pc, #28]	; (8000430 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800041a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4013      	ands	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <LL_APB1_GRP1_EnableClock+0x2c>)
 800043e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000440:	4907      	ldr	r1, [pc, #28]	; (8000460 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4313      	orrs	r3, r2
 8000446:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <LL_APB1_GRP1_EnableClock+0x2c>)
 800044a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4013      	ands	r3, r2
 8000450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <root_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void root_task(void * args) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	for(;;) {
		printf("Hello");
 800046c:	4801      	ldr	r0, [pc, #4]	; (8000474 <root_task+0x10>)
 800046e:	f006 fc9f 	bl	8006db0 <iprintf>
 8000472:	e7fb      	b.n	800046c <root_task+0x8>
 8000474:	08007c80 	.word	0x08007c80

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 fd08 	bl	8000e92 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f831 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 fa33 	bl	80008f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800048a:	f000 f873 	bl	8000574 <MX_ADC1_Init>
  MX_TIM2_Init();
 800048e:	f000 f8e7 	bl	8000660 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000492:	f000 f95b 	bl	800074c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000496:	f000 f9a9 	bl	80007ec <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <main+0x60>)
 800049c:	1d3c      	adds	r4, r7, #4
 800049e:	461d      	mov	r5, r3
 80004a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f005 fa1a 	bl	80058ea <osThreadCreate>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a08      	ldr	r2, [pc, #32]	; (80004dc <main+0x64>)
 80004ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(root_task, "@root", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 80004bc:	2300      	movs	r3, #0
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	2300      	movs	r3, #0
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2300      	movs	r3, #0
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	4905      	ldr	r1, [pc, #20]	; (80004e0 <main+0x68>)
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <main+0x6c>)
 80004cc:	f005 fb7e 	bl	8005bcc <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004d0:	f005 fa04 	bl	80058dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x5c>
 80004d6:	bf00      	nop
 80004d8:	08007c90 	.word	0x08007c90
 80004dc:	20000ffc 	.word	0x20000ffc
 80004e0:	08007c88 	.word	0x08007c88
 80004e4:	08000465 	.word	0x08000465

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b096      	sub	sp, #88	; 0x58
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2244      	movs	r2, #68	; 0x44
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 fc52 	bl	8006da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050e:	f001 ff53 	bl	80023b8 <HAL_PWREx_ControlVoltageScaling>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000518:	f000 fa34 	bl	8000984 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800051c:	2310      	movs	r3, #16
 800051e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000520:	2301      	movs	r3, #1
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000528:	2360      	movs	r3, #96	; 0x60
 800052a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052c:	2300      	movs	r3, #0
 800052e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4618      	mov	r0, r3
 8000536:	f001 ff95 	bl	8002464 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000540:	f000 fa20 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fb67 	bl	8002c30 <HAL_RCC_ClockConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000568:	f000 fa0c 	bl	8000984 <Error_Handler>
  }
}
 800056c:	bf00      	nop
 800056e:	3758      	adds	r7, #88	; 0x58
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000596:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe0>)
 8000598:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe4>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_ADC1_Init+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f6:	4817      	ldr	r0, [pc, #92]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005f8:	f000 fe10 	bl	800121c <HAL_ADC_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000602:	f000 f9bf 	bl	8000984 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <MX_ADC1_Init+0xe0>)
 8000612:	f001 fb6f 	bl	8001cf4 <HAL_ADCEx_MultiModeConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800061c:	f000 f9b2 	bl	8000984 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_ADC1_Init+0xe8>)
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000624:	2306      	movs	r3, #6
 8000626:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062c:	237f      	movs	r3, #127	; 0x7f
 800062e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000630:	2304      	movs	r3, #4
 8000632:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_ADC1_Init+0xe0>)
 800063e:	f000 ff43 	bl	80014c8 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000648:	f000 f99c 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000104c 	.word	0x2000104c
 8000658:	50040000 	.word	0x50040000
 800065c:	14f00020 	.word	0x14f00020

08000660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	; 0x38
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MX_TIM2_Init+0xe8>)
 8000694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000698:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_TIM2_Init+0xe8>)
 800069c:	227f      	movs	r2, #127	; 0x7f
 800069e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006a8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80006ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006bc:	f003 f996 	bl	80039ec <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006c6:	f000 f95d 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d4:	4619      	mov	r1, r3
 80006d6:	481c      	ldr	r0, [pc, #112]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006d8:	f003 fce0 	bl	800409c <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006e2:	f000 f94f 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e6:	4818      	ldr	r0, [pc, #96]	; (8000748 <MX_TIM2_Init+0xe8>)
 80006e8:	f003 fa48 	bl	8003b7c <HAL_TIM_PWM_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006f2:	f000 f947 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <MX_TIM2_Init+0xe8>)
 8000706:	f004 f9c1 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000710:	f000 f938 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000714:	2360      	movs	r3, #96	; 0x60
 8000716:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <MX_TIM2_Init+0xe8>)
 800072c:	f003 fba6 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000736:	f000 f925 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <MX_TIM2_Init+0xe8>)
 800073c:	f000 f9f0 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 8000740:	bf00      	nop
 8000742:	3738      	adds	r7, #56	; 0x38
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200010b0 	.word	0x200010b0

0800074c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_TIM3_Init+0x98>)
 800076c:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_TIM3_Init+0x9c>)
 800076e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_TIM3_Init+0x98>)
 8000772:	f240 128f 	movw	r2, #399	; 0x18f
 8000776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_TIM3_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_TIM3_Init+0x98>)
 8000780:	f242 720f 	movw	r2, #9999	; 0x270f
 8000784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_TIM3_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_TIM3_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_TIM3_Init+0x98>)
 8000794:	f003 f92a 	bl	80039ec <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800079e:	f000 f8f1 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_TIM3_Init+0x98>)
 80007b0:	f003 fc74 	bl	800409c <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80007ba:	f000 f8e3 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_TIM3_Init+0x98>)
 80007cc:	f004 f95e 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80007d6:	f000 f8d5 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20001000 	.word	0x20001000
 80007e8:	40000400 	.word	0x40000400

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0b0      	sub	sp, #192	; 0xc0
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2288      	movs	r2, #136	; 0x88
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fabe 	bl	8006da0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000824:	2302      	movs	r3, #2
 8000826:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000828:	2300      	movs	r3, #0
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fc20 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8a3 	bl	8000984 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800083e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000842:	f7ff fdf7 	bl	8000434 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fddc 	bl	8000404 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800084c:	230c      	movs	r3, #12
 800084e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000852:	2302      	movs	r3, #2
 8000854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800086a:	2307      	movs	r3, #7
 800086c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000874:	4619      	mov	r1, r3
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f004 faf8 	bl	8004e6e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800087e:	f7ff fd11 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000882:	4603      	mov	r3, r0
 8000884:	2200      	movs	r2, #0
 8000886:	2105      	movs	r1, #5
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd61 	bl	8000350 <NVIC_EncodePriority>
 800088e:	4603      	mov	r3, r0
 8000890:	4619      	mov	r1, r3
 8000892:	2026      	movs	r0, #38	; 0x26
 8000894:	f7ff fd32 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000898:	2026      	movs	r0, #38	; 0x26
 800089a:	f7ff fd11 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800089e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008b8:	230c      	movs	r3, #12
 80008ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 80008ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x100>)
 80008d2:	f004 ff6f 	bl	80057b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x100>)
 80008d8:	f7ff fd7d 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_USART2_UART_Init+0x100>)
 80008de:	f7ff fd6a 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	37c0      	adds	r7, #192	; 0xc0
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_GPIO_Init+0x5c>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	4a10      	ldr	r2, [pc, #64]	; (800094c <MX_GPIO_Init+0x5c>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_GPIO_Init+0x5c>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 fd22 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f001 fb6a 	bl	8002018 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f005 f812 	bl	8005982 <osDelay>
 800095e:	e7fb      	b.n	8000958 <StartDefaultTask+0x8>

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 faa7 	bl	8000ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40012c00 	.word	0x40012c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x4c>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x4c>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x4c>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f001 faf9 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	; 0xb0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2288      	movs	r2, #136	; 0x88
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f006 f9cd 	bl	8006da0 <memset>
  if(hadc->Instance==ADC1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <HAL_ADC_MspInit+0xc8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d147      	bne.n	8000aa0 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a14:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000a26:	2310      	movs	r3, #16
 8000a28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fb17 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a4c:	f7ff ff9a 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a80:	2301      	movs	r3, #1
 8000a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a86:	230b      	movs	r3, #11
 8000a88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f001 fabc 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	37b0      	adds	r7, #176	; 0xb0
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	50040000 	.word	0x50040000
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac0:	d10c      	bne.n	8000adc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ada:	e018      	b.n	8000b0e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d113      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	201d      	movs	r0, #29
 8000b04:	f001 fa5e 	bl	8001fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b08:	201d      	movs	r0, #29
 8000b0a:	f001 fa77 	bl	8001ffc <HAL_NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40000400 	.word	0x40000400

08000b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b40:	d11c      	bne.n	8000b7c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_TIM_MspPostInit+0x64>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_TIM_MspPostInit+0x64>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_TIM_MspPostInit+0x64>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f001 fa4e 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2019      	movs	r0, #25
 8000b9e:	f001 fa11 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ba2:	2019      	movs	r0, #25
 8000ba4:	f001 fa2a 	bl	8001ffc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_InitTick+0x9c>)
 8000baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_InitTick+0x9c>)
 8000bae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_InitTick+0x9c>)
 8000bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc0:	f107 0210 	add.w	r2, r7, #16
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 f9c0 	bl	8002f50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bd0:	f002 f9a8 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8000bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <HAL_InitTick+0xa0>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	3b01      	subs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_InitTick+0xa4>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_InitTick+0xa8>)
 8000be8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_InitTick+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_InitTick+0xa4>)
 8000c06:	f002 fef1 	bl	80039ec <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d104      	bne.n	8000c1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <HAL_InitTick+0xa4>)
 8000c12:	f002 ff43 	bl	8003a9c <HAL_TIM_Base_Start_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3730      	adds	r7, #48	; 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	431bde83 	.word	0x431bde83
 8000c2c:	200010fc 	.word	0x200010fc
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c66:	f002 ffea 	bl	8003c3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200010fc 	.word	0x200010fc

08000c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM3_IRQHandler+0x10>)
 8000c7a:	f002 ffe0 	bl	8003c3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20001000 	.word	0x20001000

08000c88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e00a      	b.n	8000cbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca8:	f3af 8000 	nop.w
 8000cac:	4601      	mov	r1, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	60ba      	str	r2, [r7, #8]
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dbf0      	blt.n	8000ca8 <_read+0x12>
	}

return len;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e009      	b.n	8000cf6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	60ba      	str	r2, [r7, #8]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dbf1      	blt.n	8000ce2 <_write+0x12>
	}
	return len;
 8000cfe:	687b      	ldr	r3, [r7, #4]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_close>:

int _close(int file)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d30:	605a      	str	r2, [r3, #4]
	return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_isatty>:

int _isatty(int file)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	return 1;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
	return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f005 ffd4 	bl	8006d4c <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20018000 	.word	0x20018000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	200002e4 	.word	0x200002e4
 8000dd8:	20001160 	.word	0x20001160

08000ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <SystemInit+0x5c>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <SystemInit+0x5c>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <SystemInit+0x60>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <SystemInit+0x60>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <SystemInit+0x60>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <SystemInit+0x60>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <SystemInit+0x60>)
 8000e08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <SystemInit+0x60>)
 8000e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <SystemInit+0x60>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SystemInit+0x60>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SystemInit+0x60>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	40021000 	.word	0x40021000

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ffca 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e4a:	e003      	b.n	8000e54 <LoopCopyDataInit>

08000e4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e52:	3104      	adds	r1, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e54:	480a      	ldr	r0, [pc, #40]	; (8000e80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e5c:	d3f6      	bcc.n	8000e4c <CopyDataInit>
	ldr	r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e60:	e002      	b.n	8000e68 <LoopFillZerobss>

08000e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e64:	f842 3b04 	str.w	r3, [r2], #4

08000e68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <LoopForever+0x16>)
	cmp	r2, r3
 8000e6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e6c:	d3f9      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f005 ff73 	bl	8006d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fb01 	bl	8000478 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e7c:	08007d9c 	.word	0x08007d9c
	ldr	r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e84:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000e88:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000e8c:	2000115c 	.word	0x2000115c

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>

08000e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f001 f886 	bl	8001fae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f7ff fe70 	bl	8000b88 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb4:	f7ff fd6c 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20001148 	.word	0x20001148

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20001148 	.word	0x20001148

08000f04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3360      	adds	r3, #96	; 0x60
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LL_ADC_SetOffset+0x44>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	03fff000 	.word	0x03fff000

08000fb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3360      	adds	r3, #96	; 0x60
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3360      	adds	r3, #96	; 0x60
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	431a      	orrs	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001016:	b480      	push	{r7}
 8001018:	b087      	sub	sp, #28
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3330      	adds	r3, #48	; 0x30
 8001026:	461a      	mov	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	4413      	add	r3, r2
 8001034:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	211f      	movs	r1, #31
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0e9b      	lsrs	r3, r3, #26
 800104e:	f003 011f 	and.w	r1, r3, #31
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800106e:	b480      	push	{r7}
 8001070:	b087      	sub	sp, #28
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3314      	adds	r3, #20
 800107e:	461a      	mov	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	0e5b      	lsrs	r3, r3, #25
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	0d1b      	lsrs	r3, r3, #20
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	2107      	movs	r1, #7
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	401a      	ands	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	0d1b      	lsrs	r3, r3, #20
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0318 	and.w	r3, r3, #24
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010e8:	40d9      	lsrs	r1, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	400b      	ands	r3, r1
 80010ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f2:	431a      	orrs	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	0007ffff 	.word	0x0007ffff

0800110c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800111c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6093      	str	r3, [r2, #8]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001144:	d101      	bne.n	800114a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800116c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001194:	d101      	bne.n	800119a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <LL_ADC_IsEnabled+0x18>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_ADC_IsEnabled+0x1a>
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b08      	cmp	r3, #8
 8001206:	d101      	bne.n	800120c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e136      	b.n	80014a4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fbcb 	bl	80009e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff67 	bl	8001130 <LL_ADC_IsDeepPowerDownEnabled>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff4d 	bl	800110c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff82 	bl	8001180 <LL_ADC_IsInternalRegulatorEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d115      	bne.n	80012ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff66 	bl	8001158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800128c:	4b87      	ldr	r3, [pc, #540]	; (80014ac <HAL_ADC_Init+0x290>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	4a87      	ldr	r2, [pc, #540]	; (80014b0 <HAL_ADC_Init+0x294>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	3301      	adds	r3, #1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012a0:	e002      	b.n	80012a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f9      	bne.n	80012a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff64 	bl	8001180 <LL_ADC_IsInternalRegulatorEnabled>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff75 	bl	80011ce <LL_ADC_REG_IsConversionOngoing>
 80012e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 80cf 	bne.w	8001492 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80cb 	bne.w	8001492 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001304:	f043 0202 	orr.w	r2, r3, #2
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff49 	bl	80011a8 <LL_ADC_IsEnabled>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d115      	bne.n	8001348 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800131c:	4865      	ldr	r0, [pc, #404]	; (80014b4 <HAL_ADC_Init+0x298>)
 800131e:	f7ff ff43 	bl	80011a8 <LL_ADC_IsEnabled>
 8001322:	4604      	mov	r4, r0
 8001324:	4864      	ldr	r0, [pc, #400]	; (80014b8 <HAL_ADC_Init+0x29c>)
 8001326:	f7ff ff3f 	bl	80011a8 <LL_ADC_IsEnabled>
 800132a:	4603      	mov	r3, r0
 800132c:	431c      	orrs	r4, r3
 800132e:	4863      	ldr	r0, [pc, #396]	; (80014bc <HAL_ADC_Init+0x2a0>)
 8001330:	f7ff ff3a 	bl	80011a8 <LL_ADC_IsEnabled>
 8001334:	4603      	mov	r3, r0
 8001336:	4323      	orrs	r3, r4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4619      	mov	r1, r3
 8001342:	485f      	ldr	r0, [pc, #380]	; (80014c0 <HAL_ADC_Init+0x2a4>)
 8001344:	f7ff fdde 	bl	8000f04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7e5b      	ldrb	r3, [r3, #25]
 800134c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001352:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001358:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800135e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001366:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d106      	bne.n	8001384 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	3b01      	subs	r3, #1
 800137c:	045b      	lsls	r3, r3, #17
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	2b00      	cmp	r3, #0
 800138a:	d009      	beq.n	80013a0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_ADC_Init+0x2a8>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	430b      	orrs	r3, r1
 80013b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff08 	bl	80011ce <LL_ADC_REG_IsConversionOngoing>
 80013be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff15 	bl	80011f4 <LL_ADC_INJ_IsConversionOngoing>
 80013ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d13d      	bne.n	800144e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d13a      	bne.n	800144e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	69b9      	ldr	r1, [r7, #24]
 80013fe:	430b      	orrs	r3, r1
 8001400:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001408:	2b01      	cmp	r3, #1
 800140a:	d118      	bne.n	800143e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001422:	4311      	orrs	r1, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001428:	4311      	orrs	r1, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800142e:	430a      	orrs	r2, r1
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	e007      	b.n	800144e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10c      	bne.n	8001470 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f023 010f 	bic.w	r1, r3, #15
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
 800146e:	e007      	b.n	8001480 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 020f 	bic.w	r2, r2, #15
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	f023 0303 	bic.w	r3, r3, #3
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	; 0x54
 8001490:	e007      	b.n	80014a2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	053e2d63 	.word	0x053e2d63
 80014b4:	50040000 	.word	0x50040000
 80014b8:	50040100 	.word	0x50040100
 80014bc:	50040200 	.word	0x50040200
 80014c0:	50040300 	.word	0x50040300
 80014c4:	fff0c007 	.word	0xfff0c007

080014c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b6      	sub	sp, #216	; 0xd8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x22>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e3c7      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x7b2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe69 	bl	80011ce <LL_ADC_REG_IsConversionOngoing>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 83a8 	bne.w	8001c54 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d824      	bhi.n	8001556 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	3b02      	subs	r3, #2
 8001512:	2b03      	cmp	r3, #3
 8001514:	d81b      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x86>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <HAL_ADC_ConfigChannel+0x54>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001535 	.word	0x08001535
 8001524:	0800153d 	.word	0x0800153d
 8001528:	08001545 	.word	0x08001545
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	220c      	movs	r2, #12
 8001530:	605a      	str	r2, [r3, #4]
          break;
 8001532:	e011      	b.n	8001558 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2212      	movs	r2, #18
 8001538:	605a      	str	r2, [r3, #4]
          break;
 800153a:	e00d      	b.n	8001558 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2218      	movs	r2, #24
 8001540:	605a      	str	r2, [r3, #4]
          break;
 8001542:	e009      	b.n	8001558 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	605a      	str	r2, [r3, #4]
          break;
 800154c:	e004      	b.n	8001558 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2206      	movs	r2, #6
 8001552:	605a      	str	r2, [r3, #4]
          break;
 8001554:	e000      	b.n	8001558 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001556:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	f7ff fd56 	bl	8001016 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe2d 	bl	80011ce <LL_ADC_REG_IsConversionOngoing>
 8001574:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe39 	bl	80011f4 <LL_ADC_INJ_IsConversionOngoing>
 8001582:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 81a6 	bne.w	80018dc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001594:	2b00      	cmp	r3, #0
 8001596:	f040 81a1 	bne.w	80018dc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f7ff fd61 	bl	800106e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d00a      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015de:	f7ff fcc5 	bl	8000f6c <LL_ADC_SetOffset>
 80015e2:	e17b      	b.n	80018dc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fce2 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10a      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x148>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fcd7 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	0e9b      	lsrs	r3, r3, #26
 800160a:	f003 021f 	and.w	r2, r3, #31
 800160e:	e01e      	b.n	800164e <HAL_ADC_ConfigChannel+0x186>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fccc 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800162e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001636:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800163e:	2320      	movs	r3, #32
 8001640:	e004      	b.n	800164c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x19e>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0e9b      	lsrs	r3, r3, #26
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	e018      	b.n	8001698 <HAL_ADC_ConfigChannel+0x1d0>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800167a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800168a:	2320      	movs	r3, #32
 800168c:	e004      	b.n	8001698 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800168e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001698:	429a      	cmp	r2, r3
 800169a:	d106      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fc9b 	bl	8000fe0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc7f 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10a      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x20e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc74 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	0e9b      	lsrs	r3, r3, #26
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	e01e      	b.n	8001714 <HAL_ADC_ConfigChannel+0x24c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2101      	movs	r1, #1
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fc69 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001704:	2320      	movs	r3, #32
 8001706:	e004      	b.n	8001712 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <HAL_ADC_ConfigChannel+0x264>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0e9b      	lsrs	r3, r3, #26
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	e018      	b.n	800175e <HAL_ADC_ConfigChannel+0x296>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001740:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001750:	2320      	movs	r3, #32
 8001752:	e004      	b.n	800175e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800175e:	429a      	cmp	r2, r3
 8001760:	d106      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc38 	bl	8000fe0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2102      	movs	r1, #2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fc1c 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10a      	bne.n	800179c <HAL_ADC_ConfigChannel+0x2d4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2102      	movs	r1, #2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fc11 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	0e9b      	lsrs	r3, r3, #26
 8001796:	f003 021f 	and.w	r2, r3, #31
 800179a:	e01e      	b.n	80017da <HAL_ADC_ConfigChannel+0x312>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fc06 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80017ca:	2320      	movs	r3, #32
 80017cc:	e004      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x32a>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0e9b      	lsrs	r3, r3, #26
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	e016      	b.n	8001820 <HAL_ADC_ConfigChannel+0x358>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800180a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001812:	2320      	movs	r3, #32
 8001814:	e004      	b.n	8001820 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	2102      	movs	r1, #2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fbd7 	bl	8000fe0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2103      	movs	r1, #3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fbbb 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_ADC_ConfigChannel+0x396>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2103      	movs	r1, #3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fbb0 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	e017      	b.n	800188e <HAL_ADC_ConfigChannel+0x3c6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2103      	movs	r1, #3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fba5 	bl	8000fb4 <LL_ADC_GetOffsetChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001878:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800187a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001880:	2320      	movs	r3, #32
 8001882:	e003      	b.n	800188c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x3de>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0e9b      	lsrs	r3, r3, #26
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	e011      	b.n	80018ca <HAL_ADC_ConfigChannel+0x402>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018be:	2320      	movs	r3, #32
 80018c0:	e003      	b.n	80018ca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	2103      	movs	r1, #3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb82 	bl	8000fe0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fc61 	bl	80011a8 <LL_ADC_IsEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 813f 	bne.w	8001b6c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7ff fbe2 	bl	80010c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a8e      	ldr	r2, [pc, #568]	; (8001b40 <HAL_ADC_ConfigChannel+0x678>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 8130 	bne.w	8001b6c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x46c>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0e9b      	lsrs	r3, r3, #26
 8001922:	3301      	adds	r3, #1
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2b09      	cmp	r3, #9
 800192a:	bf94      	ite	ls
 800192c:	2301      	movls	r3, #1
 800192e:	2300      	movhi	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e019      	b.n	8001968 <HAL_ADC_ConfigChannel+0x4a0>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001944:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e003      	b.n	8001958 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	3301      	adds	r3, #1
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2b09      	cmp	r3, #9
 8001960:	bf94      	ite	ls
 8001962:	2301      	movls	r3, #1
 8001964:	2300      	movhi	r3, #0
 8001966:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001968:	2b00      	cmp	r3, #0
 800196a:	d079      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x4c0>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0e9b      	lsrs	r3, r3, #26
 800197e:	3301      	adds	r3, #1
 8001980:	069b      	lsls	r3, r3, #26
 8001982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001986:	e015      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x4ec>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800199a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80019a0:	2320      	movs	r3, #32
 80019a2:	e003      	b.n	80019ac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	069b      	lsls	r3, r3, #26
 80019b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x50c>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0e9b      	lsrs	r3, r3, #26
 80019c6:	3301      	adds	r3, #1
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	e017      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x53c>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80019ec:	2320      	movs	r3, #32
 80019ee:	e003      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80019f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	ea42 0103 	orr.w	r1, r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x562>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	e018      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x594>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	e080      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x5b4>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	3301      	adds	r3, #1
 8001a74:	069b      	lsls	r3, r3, #26
 8001a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a7a:	e015      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x5e0>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001a94:	2320      	movs	r3, #32
 8001a96:	e003      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	069b      	lsls	r3, r3, #26
 8001aa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x600>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	3301      	adds	r3, #1
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	e017      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x630>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e003      	b.n	8001aec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2101      	movs	r1, #1
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	ea42 0103 	orr.w	r1, r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x65c>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b1e      	subs	r3, #30
 8001b1c:	051b      	lsls	r3, r3, #20
 8001b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b22:	e01d      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x698>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	613b      	str	r3, [r7, #16]
  return result;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	e005      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x684>
 8001b40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f003 021f 	and.w	r2, r3, #31
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	3b1e      	subs	r3, #30
 8001b5a:	051b      	lsls	r3, r3, #20
 8001b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b60:	430b      	orrs	r3, r1
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	6892      	ldr	r2, [r2, #8]
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff fa81 	bl	800106e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d07a      	beq.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b78:	4843      	ldr	r0, [pc, #268]	; (8001c88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b7a:	f7ff f9e9 	bl	8000f50 <LL_ADC_GetCommonPathInternalCh>
 8001b7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d12c      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d126      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x6e4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d15d      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4834      	ldr	r0, [pc, #208]	; (8001c88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bb8:	f7ff f9b7 	bl	8000f2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_ADC_ConfigChannel+0x7d0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <HAL_ADC_ConfigChannel+0x7d4>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bd6:	e002      	b.n	8001bde <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001be4:	e040      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d118      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x75a>
 8001bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d112      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x748>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12d      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481b      	ldr	r0, [pc, #108]	; (8001c88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c1c:	f7ff f985 	bl	8000f2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c20:	e024      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d120      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d11a      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d115      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c4e:	f7ff f96c 	bl	8000f2a <LL_ADC_SetCommonPathInternalCh>
 8001c52:	e00c      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c66:	e002      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c68:	bf00      	nop
 8001c6a:	e000      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	37d8      	adds	r7, #216	; 0xd8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	80080000 	.word	0x80080000
 8001c88:	50040300 	.word	0x50040300
 8001c8c:	c7520000 	.word	0xc7520000
 8001c90:	50040000 	.word	0x50040000
 8001c94:	50040200 	.word	0x50040200
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	053e2d63 	.word	0x053e2d63
 8001ca0:	cb840000 	.word	0xcb840000
 8001ca4:	80000001 	.word	0x80000001

08001ca8 <LL_ADC_IsEnabled>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_IsEnabled+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_IsEnabled+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_REG_IsConversionOngoing>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b09f      	sub	sp, #124	; 0x7c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e093      	b.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	e001      	b.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10b      	bne.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e072      	b.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ffb9 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ffb3 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d154      	bne.n	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d151      	bne.n	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d76:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d02c      	beq.n	8001dda <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d92:	035b      	lsls	r3, r3, #13
 8001d94:	430b      	orrs	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d9c:	4829      	ldr	r0, [pc, #164]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d9e:	f7ff ff83 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001da2:	4604      	mov	r4, r0
 8001da4:	4828      	ldr	r0, [pc, #160]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001da6:	f7ff ff7f 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001daa:	4603      	mov	r3, r0
 8001dac:	431c      	orrs	r4, r3
 8001dae:	4828      	ldr	r0, [pc, #160]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001db0:	f7ff ff7a 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4323      	orrs	r3, r4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d137      	bne.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dc4:	f023 030f 	bic.w	r3, r3, #15
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6892      	ldr	r2, [r2, #8]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dd8:	e028      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de6:	4817      	ldr	r0, [pc, #92]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001de8:	f7ff ff5e 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001dec:	4604      	mov	r4, r0
 8001dee:	4816      	ldr	r0, [pc, #88]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001df0:	f7ff ff5a 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	431c      	orrs	r4, r3
 8001df8:	4815      	ldr	r0, [pc, #84]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001dfa:	f7ff ff55 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4323      	orrs	r3, r4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d112      	bne.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e0e:	f023 030f 	bic.w	r3, r3, #15
 8001e12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e16:	e009      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e2a:	e000      	b.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	377c      	adds	r7, #124	; 0x7c
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	50040000 	.word	0x50040000
 8001e48:	50040100 	.word	0x50040100
 8001e4c:	50040300 	.word	0x50040300
 8001e50:	50040200 	.word	0x50040200

08001e54 <__NVIC_SetPriorityGrouping>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff4c 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd6:	f7ff ff61 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ffb1 	bl	8001f48 <NVIC_EncodePriority>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff80 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff54 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e17f      	b.n	8002328 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8171 	beq.w	8002322 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d00b      	beq.n	8002060 <HAL_GPIO_Init+0x48>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002054:	2b11      	cmp	r3, #17
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b12      	cmp	r3, #18
 800205e:	d130      	bne.n	80020c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002096:	2201      	movs	r2, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 0201 	and.w	r2, r3, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d118      	bne.n	8002100 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020d4:	2201      	movs	r2, #1
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x128>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b12      	cmp	r3, #18
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	6939      	ldr	r1, [r7, #16]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ac 	beq.w	8002322 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <HAL_GPIO_Init+0x330>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	4a5e      	ldr	r2, [pc, #376]	; (8002348 <HAL_GPIO_Init+0x330>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6613      	str	r3, [r2, #96]	; 0x60
 80021d6:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <HAL_GPIO_Init+0x330>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e2:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_GPIO_Init+0x334>)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800220c:	d025      	beq.n	800225a <HAL_GPIO_Init+0x242>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x338>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_GPIO_Init+0x23e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_GPIO_Init+0x33c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x340>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0x236>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x344>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_GPIO_Init+0x232>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_GPIO_Init+0x348>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x22e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_GPIO_Init+0x34c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x22a>
 800223e:	2306      	movs	r3, #6
 8002240:	e00c      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002242:	2307      	movs	r3, #7
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002246:	2305      	movs	r3, #5
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x244>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x244>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x244>
 800225a:	2300      	movs	r3, #0
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226c:	4937      	ldr	r1, [pc, #220]	; (800234c <HAL_GPIO_Init+0x334>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_GPIO_Init+0x350>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800229e:	4a32      	ldr	r2, [pc, #200]	; (8002368 <HAL_GPIO_Init+0x350>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_GPIO_Init+0x350>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_GPIO_Init+0x350>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_GPIO_Init+0x350>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022f2:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_GPIO_Init+0x350>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_GPIO_Init+0x350>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_GPIO_Init+0x350>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f ae78 	bne.w	8002028 <HAL_GPIO_Init+0x10>
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000
 8002350:	48000400 	.word	0x48000400
 8002354:	48000800 	.word	0x48000800
 8002358:	48000c00 	.word	0x48000c00
 800235c:	48001000 	.word	0x48001000
 8002360:	48001400 	.word	0x48001400
 8002364:	48001800 	.word	0x48001800
 8002368:	40010400 	.word	0x40010400

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002388:	e002      	b.n	8002390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c6:	d130      	bne.n	800242a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d038      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2232      	movs	r2, #50	; 0x32
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fc:	e002      	b.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b01      	subs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d102      	bne.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f2      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002424:	d110      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d007      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002446:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40007000 	.word	0x40007000
 800245c:	20000000 	.word	0x20000000
 8002460:	431bde83 	.word	0x431bde83

08002464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e3d4      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002476:	4ba1      	ldr	r3, [pc, #644]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80e4 	beq.w	8002660 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_RCC_OscConfig+0x4a>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	f040 808b 	bne.w	80025bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	f040 8087 	bne.w	80025bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ae:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e3ac      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_RCC_OscConfig+0x7c>
 80024d6:	4b89      	ldr	r3, [pc, #548]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024de:	e005      	b.n	80024ec <HAL_RCC_OscConfig+0x88>
 80024e0:	4b86      	ldr	r3, [pc, #536]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d223      	bcs.n	8002538 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fd5d 	bl	8002fb4 <RCC_SetFlashLatencyFromMSIRange>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e38d      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7c      	ldr	r2, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4977      	ldr	r1, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4972      	ldr	r1, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 8002536:	e025      	b.n	8002584 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002538:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6f      	ldr	r2, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	496a      	ldr	r1, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002556:	4b69      	ldr	r3, [pc, #420]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	4965      	ldr	r1, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fd1d 	bl	8002fb4 <RCC_SetFlashLatencyFromMSIRange>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e34d      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002584:	f000 fc36 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	495a      	ldr	r1, [pc, #360]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_RCC_OscConfig+0x2a0>)
 80025a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025a4:	4b58      	ldr	r3, [pc, #352]	; (8002708 <HAL_RCC_OscConfig+0x2a4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe faed 	bl	8000b88 <HAL_InitTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d052      	beq.n	800265e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	e331      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d032      	beq.n	800262a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025c4:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fc8c 	bl	8000eec <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d8:	f7fe fc88 	bl	8000eec <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e31a      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a40      	ldr	r2, [pc, #256]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	493b      	ldr	r1, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	4936      	ldr	r1, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e01a      	b.n	8002660 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a33      	ldr	r2, [pc, #204]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002636:	f7fe fc59 	bl	8000eec <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263e:	f7fe fc55 	bl	8000eec <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e2e7      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x1da>
 800265c:	e000      	b.n	8002660 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d074      	beq.n	8002756 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x21a>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d10e      	bne.n	8002696 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d10b      	bne.n	8002696 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d064      	beq.n	8002754 <HAL_RCC_OscConfig+0x2f0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d160      	bne.n	8002754 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e2c4      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x24a>
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e01d      	b.n	80026ea <HAL_RCC_OscConfig+0x286>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x26e>
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e00b      	b.n	80026ea <HAL_RCC_OscConfig+0x286>
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a06      	ldr	r2, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x298>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01c      	beq.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fbfb 	bl	8000eec <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f8:	e011      	b.n	800271e <HAL_RCC_OscConfig+0x2ba>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	08007cb4 	.word	0x08007cb4
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fbee 	bl	8000eec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e280      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271e:	4baf      	ldr	r3, [pc, #700]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x2a8>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fbde 	bl	8000eec <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fbda 	bl	8000eec <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e26c      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002746:	4ba5      	ldr	r3, [pc, #660]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x2d0>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d060      	beq.n	8002824 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x310>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d116      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002774:	4b99      	ldr	r3, [pc, #612]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x328>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e249      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b93      	ldr	r3, [pc, #588]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	4990      	ldr	r1, [pc, #576]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a0:	e040      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d023      	beq.n	80027f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a8b      	ldr	r2, [pc, #556]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fb99 	bl	8000eec <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe fb95 	bl	8000eec <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e227      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d0:	4b82      	ldr	r3, [pc, #520]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	497c      	ldr	r1, [pc, #496]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b7a      	ldr	r3, [pc, #488]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a79      	ldr	r2, [pc, #484]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80027f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fb75 	bl	8000eec <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fb71 	bl	8000eec <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e203      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002818:	4b70      	ldr	r3, [pc, #448]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03c      	beq.n	80028aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	4a67      	ldr	r2, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fb50 	bl	8000eec <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fb4c 	bl	8000eec <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1de      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002862:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x3ec>
 8002870:	e01b      	b.n	80028aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fb33 	bl	8000eec <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fb2f 	bl	8000eec <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1c1      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289c:	4b4f      	ldr	r3, [pc, #316]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ef      	bne.n	800288a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80a6 	beq.w	8002a04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028bc:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a43      	ldr	r2, [pc, #268]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_OscConfig+0x57c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x57c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3a      	ldr	r2, [pc, #232]	; (80029e0 <HAL_RCC_OscConfig+0x57c>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fc:	f7fe faf6 	bl	8000eec <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe faf2 	bl	8000eec <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e184      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x57c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_RCC_OscConfig+0x4d8>
 800292a:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293a:	e024      	b.n	8002986 <HAL_RCC_OscConfig+0x522>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d110      	bne.n	8002966 <HAL_RCC_OscConfig+0x502>
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a24      	ldr	r2, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a20      	ldr	r2, [pc, #128]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002964:	e00f      	b.n	8002986 <HAL_RCC_OscConfig+0x522>
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7fe faad 	bl	8000eec <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe faa9 	bl	8000eec <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e139      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x578>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ed      	beq.n	8002996 <HAL_RCC_OscConfig+0x532>
 80029ba:	e01a      	b.n	80029f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fa96 	bl	8000eec <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c2:	e00f      	b.n	80029e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fa92 	bl	8000eec <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d906      	bls.n	80029e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e122      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e4:	4b90      	ldr	r3, [pc, #576]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e8      	bne.n	80029c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a8a      	ldr	r2, [pc, #552]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8108 	beq.w	8002c1e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	f040 80d0 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a18:	4b83      	ldr	r3, [pc, #524]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d130      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d127      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a58:	2a07      	cmp	r2, #7
 8002a5a:	bf14      	ite	ne
 8002a5c:	2201      	movne	r2, #1
 8002a5e:	2200      	moveq	r2, #0
 8002a60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	3b01      	subs	r3, #1
 8002a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d06e      	beq.n	8002b6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d069      	beq.n	8002b68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a94:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002aa0:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0b7      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a5c      	ldr	r2, [pc, #368]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002abc:	f7fe fa16 	bl	8000eec <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fa12 	bl	8000eec <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0a4      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <HAL_RCC_OscConfig+0x7c8>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002afc:	0212      	lsls	r2, r2, #8
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b04:	0852      	lsrs	r2, r2, #1
 8002b06:	3a01      	subs	r2, #1
 8002b08:	0552      	lsls	r2, r2, #21
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0652      	lsls	r2, r2, #25
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b1c:	0912      	lsrs	r2, r2, #4
 8002b1e:	0452      	lsls	r2, r2, #17
 8002b20:	430a      	orrs	r2, r1
 8002b22:	4941      	ldr	r1, [pc, #260]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a3e      	ldr	r2, [pc, #248]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b34:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b40:	f7fe f9d4 	bl	8000eec <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe f9d0 	bl	8000eec <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e062      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5a:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b66:	e05a      	b.n	8002c1e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e059      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d152      	bne.n	8002c1e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b90:	f7fe f9ac 	bl	8000eec <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe f9a8 	bl	8000eec <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e03a      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x734>
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d02d      	beq.n	8002c1a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002be8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f97b 	bl	8000eec <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f977 	bl	8000eec <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e009      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x796>
 8002c18:	e001      	b.n	8002c1e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	f99d808c 	.word	0xf99d808c

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0c8      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d910      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0207 	bic.w	r2, r3, #7
 8002c5a:	4961      	ldr	r1, [pc, #388]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0b0      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d04c      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c88:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d121      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e09e      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d115      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e092      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e086      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc8:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e07e      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	493f      	ldr	r1, [pc, #252]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cea:	f7fe f8ff 	bl	8000eec <HAL_GetTick>
 8002cee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fe f8fb 	bl	8000eec <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e066      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 020c 	and.w	r2, r3, #12
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d1eb      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	492c      	ldr	r1, [pc, #176]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d210      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4924      	ldr	r1, [pc, #144]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e036      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4918      	ldr	r1, [pc, #96]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4910      	ldr	r1, [pc, #64]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da6:	f000 f825 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490c      	ldr	r1, [pc, #48]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fedc 	bl	8000b88 <HAL_InitTick>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08007cb4 	.word	0x08007cb4
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11e      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d134      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8002e98:	e005      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9c:	617b      	str	r3, [r7, #20]
      break;
 8002e9e:	e005      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea2:	617b      	str	r3, [r7, #20]
      break;
 8002ea4:	e002      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	617b      	str	r3, [r7, #20]
      break;
 8002eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	fb02 f203 	mul.w	r2, r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	0e5b      	lsrs	r3, r3, #25
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	3301      	adds	r3, #1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eec:	69bb      	ldr	r3, [r7, #24]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08007ccc 	.word	0x08007ccc
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200

08002f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f28:	f7ff fff0 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0adb      	lsrs	r3, r3, #11
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08007cc4 	.word	0x08007cc4

08002f50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	08db      	lsrs	r3, r3, #3
 8002f8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCC_GetClockConfig+0x60>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0207 	and.w	r2, r3, #7
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fcc:	f7ff f9e6 	bl	800239c <HAL_PWREx_GetVoltageRange>
 8002fd0:	6178      	str	r0, [r7, #20]
 8002fd2:	e014      	b.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fec:	f7ff f9d6 	bl	800239c <HAL_PWREx_GetVoltageRange>
 8002ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003004:	d10b      	bne.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d919      	bls.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2ba0      	cmp	r3, #160	; 0xa0
 8003010:	d902      	bls.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003012:	2302      	movs	r3, #2
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e013      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e010      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d902      	bls.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003024:	2303      	movs	r3, #3
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e00a      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d102      	bne.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003030:	2302      	movs	r3, #2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	e004      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b70      	cmp	r3, #112	; 0x70
 800303a:	d101      	bne.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800303c:	2301      	movs	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 0207 	bic.w	r2, r3, #7
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d001      	beq.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800307c:	2300      	movs	r3, #0
 800307e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003080:	2300      	movs	r3, #0
 8003082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	2b00      	cmp	r3, #0
 800308e:	d041      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003098:	d02a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800309a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800309e:	d824      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030aa:	d81e      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b4:	d010      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b6:	e018      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b8:	4b86      	ldr	r3, [pc, #536]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a85      	ldr	r2, [pc, #532]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c4:	e015      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fabb 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d6:	e00c      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3320      	adds	r3, #32
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fba6 	bl	8003830 <RCCEx_PLLSAI2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	74fb      	strb	r3, [r7, #19]
      break;
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003106:	4973      	ldr	r1, [pc, #460]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800310e:	e001      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800312a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b62      	ldr	r3, [pc, #392]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a61      	ldr	r2, [pc, #388]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa73 	bl	8003648 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb5e 	bl	8003830 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003188:	4b52      	ldr	r3, [pc, #328]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003196:	494f      	ldr	r1, [pc, #316]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a0 	beq.w	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f4:	f7fd fe7a 	bl	8000eec <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031fa:	e009      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fc:	f7fd fe76 	bl	8000eec <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d902      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	74fb      	strb	r3, [r7, #19]
        break;
 800320e:	e005      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ef      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d15c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d019      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fd fe35 	bl	8000eec <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003284:	e00b      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fd fe31 	bl	8000eec <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d902      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	74fb      	strb	r3, [r7, #19]
            break;
 800329c:	e006      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ec      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ca:	e009      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e0:	7c7b      	ldrb	r3, [r7, #17]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b9e      	ldr	r3, [pc, #632]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	4a9d      	ldr	r2, [pc, #628]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032fe:	4b98      	ldr	r3, [pc, #608]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 0203 	bic.w	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4994      	ldr	r1, [pc, #592]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003320:	4b8f      	ldr	r3, [pc, #572]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 020c 	bic.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	498c      	ldr	r1, [pc, #560]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003342:	4b87      	ldr	r3, [pc, #540]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4983      	ldr	r1, [pc, #524]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003364:	4b7e      	ldr	r3, [pc, #504]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	497b      	ldr	r1, [pc, #492]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	4972      	ldr	r1, [pc, #456]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a8:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	496a      	ldr	r1, [pc, #424]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	4961      	ldr	r1, [pc, #388]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ec:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	4959      	ldr	r1, [pc, #356]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340e:	4b54      	ldr	r3, [pc, #336]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	4950      	ldr	r1, [pc, #320]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	4948      	ldr	r1, [pc, #288]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003452:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	493f      	ldr	r1, [pc, #252]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d028      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003492:	d106      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003494:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a31      	ldr	r2, [pc, #196]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800349e:	60d3      	str	r3, [r2, #12]
 80034a0:	e011      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f8c8 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	491f      	ldr	r1, [pc, #124]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f0:	d106      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fc:	60d3      	str	r3, [r2, #12]
 80034fe:	e011      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f899 	bl	8003648 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a02      	ldr	r2, [pc, #8]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
 800355c:	e014      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800356c:	d10c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f867 	bl	8003648 <RCCEx_PLLSAI1_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02f      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003594:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	4928      	ldr	r1, [pc, #160]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f844 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d014      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	74bb      	strb	r3, [r7, #18]
 80035ce:	e011      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3320      	adds	r3, #32
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f925 	bl	8003830 <RCCEx_PLLSAI2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360e:	490d      	ldr	r1, [pc, #52]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800363a:	7cbb      	ldrb	r3, [r7, #18]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003656:	4b75      	ldr	r3, [pc, #468]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0203 	and.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d10d      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
       ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800367a:	4b6c      	ldr	r3, [pc, #432]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
       ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d047      	beq.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	e044      	b.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d018      	beq.n	80036ce <RCCEx_PLLSAI1_Config+0x86>
 800369c:	2b03      	cmp	r3, #3
 800369e:	d825      	bhi.n	80036ec <RCCEx_PLLSAI1_Config+0xa4>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d002      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x62>
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d009      	beq.n	80036bc <RCCEx_PLLSAI1_Config+0x74>
 80036a8:	e020      	b.n	80036ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036aa:	4b60      	ldr	r3, [pc, #384]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11d      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e01a      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036bc:	4b5b      	ldr	r3, [pc, #364]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036cc:	e013      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ce:	4b57      	ldr	r3, [pc, #348]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036da:	4b54      	ldr	r3, [pc, #336]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ea:	e006      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e004      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	430b      	orrs	r3, r1
 8003718:	4944      	ldr	r1, [pc, #272]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d17d      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a40      	ldr	r2, [pc, #256]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800372e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fd fbdc 	bl	8000eec <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003738:	f7fd fbd8 	bl	8000eec <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
        break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ef      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d160      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d111      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	0211      	lsls	r1, r2, #8
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	0912      	lsrs	r2, r2, #4
 800377c:	0452      	lsls	r2, r2, #17
 800377e:	430a      	orrs	r2, r1
 8003780:	492a      	ldr	r1, [pc, #168]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
 8003786:	e027      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d112      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003796:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	0211      	lsls	r1, r2, #8
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6912      	ldr	r2, [r2, #16]
 80037a4:	0852      	lsrs	r2, r2, #1
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0552      	lsls	r2, r2, #21
 80037aa:	430a      	orrs	r2, r1
 80037ac:	491f      	ldr	r1, [pc, #124]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
 80037b2:	e011      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6952      	ldr	r2, [r2, #20]
 80037ca:	0852      	lsrs	r2, r2, #1
 80037cc:	3a01      	subs	r2, #1
 80037ce:	0652      	lsls	r2, r2, #25
 80037d0:	430a      	orrs	r2, r1
 80037d2:	4916      	ldr	r1, [pc, #88]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd fb82 	bl	8000eec <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fd fb7e 	bl	8000eec <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
          break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10d      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
       ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
       ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d047      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI2_Config+0x86>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x62>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x74>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	430b      	orrs	r3, r1
 8003900:	4939      	ldr	r1, [pc, #228]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d167      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd fae8 	bl	8000eec <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003920:	f7fd fae4 	bl	8000eec <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d14a      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	0912      	lsrs	r2, r2, #4
 8003964:	0452      	lsls	r2, r2, #17
 8003966:	430a      	orrs	r2, r1
 8003968:	491f      	ldr	r1, [pc, #124]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	614b      	str	r3, [r1, #20]
 800396e:	e011      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0211      	lsls	r1, r2, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6912      	ldr	r2, [r2, #16]
 8003986:	0852      	lsrs	r2, r2, #1
 8003988:	3a01      	subs	r2, #1
 800398a:	0652      	lsls	r2, r2, #25
 800398c:	430a      	orrs	r2, r1
 800398e:	4916      	ldr	r1, [pc, #88]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd faa4 	bl	8000eec <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039a6:	e009      	b.n	80039bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a8:	f7fd faa0 	bl	8000eec <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ba:	e005      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e049      	b.n	8003a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f84c 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 fc24 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d001      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04f      	b.n	8003b54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x76>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d018      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x76>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x76>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x76>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x76>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x76>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d115      	bne.n	8003b3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b06      	cmp	r3, #6
 8003b22:	d015      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0xb4>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2a:	d011      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	e008      	b.n	8003b50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e000      	b.n	8003b52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40013400 	.word	0x40013400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	00010007 	.word	0x00010007

08003b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e049      	b.n	8003c22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f841 	bl	8003c2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fb5c 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d122      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d11b      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f06f 0202 	mvn.w	r2, #2
 8003c6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fadb 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003c86:	e005      	b.n	8003c94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 facd 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fade 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d122      	bne.n	8003cee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d11b      	bne.n	8003cee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f06f 0204 	mvn.w	r2, #4
 8003cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fab1 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003cda:	e005      	b.n	8003ce8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 faa3 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fab4 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d122      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11b      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0208 	mvn.w	r2, #8
 8003d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fa87 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003d2e:	e005      	b.n	8003d3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa79 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa8a 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d122      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d11b      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0210 	mvn.w	r2, #16
 8003d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa5d 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003d82:	e005      	b.n	8003d90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fa4f 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa60 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10e      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0201 	mvn.w	r2, #1
 8003dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fc fdcf 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d10e      	bne.n	8003dee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d107      	bne.n	8003dee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fee1 	bl	8004bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfc:	d10e      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d107      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fed4 	bl	8004bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d10e      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d107      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa0e 	bl	8004264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d10e      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d107      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0220 	mvn.w	r2, #32
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fe94 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0fd      	b.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b14      	cmp	r3, #20
 8003ea2:	f200 80f0 	bhi.w	8004086 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08004087 	.word	0x08004087
 8003eb4:	08004087 	.word	0x08004087
 8003eb8:	08004087 	.word	0x08004087
 8003ebc:	08003f41 	.word	0x08003f41
 8003ec0:	08004087 	.word	0x08004087
 8003ec4:	08004087 	.word	0x08004087
 8003ec8:	08004087 	.word	0x08004087
 8003ecc:	08003f83 	.word	0x08003f83
 8003ed0:	08004087 	.word	0x08004087
 8003ed4:	08004087 	.word	0x08004087
 8003ed8:	08004087 	.word	0x08004087
 8003edc:	08003fc3 	.word	0x08003fc3
 8003ee0:	08004087 	.word	0x08004087
 8003ee4:	08004087 	.word	0x08004087
 8003ee8:	08004087 	.word	0x08004087
 8003eec:	08004005 	.word	0x08004005
 8003ef0:	08004087 	.word	0x08004087
 8003ef4:	08004087 	.word	0x08004087
 8003ef8:	08004087 	.word	0x08004087
 8003efc:	08004045 	.word	0x08004045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fa50 	bl	80043ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0208 	orr.w	r2, r2, #8
 8003f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6999      	ldr	r1, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	619a      	str	r2, [r3, #24]
      break;
 8003f3e:	e0a3      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fac0 	bl	80044cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	021a      	lsls	r2, r3, #8
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	619a      	str	r2, [r3, #24]
      break;
 8003f80:	e082      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fb29 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0208 	orr.w	r2, r2, #8
 8003f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0204 	bic.w	r2, r2, #4
 8003fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69d9      	ldr	r1, [r3, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	61da      	str	r2, [r3, #28]
      break;
 8003fc0:	e062      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb91 	bl	80046f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69d9      	ldr	r1, [r3, #28]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	61da      	str	r2, [r3, #28]
      break;
 8004002:	e041      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fbda 	bl	80047c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0208 	orr.w	r2, r2, #8
 800401e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0204 	bic.w	r2, r2, #4
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004042:	e021      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fc1e 	bl	800488c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004084:	e000      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop

0800409c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_ConfigClockSource+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0b5      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x184>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f0:	d03e      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0xd4>
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f6:	f200 8087 	bhi.w	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fe:	f000 8085 	beq.w	800420c <HAL_TIM_ConfigClockSource+0x170>
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d87f      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b70      	cmp	r3, #112	; 0x70
 800410a:	d01a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0xa6>
 800410c:	2b70      	cmp	r3, #112	; 0x70
 800410e:	d87b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b60      	cmp	r3, #96	; 0x60
 8004112:	d050      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004114:	2b60      	cmp	r3, #96	; 0x60
 8004116:	d877      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b50      	cmp	r3, #80	; 0x50
 800411a:	d03c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0xfa>
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	d873      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d058      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d86f      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b30      	cmp	r3, #48	; 0x30
 800412a:	d064      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d86b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d060      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004134:	2b20      	cmp	r3, #32
 8004136:	d867      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05c      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 800413c:	2b10      	cmp	r3, #16
 800413e:	d05a      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004140:	e062      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6899      	ldr	r1, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f000 fc7b 	bl	8004a4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004164:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	609a      	str	r2, [r3, #8]
      break;
 800416e:	e04e      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6899      	ldr	r1, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f000 fc64 	bl	8004a4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004192:	609a      	str	r2, [r3, #8]
      break;
 8004194:	e03b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 fbd8 	bl	8004958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2150      	movs	r1, #80	; 0x50
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fc31 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80041b4:	e02b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 fbf7 	bl	80049b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2160      	movs	r1, #96	; 0x60
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fc21 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80041d4:	e01b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 fbb8 	bl	8004958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fc11 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80041f4:	e00b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 fc08 	bl	8004a16 <TIM_ITRx_SetConfig>
        break;
 8004206:	e002      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800420c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d00f      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <TIM_Base_SetConfig+0x118>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2f      	ldr	r2, [pc, #188]	; (800438c <TIM_Base_SetConfig+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01f      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d01b      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <TIM_Base_SetConfig+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d017      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a10      	ldr	r2, [pc, #64]	; (800438c <TIM_Base_SetConfig+0x114>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00f      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <TIM_Base_SetConfig+0x124>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00b      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40013400 	.word	0x40013400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 0302 	bic.w	r3, r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a2c      	ldr	r2, [pc, #176]	; (80044b8 <TIM_OC1_SetConfig+0x10c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00f      	beq.n	800442c <TIM_OC1_SetConfig+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a2b      	ldr	r2, [pc, #172]	; (80044bc <TIM_OC1_SetConfig+0x110>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_OC1_SetConfig+0x80>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <TIM_OC1_SetConfig+0x114>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_OC1_SetConfig+0x80>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <TIM_OC1_SetConfig+0x118>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_OC1_SetConfig+0x80>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <TIM_OC1_SetConfig+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10c      	bne.n	8004446 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0308 	bic.w	r3, r3, #8
 8004432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <TIM_OC1_SetConfig+0x10c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00f      	beq.n	800446e <TIM_OC1_SetConfig+0xc2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <TIM_OC1_SetConfig+0x110>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_OC1_SetConfig+0xc2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <TIM_OC1_SetConfig+0x114>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <TIM_OC1_SetConfig+0xc2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <TIM_OC1_SetConfig+0x118>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_OC1_SetConfig+0xc2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <TIM_OC1_SetConfig+0x11c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800447c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0210 	bic.w	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a28      	ldr	r2, [pc, #160]	; (80045cc <TIM_OC2_SetConfig+0x100>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC2_SetConfig+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <TIM_OC2_SetConfig+0x104>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10d      	bne.n	8004554 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <TIM_OC2_SetConfig+0x100>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_OC2_SetConfig+0xb0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <TIM_OC2_SetConfig+0x104>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_OC2_SetConfig+0xb0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <TIM_OC2_SetConfig+0x108>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_OC2_SetConfig+0xb0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <TIM_OC2_SetConfig+0x10c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC2_SetConfig+0xb0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a19      	ldr	r2, [pc, #100]	; (80045dc <TIM_OC2_SetConfig+0x110>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d113      	bne.n	80045a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800462c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a27      	ldr	r2, [pc, #156]	; (80046dc <TIM_OC3_SetConfig+0xfc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_OC3_SetConfig+0x6a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <TIM_OC3_SetConfig+0x100>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10d      	bne.n	8004666 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <TIM_OC3_SetConfig+0xfc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00f      	beq.n	800468e <TIM_OC3_SetConfig+0xae>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <TIM_OC3_SetConfig+0x100>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00b      	beq.n	800468e <TIM_OC3_SetConfig+0xae>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <TIM_OC3_SetConfig+0x104>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <TIM_OC3_SetConfig+0xae>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <TIM_OC3_SetConfig+0x108>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0xae>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a18      	ldr	r2, [pc, #96]	; (80046ec <TIM_OC3_SetConfig+0x10c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d113      	bne.n	80046b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40013400 	.word	0x40013400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800

080046f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800473e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <TIM_OC4_SetConfig+0xc0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00f      	beq.n	8004774 <TIM_OC4_SetConfig+0x84>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC4_SetConfig+0xc4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00b      	beq.n	8004774 <TIM_OC4_SetConfig+0x84>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC4_SetConfig+0xc8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_OC4_SetConfig+0x84>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <TIM_OC4_SetConfig+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_OC4_SetConfig+0x84>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <TIM_OC4_SetConfig+0xd0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d109      	bne.n	8004788 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800477a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800

080047c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004808:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a17      	ldr	r2, [pc, #92]	; (8004878 <TIM_OC5_SetConfig+0xb4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_OC5_SetConfig+0x7a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <TIM_OC5_SetConfig+0xb8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_OC5_SetConfig+0x7a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <TIM_OC5_SetConfig+0xbc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_OC5_SetConfig+0x7a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <TIM_OC5_SetConfig+0xc0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_OC5_SetConfig+0x7a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <TIM_OC5_SetConfig+0xc4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d109      	bne.n	8004852 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004844:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	621a      	str	r2, [r3, #32]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40013400 	.word	0x40013400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	051b      	lsls	r3, r3, #20
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <TIM_OC6_SetConfig+0xb8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00f      	beq.n	8004908 <TIM_OC6_SetConfig+0x7c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <TIM_OC6_SetConfig+0xbc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_OC6_SetConfig+0x7c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <TIM_OC6_SetConfig+0xc0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_OC6_SetConfig+0x7c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <TIM_OC6_SetConfig+0xc4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC6_SetConfig+0x7c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a14      	ldr	r2, [pc, #80]	; (8004954 <TIM_OC6_SetConfig+0xc8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40013400 	.word	0x40013400
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800

08004958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f023 0201 	bic.w	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f023 030a 	bic.w	r3, r3, #10
 8004994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0210 	bic.w	r2, r3, #16
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f043 0307 	orr.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e068      	b.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2e      	ldr	r2, [pc, #184]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d108      	bne.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01d      	beq.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d018      	beq.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d10c      	bne.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40014000 	.word	0x40014000

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b08b      	sub	sp, #44	; 0x2c
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	613b      	str	r3, [r7, #16]
  return result;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	2103      	movs	r1, #3
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	401a      	ands	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	fa93 f3a3 	rbit	r3, r3
 8004c20:	61fb      	str	r3, [r7, #28]
  return result;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	e003      	b.n	8004c38 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	372c      	adds	r7, #44	; 0x2c
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	401a      	ands	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b08b      	sub	sp, #44	; 0x2c
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	613b      	str	r3, [r7, #16]
  return result;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004ca8:	2320      	movs	r3, #32
 8004caa:	e003      	b.n	8004cb4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	fab3 f383 	clz	r3, r3
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	2103      	movs	r1, #3
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	61fb      	str	r3, [r7, #28]
  return result;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e003      	b.n	8004ce2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004cf0:	bf00      	nop
 8004cf2:	372c      	adds	r7, #44	; 0x2c
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b08b      	sub	sp, #44	; 0x2c
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	613b      	str	r3, [r7, #16]
  return result;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004d22:	2320      	movs	r3, #32
 8004d24:	e003      	b.n	8004d2e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2103      	movs	r1, #3
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	401a      	ands	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	61fb      	str	r3, [r7, #28]
  return result;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e003      	b.n	8004d5c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	60da      	str	r2, [r3, #12]
}
 8004d6a:	bf00      	nop
 8004d6c:	372c      	adds	r7, #44	; 0x2c
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b08b      	sub	sp, #44	; 0x2c
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1a      	ldr	r2, [r3, #32]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	613b      	str	r3, [r7, #16]
  return result;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	e003      	b.n	8004da8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	210f      	movs	r1, #15
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	61fb      	str	r3, [r7, #28]
  return result;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004dca:	2320      	movs	r3, #32
 8004dcc:	e003      	b.n	8004dd6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	fab3 f383 	clz	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	431a      	orrs	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004de4:	bf00      	nop
 8004de6:	372c      	adds	r7, #44	; 0x2c
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b08b      	sub	sp, #44	; 0x2c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	fa93 f3a3 	rbit	r3, r3
 8004e0c:	613b      	str	r3, [r7, #16]
  return result;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004e18:	2320      	movs	r3, #32
 8004e1a:	e003      	b.n	8004e24 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	210f      	movs	r1, #15
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	61fb      	str	r3, [r7, #28]
  return result;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e003      	b.n	8004e54 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004e62:	bf00      	nop
 8004e64:	372c      	adds	r7, #44	; 0x2c
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b088      	sub	sp, #32
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	fa93 f3a3 	rbit	r3, r3
 8004e84:	60fb      	str	r3, [r7, #12]
  return result;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <LL_GPIO_Init+0x26>
    return 32U;
 8004e90:	2320      	movs	r3, #32
 8004e92:	e003      	b.n	8004e9c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004e9e:	e048      	b.n	8004f32 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03a      	beq.n	8004f2c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d003      	beq.n	8004ec6 <LL_GPIO_Init+0x58>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d10e      	bne.n	8004ee4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	69b9      	ldr	r1, [r7, #24]
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fed7 	bl	8004c82 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff feb7 	bl	8004c52 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff05 	bl	8004cfc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d111      	bne.n	8004f1e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2bff      	cmp	r3, #255	; 0xff
 8004efe:	d807      	bhi.n	8004f10 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	461a      	mov	r2, r3
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff34 	bl	8004d76 <LL_GPIO_SetAFPin_0_7>
 8004f0e:	e006      	b.n	8004f1e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	461a      	mov	r2, r3
 8004f16:	69b9      	ldr	r1, [r7, #24]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff ff69 	bl	8004df0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	461a      	mov	r2, r3
 8004f24:	69b9      	ldr	r1, [r7, #24]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fe56 	bl	8004bd8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1af      	bne.n	8004ea0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <LL_RCC_HSI_IsReady+0x24>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5c:	d101      	bne.n	8004f62 <LL_RCC_HSI_IsReady+0x16>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <LL_RCC_HSI_IsReady+0x18>
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000

08004f74 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <LL_RCC_LSE_IsReady+0x24>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d101      	bne.n	8004f8a <LL_RCC_LSE_IsReady+0x16>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <LL_RCC_LSE_IsReady+0x18>
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000

08004f9c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d101      	bne.n	8004fb0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <LL_RCC_MSI_GetRange+0x18>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000

08004fdc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8004fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40021000 	.word	0x40021000

08004ff8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <LL_RCC_GetSysClkSource+0x18>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <LL_RCC_GetAHBPrescaler+0x18>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000

08005030 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000

0800504c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000

08005068 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <LL_RCC_GetUSARTClockSource+0x24>)
 8005072:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	401a      	ands	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	4313      	orrs	r3, r2
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40021000 	.word	0x40021000

08005090 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <LL_RCC_GetUARTClockSource+0x24>)
 800509a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	401a      	ands	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	4313      	orrs	r3, r2
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40021000 	.word	0x40021000

080050b8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <LL_RCC_PLL_GetMainSource+0x18>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0303 	and.w	r3, r3, #3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000

080050d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <LL_RCC_PLL_GetN+0x18>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40021000 	.word	0x40021000

080050f0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <LL_RCC_PLL_GetR+0x18>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000

0800510c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <LL_RCC_PLL_GetDivider+0x18>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000

08005128 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d137      	bne.n	80051aa <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ff94 	bl	8005068 <LL_RCC_GetUSARTClockSource>
 8005140:	4603      	mov	r3, r0
 8005142:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005146:	2b03      	cmp	r3, #3
 8005148:	f200 80b3 	bhi.w	80052b2 <LL_RCC_GetUSARTClockFreq+0x18a>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005193 	.word	0x08005193
 8005158:	08005165 	.word	0x08005165
 800515c:	0800516d 	.word	0x0800516d
 8005160:	0800517f 	.word	0x0800517f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005164:	f000 f95c 	bl	8005420 <RCC_GetSystemClockFreq>
 8005168:	60f8      	str	r0, [r7, #12]
        break;
 800516a:	e0b5      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800516c:	f7ff feee 	bl	8004f4c <LL_RCC_HSI_IsReady>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 809f 	beq.w	80052b6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005178:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800517a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800517c:	e09b      	b.n	80052b6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800517e:	f7ff fef9 	bl	8004f74 <LL_RCC_LSE_IsReady>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8098 	beq.w	80052ba <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800518a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005190:	e093      	b.n	80052ba <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005192:	f000 f945 	bl	8005420 <RCC_GetSystemClockFreq>
 8005196:	4603      	mov	r3, r0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f9d1 	bl	8005540 <RCC_GetHCLKClockFreq>
 800519e:	4603      	mov	r3, r0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f9f7 	bl	8005594 <RCC_GetPCLK2ClockFreq>
 80051a6:	60f8      	str	r0, [r7, #12]
        break;
 80051a8:	e096      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d146      	bne.n	800523e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff59 	bl	8005068 <LL_RCC_GetUSARTClockSource>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d87e      	bhi.n	80052be <LL_RCC_GetUSARTClockFreq+0x196>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	08005227 	.word	0x08005227
 80051cc:	080052bf 	.word	0x080052bf
 80051d0:	080052bf 	.word	0x080052bf
 80051d4:	080052bf 	.word	0x080052bf
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	080052bf 	.word	0x080052bf
 80051e0:	080052bf 	.word	0x080052bf
 80051e4:	080052bf 	.word	0x080052bf
 80051e8:	08005205 	.word	0x08005205
 80051ec:	080052bf 	.word	0x080052bf
 80051f0:	080052bf 	.word	0x080052bf
 80051f4:	080052bf 	.word	0x080052bf
 80051f8:	08005215 	.word	0x08005215
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80051fc:	f000 f910 	bl	8005420 <RCC_GetSystemClockFreq>
 8005200:	60f8      	str	r0, [r7, #12]
        break;
 8005202:	e069      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005204:	f7ff fea2 	bl	8004f4c <LL_RCC_HSI_IsReady>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d059      	beq.n	80052c2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800520e:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005210:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005212:	e056      	b.n	80052c2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005214:	f7ff feae 	bl	8004f74 <LL_RCC_LSE_IsReady>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d053      	beq.n	80052c6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005224:	e04f      	b.n	80052c6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005226:	f000 f8fb 	bl	8005420 <RCC_GetSystemClockFreq>
 800522a:	4603      	mov	r3, r0
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f987 	bl	8005540 <RCC_GetHCLKClockFreq>
 8005232:	4603      	mov	r3, r0
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f999 	bl	800556c <RCC_GetPCLK1ClockFreq>
 800523a:	60f8      	str	r0, [r7, #12]
        break;
 800523c:	e04c      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b30      	cmp	r3, #48	; 0x30
 8005242:	d142      	bne.n	80052ca <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ff0f 	bl	8005068 <LL_RCC_GetUSARTClockSource>
 800524a:	4603      	mov	r3, r0
 800524c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005250:	d01a      	beq.n	8005288 <LL_RCC_GetUSARTClockFreq+0x160>
 8005252:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005256:	d83a      	bhi.n	80052ce <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005258:	4a23      	ldr	r2, [pc, #140]	; (80052e8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00c      	beq.n	8005278 <LL_RCC_GetUSARTClockFreq+0x150>
 800525e:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d834      	bhi.n	80052ce <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005264:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005268:	d017      	beq.n	800529a <LL_RCC_GetUSARTClockFreq+0x172>
 800526a:	4a20      	ldr	r2, [pc, #128]	; (80052ec <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d12e      	bne.n	80052ce <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005270:	f000 f8d6 	bl	8005420 <RCC_GetSystemClockFreq>
 8005274:	60f8      	str	r0, [r7, #12]
          break;
 8005276:	e02f      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005278:	f7ff fe68 	bl	8004f4c <LL_RCC_HSI_IsReady>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d027      	beq.n	80052d2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005284:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005286:	e024      	b.n	80052d2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005288:	f7ff fe74 	bl	8004f74 <LL_RCC_LSE_IsReady>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d021      	beq.n	80052d6 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005296:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005298:	e01d      	b.n	80052d6 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800529a:	f000 f8c1 	bl	8005420 <RCC_GetSystemClockFreq>
 800529e:	4603      	mov	r3, r0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f94d 	bl	8005540 <RCC_GetHCLKClockFreq>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 f95f 	bl	800556c <RCC_GetPCLK1ClockFreq>
 80052ae:	60f8      	str	r0, [r7, #12]
          break;
 80052b0:	e012      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80052b2:	bf00      	nop
 80052b4:	e010      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80052b6:	bf00      	nop
 80052b8:	e00e      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80052ba:	bf00      	nop
 80052bc:	e00c      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80052be:	bf00      	nop
 80052c0:	e00a      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80052c2:	bf00      	nop
 80052c4:	e008      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80052c6:	bf00      	nop
 80052c8:	e006      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80052ca:	bf00      	nop
 80052cc:	e004      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80052ce:	bf00      	nop
 80052d0:	e002      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80052d2:	bf00      	nop
 80052d4:	e000      	b.n	80052d8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80052d6:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80052d8:	68fb      	ldr	r3, [r7, #12]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	00300020 	.word	0x00300020
 80052ec:	00300010 	.word	0x00300010

080052f0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005300:	d136      	bne.n	8005370 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fec4 	bl	8005090 <LL_RCC_GetUARTClockSource>
 8005308:	4603      	mov	r3, r0
 800530a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800530e:	d01a      	beq.n	8005346 <LL_RCC_GetUARTClockFreq+0x56>
 8005310:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005314:	d82e      	bhi.n	8005374 <LL_RCC_GetUARTClockFreq+0x84>
 8005316:	4a3d      	ldr	r2, [pc, #244]	; (800540c <LL_RCC_GetUARTClockFreq+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00c      	beq.n	8005336 <LL_RCC_GetUARTClockFreq+0x46>
 800531c:	4a3b      	ldr	r2, [pc, #236]	; (800540c <LL_RCC_GetUARTClockFreq+0x11c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d828      	bhi.n	8005374 <LL_RCC_GetUARTClockFreq+0x84>
 8005322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005326:	d017      	beq.n	8005358 <LL_RCC_GetUARTClockFreq+0x68>
 8005328:	4a39      	ldr	r2, [pc, #228]	; (8005410 <LL_RCC_GetUARTClockFreq+0x120>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d122      	bne.n	8005374 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800532e:	f000 f877 	bl	8005420 <RCC_GetSystemClockFreq>
 8005332:	60f8      	str	r0, [r7, #12]
        break;
 8005334:	e023      	b.n	800537e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005336:	f7ff fe09 	bl	8004f4c <LL_RCC_HSI_IsReady>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01b      	beq.n	8005378 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <LL_RCC_GetUARTClockFreq+0x124>)
 8005342:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005344:	e018      	b.n	8005378 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005346:	f7ff fe15 	bl	8004f74 <LL_RCC_LSE_IsReady>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005354:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005356:	e011      	b.n	800537c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005358:	f000 f862 	bl	8005420 <RCC_GetSystemClockFreq>
 800535c:	4603      	mov	r3, r0
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f8ee 	bl	8005540 <RCC_GetHCLKClockFreq>
 8005364:	4603      	mov	r3, r0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f900 	bl	800556c <RCC_GetPCLK1ClockFreq>
 800536c:	60f8      	str	r0, [r7, #12]
        break;
 800536e:	e006      	b.n	800537e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005370:	bf00      	nop
 8005372:	e004      	b.n	800537e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005374:	bf00      	nop
 8005376:	e002      	b.n	800537e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800537c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005384:	d136      	bne.n	80053f4 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fe82 	bl	8005090 <LL_RCC_GetUARTClockSource>
 800538c:	4603      	mov	r3, r0
 800538e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005392:	d01a      	beq.n	80053ca <LL_RCC_GetUARTClockFreq+0xda>
 8005394:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005398:	d82e      	bhi.n	80053f8 <LL_RCC_GetUARTClockFreq+0x108>
 800539a:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <LL_RCC_GetUARTClockFreq+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00c      	beq.n	80053ba <LL_RCC_GetUARTClockFreq+0xca>
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <LL_RCC_GetUARTClockFreq+0x128>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d828      	bhi.n	80053f8 <LL_RCC_GetUARTClockFreq+0x108>
 80053a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053aa:	d017      	beq.n	80053dc <LL_RCC_GetUARTClockFreq+0xec>
 80053ac:	4a1b      	ldr	r2, [pc, #108]	; (800541c <LL_RCC_GetUARTClockFreq+0x12c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d122      	bne.n	80053f8 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80053b2:	f000 f835 	bl	8005420 <RCC_GetSystemClockFreq>
 80053b6:	60f8      	str	r0, [r7, #12]
        break;
 80053b8:	e023      	b.n	8005402 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80053ba:	f7ff fdc7 	bl	8004f4c <LL_RCC_HSI_IsReady>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <LL_RCC_GetUARTClockFreq+0x124>)
 80053c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053c8:	e018      	b.n	80053fc <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80053ca:	f7ff fdd3 	bl	8004f74 <LL_RCC_LSE_IsReady>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80053d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053da:	e011      	b.n	8005400 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80053dc:	f000 f820 	bl	8005420 <RCC_GetSystemClockFreq>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f8ac 	bl	8005540 <RCC_GetHCLKClockFreq>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f8be 	bl	800556c <RCC_GetPCLK1ClockFreq>
 80053f0:	60f8      	str	r0, [r7, #12]
        break;
 80053f2:	e006      	b.n	8005402 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80053f4:	bf00      	nop
 80053f6:	e004      	b.n	8005402 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005400:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005402:	68fb      	ldr	r3, [r7, #12]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	00c00080 	.word	0x00c00080
 8005410:	00c00040 	.word	0x00c00040
 8005414:	00f42400 	.word	0x00f42400
 8005418:	03000200 	.word	0x03000200
 800541c:	03000100 	.word	0x03000100

08005420 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005426:	f7ff fde7 	bl	8004ff8 <LL_RCC_GetSysClkSource>
 800542a:	4603      	mov	r3, r0
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d851      	bhi.n	80054d4 <RCC_GetSystemClockFreq+0xb4>
 8005430:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <RCC_GetSystemClockFreq+0x18>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	0800546d 	.word	0x0800546d
 800543c:	080054d5 	.word	0x080054d5
 8005440:	080054d5 	.word	0x080054d5
 8005444:	080054d5 	.word	0x080054d5
 8005448:	080054c1 	.word	0x080054c1
 800544c:	080054d5 	.word	0x080054d5
 8005450:	080054d5 	.word	0x080054d5
 8005454:	080054d5 	.word	0x080054d5
 8005458:	080054c7 	.word	0x080054c7
 800545c:	080054d5 	.word	0x080054d5
 8005460:	080054d5 	.word	0x080054d5
 8005464:	080054d5 	.word	0x080054d5
 8005468:	080054cd 	.word	0x080054cd
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800546c:	f7ff fd96 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d111      	bne.n	800549a <RCC_GetSystemClockFreq+0x7a>
 8005476:	f7ff fd91 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <RCC_GetSystemClockFreq+0x6a>
 8005480:	f7ff fd9e 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 8005484:	4603      	mov	r3, r0
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	e003      	b.n	8005492 <RCC_GetSystemClockFreq+0x72>
 800548a:	f7ff fda7 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 800548e:	4603      	mov	r3, r0
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	4a28      	ldr	r2, [pc, #160]	; (8005534 <RCC_GetSystemClockFreq+0x114>)
 8005494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005498:	e010      	b.n	80054bc <RCC_GetSystemClockFreq+0x9c>
 800549a:	f7ff fd7f 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <RCC_GetSystemClockFreq+0x8e>
 80054a4:	f7ff fd8c 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 80054a8:	4603      	mov	r3, r0
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	e003      	b.n	80054b6 <RCC_GetSystemClockFreq+0x96>
 80054ae:	f7ff fd95 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 80054b2:	4603      	mov	r3, r0
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <RCC_GetSystemClockFreq+0x114>)
 80054b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054bc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80054be:	e033      	b.n	8005528 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80054c0:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <RCC_GetSystemClockFreq+0x118>)
 80054c2:	607b      	str	r3, [r7, #4]
      break;
 80054c4:	e030      	b.n	8005528 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <RCC_GetSystemClockFreq+0x11c>)
 80054c8:	607b      	str	r3, [r7, #4]
      break;
 80054ca:	e02d      	b.n	8005528 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80054cc:	f000 f876 	bl	80055bc <RCC_PLL_GetFreqDomain_SYS>
 80054d0:	6078      	str	r0, [r7, #4]
      break;
 80054d2:	e029      	b.n	8005528 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80054d4:	f7ff fd62 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d111      	bne.n	8005502 <RCC_GetSystemClockFreq+0xe2>
 80054de:	f7ff fd5d 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <RCC_GetSystemClockFreq+0xd2>
 80054e8:	f7ff fd6a 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 80054ec:	4603      	mov	r3, r0
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	e003      	b.n	80054fa <RCC_GetSystemClockFreq+0xda>
 80054f2:	f7ff fd73 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 80054f6:	4603      	mov	r3, r0
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	4a0e      	ldr	r2, [pc, #56]	; (8005534 <RCC_GetSystemClockFreq+0x114>)
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	e010      	b.n	8005524 <RCC_GetSystemClockFreq+0x104>
 8005502:	f7ff fd4b 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <RCC_GetSystemClockFreq+0xf6>
 800550c:	f7ff fd58 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 8005510:	4603      	mov	r3, r0
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	e003      	b.n	800551e <RCC_GetSystemClockFreq+0xfe>
 8005516:	f7ff fd61 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 800551a:	4603      	mov	r3, r0
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	4a05      	ldr	r2, [pc, #20]	; (8005534 <RCC_GetSystemClockFreq+0x114>)
 8005520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005524:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005526:	bf00      	nop
  }

  return frequency;
 8005528:	687b      	ldr	r3, [r7, #4]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	08007ccc 	.word	0x08007ccc
 8005538:	00f42400 	.word	0x00f42400
 800553c:	007a1200 	.word	0x007a1200

08005540 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005548:	f7ff fd64 	bl	8005014 <LL_RCC_GetAHBPrescaler>
 800554c:	4603      	mov	r3, r0
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <RCC_GetHCLKClockFreq+0x28>)
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	461a      	mov	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	40d3      	lsrs	r3, r2
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	08007cb4 	.word	0x08007cb4

0800556c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005574:	f7ff fd5c 	bl	8005030 <LL_RCC_GetAPB1Prescaler>
 8005578:	4603      	mov	r3, r0
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <RCC_GetPCLK1ClockFreq+0x24>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	461a      	mov	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	40d3      	lsrs	r3, r2
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	08007cc4 	.word	0x08007cc4

08005594 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800559c:	f7ff fd56 	bl	800504c <LL_RCC_GetAPB2Prescaler>
 80055a0:	4603      	mov	r3, r0
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <RCC_GetPCLK2ClockFreq+0x24>)
 80055a6:	5cd3      	ldrb	r3, [r2, r3]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	40d3      	lsrs	r3, r2
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	08007cc4 	.word	0x08007cc4

080055bc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80055c2:	f7ff fd79 	bl	80050b8 <LL_RCC_PLL_GetMainSource>
 80055c6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d036      	beq.n	800563c <RCC_PLL_GetFreqDomain_SYS+0x80>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d836      	bhi.n	8005642 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d02a      	beq.n	8005636 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80055e0:	e02f      	b.n	8005642 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80055e2:	f7ff fcdb 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d111      	bne.n	8005610 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80055ec:	f7ff fcd6 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80055f6:	f7ff fce3 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 80055fa:	4603      	mov	r3, r0
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	e003      	b.n	8005608 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005600:	f7ff fcec 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 8005604:	4603      	mov	r3, r0
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	4a2f      	ldr	r2, [pc, #188]	; (80056c8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800560a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560e:	e010      	b.n	8005632 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8005610:	f7ff fcc4 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800561a:	f7ff fcd1 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 800561e:	4603      	mov	r3, r0
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	e003      	b.n	800562c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005624:	f7ff fcda 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 8005628:	4603      	mov	r3, r0
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005632:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005634:	e02f      	b.n	8005696 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005636:	4b25      	ldr	r3, [pc, #148]	; (80056cc <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005638:	607b      	str	r3, [r7, #4]
      break;
 800563a:	e02c      	b.n	8005696 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800563e:	607b      	str	r3, [r7, #4]
      break;
 8005640:	e029      	b.n	8005696 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005642:	f7ff fcab 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d111      	bne.n	8005670 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800564c:	f7ff fca6 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005656:	f7ff fcb3 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 800565a:	4603      	mov	r3, r0
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	e003      	b.n	8005668 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005660:	f7ff fcbc 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 8005664:	4603      	mov	r3, r0
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566e:	e010      	b.n	8005692 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005670:	f7ff fc94 	bl	8004f9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800567a:	f7ff fca1 	bl	8004fc0 <LL_RCC_MSI_GetRange>
 800567e:	4603      	mov	r3, r0
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	e003      	b.n	800568c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005684:	f7ff fcaa 	bl	8004fdc <LL_RCC_MSI_GetRangeAfterStandby>
 8005688:	4603      	mov	r3, r0
 800568a:	091b      	lsrs	r3, r3, #4
 800568c:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005692:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005694:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005696:	f7ff fd39 	bl	800510c <LL_RCC_PLL_GetDivider>
 800569a:	4603      	mov	r3, r0
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	3301      	adds	r3, #1
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	fbb2 f4f3 	udiv	r4, r2, r3
 80056a6:	f7ff fd15 	bl	80050d4 <LL_RCC_PLL_GetN>
 80056aa:	4603      	mov	r3, r0
 80056ac:	fb03 f404 	mul.w	r4, r3, r4
 80056b0:	f7ff fd1e 	bl	80050f0 <LL_RCC_PLL_GetR>
 80056b4:	4603      	mov	r3, r0
 80056b6:	0e5b      	lsrs	r3, r3, #25
 80056b8:	3301      	adds	r3, #1
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}
 80056c8:	08007ccc 	.word	0x08007ccc
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	007a1200 	.word	0x007a1200

080056d4 <LL_USART_IsEnabled>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <LL_USART_IsEnabled+0x18>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <LL_USART_IsEnabled+0x1a>
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <LL_USART_SetStopBitsLength>:
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	605a      	str	r2, [r3, #4]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_USART_SetHWFlowCtrl>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_USART_SetBaudRate>:
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	d11a      	bne.n	8005792 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	005a      	lsls	r2, r3, #1
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	441a      	add	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	60da      	str	r2, [r3, #12]
}
 8005790:	e00a      	b.n	80057a8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	085a      	lsrs	r2, r3, #1
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	441a      	add	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	60da      	str	r2, [r3, #12]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ff84 	bl	80056d4 <LL_USART_IsEnabled>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d15b      	bne.n	800588a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <LL_USART_Init+0xe0>)
 80057d8:	4013      	ands	r3, r2
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	6851      	ldr	r1, [r2, #4]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	68d2      	ldr	r2, [r2, #12]
 80057e2:	4311      	orrs	r1, r2
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	6912      	ldr	r2, [r2, #16]
 80057e8:	4311      	orrs	r1, r2
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	6992      	ldr	r2, [r2, #24]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff7c 	bl	80056fa <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff89 	bl	8005720 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a21      	ldr	r2, [pc, #132]	; (8005898 <LL_USART_Init+0xe4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d104      	bne.n	8005820 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005816:	2003      	movs	r0, #3
 8005818:	f7ff fc86 	bl	8005128 <LL_RCC_GetUSARTClockFreq>
 800581c:	60b8      	str	r0, [r7, #8]
 800581e:	e023      	b.n	8005868 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1e      	ldr	r2, [pc, #120]	; (800589c <LL_USART_Init+0xe8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d104      	bne.n	8005832 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005828:	200c      	movs	r0, #12
 800582a:	f7ff fc7d 	bl	8005128 <LL_RCC_GetUSARTClockFreq>
 800582e:	60b8      	str	r0, [r7, #8]
 8005830:	e01a      	b.n	8005868 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <LL_USART_Init+0xec>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d104      	bne.n	8005844 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800583a:	2030      	movs	r0, #48	; 0x30
 800583c:	f7ff fc74 	bl	8005128 <LL_RCC_GetUSARTClockFreq>
 8005840:	60b8      	str	r0, [r7, #8]
 8005842:	e011      	b.n	8005868 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <LL_USART_Init+0xf0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d104      	bne.n	8005856 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800584c:	20c0      	movs	r0, #192	; 0xc0
 800584e:	f7ff fd4f 	bl	80052f0 <LL_RCC_GetUARTClockFreq>
 8005852:	60b8      	str	r0, [r7, #8]
 8005854:	e008      	b.n	8005868 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <LL_USART_Init+0xf4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d104      	bne.n	8005868 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800585e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005862:	f7ff fd45 	bl	80052f0 <LL_RCC_GetUARTClockFreq>
 8005866:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff5e 	bl	8005746 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	efff69f3 	.word	0xefff69f3
 8005898:	40013800 	.word	0x40013800
 800589c:	40004400 	.word	0x40004400
 80058a0:	40004800 	.word	0x40004800
 80058a4:	40004c00 	.word	0x40004c00
 80058a8:	40005000 	.word	0x40005000

080058ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058be:	2b84      	cmp	r3, #132	; 0x84
 80058c0:	d005      	beq.n	80058ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	3303      	adds	r3, #3
 80058cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058ce:	68fb      	ldr	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058e0:	f000 fade 	bl	8005ea0 <vTaskStartScheduler>
  
  return osOK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	bd80      	pop	{r7, pc}

080058ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ec:	b089      	sub	sp, #36	; 0x24
 80058ee:	af04      	add	r7, sp, #16
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d020      	beq.n	800593e <osThreadCreate+0x54>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01c      	beq.n	800593e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685c      	ldr	r4, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681d      	ldr	r5, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691e      	ldr	r6, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff ffc8 	bl	80058ac <makeFreeRtosPriority>
 800591c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005926:	9202      	str	r2, [sp, #8]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	9100      	str	r1, [sp, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	4632      	mov	r2, r6
 8005930:	4629      	mov	r1, r5
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f8ed 	bl	8005b12 <xTaskCreateStatic>
 8005938:	4603      	mov	r3, r0
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e01c      	b.n	8005978 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685c      	ldr	r4, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800594a:	b29e      	uxth	r6, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ffaa 	bl	80058ac <makeFreeRtosPriority>
 8005958:	4602      	mov	r2, r0
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	9200      	str	r2, [sp, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	4632      	mov	r2, r6
 8005966:	4629      	mov	r1, r5
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f92f 	bl	8005bcc <xTaskCreate>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005982 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <osDelay+0x16>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e000      	b.n	800599a <osDelay+0x18>
 8005998:	2301      	movs	r3, #1
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fa4c 	bl	8005e38 <vTaskDelay>
  
  return osOK;
 80059a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f04f 32ff 	mov.w	r2, #4294967295
 80059c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f103 0208 	add.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f103 0208 	add.w	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e00c      	b.n	8005a86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e002      	b.n	8005a7a <vListInsert+0x2e>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d2f6      	bcs.n	8005a74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6892      	ldr	r2, [r2, #8]
 8005ad4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6852      	ldr	r2, [r2, #4]
 8005ade:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d103      	bne.n	8005af2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08e      	sub	sp, #56	; 0x38
 8005b16:	af04      	add	r7, sp, #16
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61fb      	str	r3, [r7, #28]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b58:	2354      	movs	r3, #84	; 0x54
 8005b5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b54      	cmp	r3, #84	; 0x54
 8005b60:	d00a      	beq.n	8005b78 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61bb      	str	r3, [r7, #24]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <xTaskCreateStatic+0xac>
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01b      	beq.n	8005bbe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	f107 0314 	add.w	r3, r7, #20
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f850 	bl	8005c56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb8:	f000 f8d4 	bl	8005d64 <prvAddNewTaskToReadyList>
 8005bbc:	e001      	b.n	8005bc2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bc2:	697b      	ldr	r3, [r7, #20]
	}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	; 0x30
 8005bd0:	af04      	add	r7, sp, #16
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fec9 	bl	8006978 <pvPortMalloc>
 8005be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00e      	beq.n	8005c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bee:	2054      	movs	r0, #84	; 0x54
 8005bf0:	f000 fec2 	bl	8006978 <pvPortMalloc>
 8005bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
 8005c02:	e005      	b.n	8005c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c04:	6978      	ldr	r0, [r7, #20]
 8005c06:	f000 ff83 	bl	8006b10 <vPortFree>
 8005c0a:	e001      	b.n	8005c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d017      	beq.n	8005c46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9303      	str	r3, [sp, #12]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	9302      	str	r3, [sp, #8]
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f80e 	bl	8005c56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c3a:	69f8      	ldr	r0, [r7, #28]
 8005c3c:	f000 f892 	bl	8005d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e002      	b.n	8005c4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b088      	sub	sp, #32
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	617b      	str	r3, [r7, #20]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01f      	beq.n	8005ce4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e012      	b.n	8005cd0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	7819      	ldrb	r1, [r3, #0]
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3334      	adds	r3, #52	; 0x34
 8005cba:	460a      	mov	r2, r1
 8005cbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b0f      	cmp	r3, #15
 8005cd4:	d9e9      	bls.n	8005caa <prvInitialiseNewTask+0x54>
 8005cd6:	e000      	b.n	8005cda <prvInitialiseNewTask+0x84>
			{
				break;
 8005cd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ce2:	e003      	b.n	8005cec <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d901      	bls.n	8005cf6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cf2:	2306      	movs	r3, #6
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2200      	movs	r2, #0
 8005d06:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fe6c 	bl	80059ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	3318      	adds	r3, #24
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fe67 	bl	80059ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	f1c3 0207 	rsb	r2, r3, #7
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2200      	movs	r2, #0
 8005d36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	69b8      	ldr	r0, [r7, #24]
 8005d46:	f000 fc05 	bl	8006554 <pxPortInitialiseStack>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d6c:	f000 fd22 	bl	80067b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d70:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <prvAddNewTaskToReadyList+0xb8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <prvAddNewTaskToReadyList+0xb8>)
 8005d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d7a:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <prvAddNewTaskToReadyList+0xbc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d82:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <prvAddNewTaskToReadyList+0xbc>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d88:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <prvAddNewTaskToReadyList+0xb8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d110      	bne.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d90:	f000 fabc 	bl	800630c <prvInitialiseTaskLists>
 8005d94:	e00d      	b.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d96:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <prvAddNewTaskToReadyList+0xc0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d9e:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <prvAddNewTaskToReadyList+0xbc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d802      	bhi.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dac:	4a1c      	ldr	r2, [pc, #112]	; (8005e20 <prvAddNewTaskToReadyList+0xbc>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005dba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <prvAddNewTaskToReadyList+0xcc>)
 8005ddc:	441a      	add	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7ff fe0d 	bl	8005a04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dea:	f000 fd13 	bl	8006814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <prvAddNewTaskToReadyList+0xc0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00e      	beq.n	8005e14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <prvAddNewTaskToReadyList+0xbc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d207      	bcs.n	8005e14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	200003e8 	.word	0x200003e8
 8005e20:	200002e8 	.word	0x200002e8
 8005e24:	200003f4 	.word	0x200003f4
 8005e28:	20000404 	.word	0x20000404
 8005e2c:	200003f0 	.word	0x200003f0
 8005e30:	200002ec 	.word	0x200002ec
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <vTaskDelay+0x60>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <vTaskDelay+0x30>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e68:	f000 f87a 	bl	8005f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb0a 	bl	8006488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e74:	f000 f882 	bl	8005f7c <xTaskResumeAll>
 8005e78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <vTaskDelay+0x64>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000410 	.word	0x20000410
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eae:	463a      	mov	r2, r7
 8005eb0:	1d39      	adds	r1, r7, #4
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fa f9da 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	9202      	str	r2, [sp, #8]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	460a      	mov	r2, r1
 8005ece:	491e      	ldr	r1, [pc, #120]	; (8005f48 <vTaskStartScheduler+0xa8>)
 8005ed0:	481e      	ldr	r0, [pc, #120]	; (8005f4c <vTaskStartScheduler+0xac>)
 8005ed2:	f7ff fe1e 	bl	8005b12 <xTaskCreateStatic>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <vTaskStartScheduler+0xb0>)
 8005eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005edc:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <vTaskStartScheduler+0xb0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e001      	b.n	8005eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d116      	bne.n	8005f22 <vTaskStartScheduler+0x82>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	613b      	str	r3, [r7, #16]
}
 8005f06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <vTaskStartScheduler+0xb4>)
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f10:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <vTaskStartScheduler+0xb8>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <vTaskStartScheduler+0xbc>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f1c:	f000 fba8 	bl	8006670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f20:	e00e      	b.n	8005f40 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d10a      	bne.n	8005f40 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	60fb      	str	r3, [r7, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vTaskStartScheduler+0x9e>
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08007cac 	.word	0x08007cac
 8005f4c:	080062dd 	.word	0x080062dd
 8005f50:	2000040c 	.word	0x2000040c
 8005f54:	20000408 	.word	0x20000408
 8005f58:	200003f4 	.word	0x200003f4
 8005f5c:	200003ec 	.word	0x200003ec

08005f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <vTaskSuspendAll+0x18>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a03      	ldr	r2, [pc, #12]	; (8005f78 <vTaskSuspendAll+0x18>)
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000410 	.word	0x20000410

08005f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f8a:	4b41      	ldr	r3, [pc, #260]	; (8006090 <xTaskResumeAll+0x114>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	603b      	str	r3, [r7, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fa8:	f000 fc04 	bl	80067b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fac:	4b38      	ldr	r3, [pc, #224]	; (8006090 <xTaskResumeAll+0x114>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4a37      	ldr	r2, [pc, #220]	; (8006090 <xTaskResumeAll+0x114>)
 8005fb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb6:	4b36      	ldr	r3, [pc, #216]	; (8006090 <xTaskResumeAll+0x114>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d161      	bne.n	8006082 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fbe:	4b35      	ldr	r3, [pc, #212]	; (8006094 <xTaskResumeAll+0x118>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d05d      	beq.n	8006082 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc6:	e02e      	b.n	8006026 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc8:	4b33      	ldr	r3, [pc, #204]	; (8006098 <xTaskResumeAll+0x11c>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fd72 	bl	8005abe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fd6d 	bl	8005abe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	2201      	movs	r2, #1
 8005fea:	409a      	lsls	r2, r3
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <xTaskResumeAll+0x120>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	; (800609c <xTaskResumeAll+0x120>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4a27      	ldr	r2, [pc, #156]	; (80060a0 <xTaskResumeAll+0x124>)
 8006004:	441a      	add	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7ff fcf9 	bl	8005a04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <xTaskResumeAll+0x128>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006020:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <xTaskResumeAll+0x12c>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <xTaskResumeAll+0x11c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1cc      	bne.n	8005fc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006034:	f000 fa08 	bl	8006448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <xTaskResumeAll+0x130>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d010      	beq.n	8006066 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006044:	f000 f836 	bl	80060b4 <xTaskIncrementTick>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800604e:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <xTaskResumeAll+0x12c>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f1      	bne.n	8006044 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006060:	4b12      	ldr	r3, [pc, #72]	; (80060ac <xTaskResumeAll+0x130>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <xTaskResumeAll+0x12c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800606e:	2301      	movs	r3, #1
 8006070:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <xTaskResumeAll+0x134>)
 8006074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006082:	f000 fbc7 	bl	8006814 <vPortExitCritical>

	return xAlreadyYielded;
 8006086:	68bb      	ldr	r3, [r7, #8]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000410 	.word	0x20000410
 8006094:	200003e8 	.word	0x200003e8
 8006098:	200003a8 	.word	0x200003a8
 800609c:	200003f0 	.word	0x200003f0
 80060a0:	200002ec 	.word	0x200002ec
 80060a4:	200002e8 	.word	0x200002e8
 80060a8:	200003fc 	.word	0x200003fc
 80060ac:	200003f8 	.word	0x200003f8
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060be:	4b4e      	ldr	r3, [pc, #312]	; (80061f8 <xTaskIncrementTick+0x144>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 808e 	bne.w	80061e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060c8:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <xTaskIncrementTick+0x148>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <xTaskIncrementTick+0x148>)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d120      	bne.n	800611e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060dc:	4b48      	ldr	r3, [pc, #288]	; (8006200 <xTaskIncrementTick+0x14c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <xTaskIncrementTick+0x48>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	603b      	str	r3, [r7, #0]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <xTaskIncrementTick+0x46>
 80060fc:	4b40      	ldr	r3, [pc, #256]	; (8006200 <xTaskIncrementTick+0x14c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	4b40      	ldr	r3, [pc, #256]	; (8006204 <xTaskIncrementTick+0x150>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3e      	ldr	r2, [pc, #248]	; (8006200 <xTaskIncrementTick+0x14c>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4a3e      	ldr	r2, [pc, #248]	; (8006204 <xTaskIncrementTick+0x150>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b3d      	ldr	r3, [pc, #244]	; (8006208 <xTaskIncrementTick+0x154>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a3c      	ldr	r2, [pc, #240]	; (8006208 <xTaskIncrementTick+0x154>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	f000 f995 	bl	8006448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800611e:	4b3b      	ldr	r3, [pc, #236]	; (800620c <xTaskIncrementTick+0x158>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	429a      	cmp	r2, r3
 8006126:	d348      	bcc.n	80061ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006128:	4b35      	ldr	r3, [pc, #212]	; (8006200 <xTaskIncrementTick+0x14c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006132:	4b36      	ldr	r3, [pc, #216]	; (800620c <xTaskIncrementTick+0x158>)
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	601a      	str	r2, [r3, #0]
					break;
 800613a:	e03e      	b.n	80061ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613c:	4b30      	ldr	r3, [pc, #192]	; (8006200 <xTaskIncrementTick+0x14c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d203      	bcs.n	800615c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006154:	4a2d      	ldr	r2, [pc, #180]	; (800620c <xTaskIncrementTick+0x158>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800615a:	e02e      	b.n	80061ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fcac 	bl	8005abe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	3318      	adds	r3, #24
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fca3 	bl	8005abe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	4b23      	ldr	r3, [pc, #140]	; (8006210 <xTaskIncrementTick+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4313      	orrs	r3, r2
 8006186:	4a22      	ldr	r2, [pc, #136]	; (8006210 <xTaskIncrementTick+0x15c>)
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <xTaskIncrementTick+0x160>)
 8006198:	441a      	add	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3304      	adds	r3, #4
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f7ff fc2f 	bl	8005a04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <xTaskIncrementTick+0x164>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d3b9      	bcc.n	8006128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061b8:	e7b6      	b.n	8006128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061ba:	4b17      	ldr	r3, [pc, #92]	; (8006218 <xTaskIncrementTick+0x164>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	4914      	ldr	r1, [pc, #80]	; (8006214 <xTaskIncrementTick+0x160>)
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d901      	bls.n	80061d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80061d2:	2301      	movs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <xTaskIncrementTick+0x168>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80061de:	2301      	movs	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e004      	b.n	80061ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <xTaskIncrementTick+0x16c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	4a0d      	ldr	r2, [pc, #52]	; (8006220 <xTaskIncrementTick+0x16c>)
 80061ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061ee:	697b      	ldr	r3, [r7, #20]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000410 	.word	0x20000410
 80061fc:	200003ec 	.word	0x200003ec
 8006200:	200003a0 	.word	0x200003a0
 8006204:	200003a4 	.word	0x200003a4
 8006208:	20000400 	.word	0x20000400
 800620c:	20000408 	.word	0x20000408
 8006210:	200003f0 	.word	0x200003f0
 8006214:	200002ec 	.word	0x200002ec
 8006218:	200002e8 	.word	0x200002e8
 800621c:	200003fc 	.word	0x200003fc
 8006220:	200003f8 	.word	0x200003f8

08006224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800622a:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <vTaskSwitchContext+0xa4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <vTaskSwitchContext+0xa8>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006238:	e03f      	b.n	80062ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <vTaskSwitchContext+0xa8>)
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006240:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <vTaskSwitchContext+0xac>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	fab3 f383 	clz	r3, r3
 800624c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	f1c3 031f 	rsb	r3, r3, #31
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	491f      	ldr	r1, [pc, #124]	; (80062d4 <vTaskSwitchContext+0xb0>)
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <vTaskSwitchContext+0x5c>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	607b      	str	r3, [r7, #4]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <vTaskSwitchContext+0x5a>
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <vTaskSwitchContext+0xb0>)
 800628c:	4413      	add	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3308      	adds	r3, #8
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d104      	bne.n	80062b0 <vTaskSwitchContext+0x8c>
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <vTaskSwitchContext+0xb4>)
 80062b8:	6013      	str	r3, [r2, #0]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20000410 	.word	0x20000410
 80062cc:	200003fc 	.word	0x200003fc
 80062d0:	200003f0 	.word	0x200003f0
 80062d4:	200002ec 	.word	0x200002ec
 80062d8:	200002e8 	.word	0x200002e8

080062dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062e4:	f000 f852 	bl	800638c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <prvIdleTask+0x28>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d9f9      	bls.n	80062e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <prvIdleTask+0x2c>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006300:	e7f0      	b.n	80062e4 <prvIdleTask+0x8>
 8006302:	bf00      	nop
 8006304:	200002ec 	.word	0x200002ec
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	e00c      	b.n	8006332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4a12      	ldr	r2, [pc, #72]	; (800636c <prvInitialiseTaskLists+0x60>)
 8006324:	4413      	add	r3, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fb3f 	bl	80059aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3301      	adds	r3, #1
 8006330:	607b      	str	r3, [r7, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b06      	cmp	r3, #6
 8006336:	d9ef      	bls.n	8006318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006338:	480d      	ldr	r0, [pc, #52]	; (8006370 <prvInitialiseTaskLists+0x64>)
 800633a:	f7ff fb36 	bl	80059aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800633e:	480d      	ldr	r0, [pc, #52]	; (8006374 <prvInitialiseTaskLists+0x68>)
 8006340:	f7ff fb33 	bl	80059aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006344:	480c      	ldr	r0, [pc, #48]	; (8006378 <prvInitialiseTaskLists+0x6c>)
 8006346:	f7ff fb30 	bl	80059aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800634a:	480c      	ldr	r0, [pc, #48]	; (800637c <prvInitialiseTaskLists+0x70>)
 800634c:	f7ff fb2d 	bl	80059aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006350:	480b      	ldr	r0, [pc, #44]	; (8006380 <prvInitialiseTaskLists+0x74>)
 8006352:	f7ff fb2a 	bl	80059aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <prvInitialiseTaskLists+0x78>)
 8006358:	4a05      	ldr	r2, [pc, #20]	; (8006370 <prvInitialiseTaskLists+0x64>)
 800635a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <prvInitialiseTaskLists+0x7c>)
 800635e:	4a05      	ldr	r2, [pc, #20]	; (8006374 <prvInitialiseTaskLists+0x68>)
 8006360:	601a      	str	r2, [r3, #0]
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200002ec 	.word	0x200002ec
 8006370:	20000378 	.word	0x20000378
 8006374:	2000038c 	.word	0x2000038c
 8006378:	200003a8 	.word	0x200003a8
 800637c:	200003bc 	.word	0x200003bc
 8006380:	200003d4 	.word	0x200003d4
 8006384:	200003a0 	.word	0x200003a0
 8006388:	200003a4 	.word	0x200003a4

0800638c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006392:	e019      	b.n	80063c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006394:	f000 fa0e 	bl	80067b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <prvCheckTasksWaitingTermination+0x50>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fb8a 	bl	8005abe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <prvCheckTasksWaitingTermination+0x54>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	4a0b      	ldr	r2, [pc, #44]	; (80063e0 <prvCheckTasksWaitingTermination+0x54>)
 80063b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063b4:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <prvCheckTasksWaitingTermination+0x58>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	4a0a      	ldr	r2, [pc, #40]	; (80063e4 <prvCheckTasksWaitingTermination+0x58>)
 80063bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063be:	f000 fa29 	bl	8006814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f810 	bl	80063e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <prvCheckTasksWaitingTermination+0x58>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e1      	bne.n	8006394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	200003bc 	.word	0x200003bc
 80063e0:	200003e8 	.word	0x200003e8
 80063e4:	200003d0 	.word	0x200003d0

080063e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fb86 	bl	8006b10 <vPortFree>
				vPortFree( pxTCB );
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb83 	bl	8006b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800640a:	e018      	b.n	800643e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006412:	2b01      	cmp	r3, #1
 8006414:	d103      	bne.n	800641e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fb7a 	bl	8006b10 <vPortFree>
	}
 800641c:	e00f      	b.n	800643e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006424:	2b02      	cmp	r3, #2
 8006426:	d00a      	beq.n	800643e <prvDeleteTCB+0x56>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60fb      	str	r3, [r7, #12]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <prvDeleteTCB+0x54>
	}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <prvResetNextTaskUnblockTime+0x38>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <prvResetNextTaskUnblockTime+0x3c>)
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006460:	e008      	b.n	8006474 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <prvResetNextTaskUnblockTime+0x38>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a04      	ldr	r2, [pc, #16]	; (8006484 <prvResetNextTaskUnblockTime+0x3c>)
 8006472:	6013      	str	r3, [r2, #0]
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	200003a0 	.word	0x200003a0
 8006484:	20000408 	.word	0x20000408

08006488 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006498:	4b28      	ldr	r3, [pc, #160]	; (800653c <prvAddCurrentTaskToDelayedList+0xb4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3304      	adds	r3, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff fb0d 	bl	8005abe <uxListRemove>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064aa:	4b24      	ldr	r3, [pc, #144]	; (800653c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	2201      	movs	r2, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	43da      	mvns	r2, r3
 80064b8:	4b21      	ldr	r3, [pc, #132]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4013      	ands	r3, r2
 80064be:	4a20      	ldr	r2, [pc, #128]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d10a      	bne.n	80064e0 <prvAddCurrentTaskToDelayedList+0x58>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	481a      	ldr	r0, [pc, #104]	; (8006544 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064da:	f7ff fa93 	bl	8005a04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064de:	e026      	b.n	800652e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d209      	bcs.n	800650c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <prvAddCurrentTaskToDelayedList+0xc0>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3304      	adds	r3, #4
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7ff faa1 	bl	8005a4c <vListInsert>
}
 800650a:	e010      	b.n	800652e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <prvAddCurrentTaskToDelayedList+0xc4>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7ff fa97 	bl	8005a4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	d202      	bcs.n	800652e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006528:	4a09      	ldr	r2, [pc, #36]	; (8006550 <prvAddCurrentTaskToDelayedList+0xc8>)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6013      	str	r3, [r2, #0]
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200003ec 	.word	0x200003ec
 800653c:	200002e8 	.word	0x200002e8
 8006540:	200003f0 	.word	0x200003f0
 8006544:	200003d4 	.word	0x200003d4
 8006548:	200003a4 	.word	0x200003a4
 800654c:	200003a0 	.word	0x200003a0
 8006550:	20000408 	.word	0x20000408

08006554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3b04      	subs	r3, #4
 8006564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800656c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b04      	subs	r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f023 0201 	bic.w	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b04      	subs	r3, #4
 8006582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006584:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <pxPortInitialiseStack+0x64>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b14      	subs	r3, #20
 800658e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3b04      	subs	r3, #4
 800659a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f06f 0202 	mvn.w	r2, #2
 80065a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3b20      	subs	r3, #32
 80065a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065aa:	68fb      	ldr	r3, [r7, #12]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	080065bd 	.word	0x080065bd

080065bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065c6:	4b12      	ldr	r3, [pc, #72]	; (8006610 <prvTaskExitError+0x54>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d00a      	beq.n	80065e6 <prvTaskExitError+0x2a>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60fb      	str	r3, [r7, #12]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <prvTaskExitError+0x28>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60bb      	str	r3, [r7, #8]
}
 80065f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065fa:	bf00      	nop
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0fc      	beq.n	80065fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	2000000c 	.word	0x2000000c
	...

08006620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <pxCurrentTCBConst2>)
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	6808      	ldr	r0, [r1, #0]
 8006626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	f380 8809 	msr	PSP, r0
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8811 	msr	BASEPRI, r0
 800663a:	4770      	bx	lr
 800663c:	f3af 8000 	nop.w

08006640 <pxCurrentTCBConst2>:
 8006640:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop

08006648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006648:	4808      	ldr	r0, [pc, #32]	; (800666c <prvPortStartFirstTask+0x24>)
 800664a:	6800      	ldr	r0, [r0, #0]
 800664c:	6800      	ldr	r0, [r0, #0]
 800664e:	f380 8808 	msr	MSP, r0
 8006652:	f04f 0000 	mov.w	r0, #0
 8006656:	f380 8814 	msr	CONTROL, r0
 800665a:	b662      	cpsie	i
 800665c:	b661      	cpsie	f
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	df00      	svc	0
 8006668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800666a:	bf00      	nop
 800666c:	e000ed08 	.word	0xe000ed08

08006670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006676:	4b46      	ldr	r3, [pc, #280]	; (8006790 <xPortStartScheduler+0x120>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a46      	ldr	r2, [pc, #280]	; (8006794 <xPortStartScheduler+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10a      	bne.n	8006696 <xPortStartScheduler+0x26>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	613b      	str	r3, [r7, #16]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006696:	4b3e      	ldr	r3, [pc, #248]	; (8006790 <xPortStartScheduler+0x120>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a3f      	ldr	r2, [pc, #252]	; (8006798 <xPortStartScheduler+0x128>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10a      	bne.n	80066b6 <xPortStartScheduler+0x46>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066b6:	4b39      	ldr	r3, [pc, #228]	; (800679c <xPortStartScheduler+0x12c>)
 80066b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	22ff      	movs	r2, #255	; 0xff
 80066c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	4b31      	ldr	r3, [pc, #196]	; (80067a0 <xPortStartScheduler+0x130>)
 80066dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066de:	4b31      	ldr	r3, [pc, #196]	; (80067a4 <xPortStartScheduler+0x134>)
 80066e0:	2207      	movs	r2, #7
 80066e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066e4:	e009      	b.n	80066fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066e6:	4b2f      	ldr	r3, [pc, #188]	; (80067a4 <xPortStartScheduler+0x134>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	4a2d      	ldr	r2, [pc, #180]	; (80067a4 <xPortStartScheduler+0x134>)
 80066ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	2b80      	cmp	r3, #128	; 0x80
 8006704:	d0ef      	beq.n	80066e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <xPortStartScheduler+0x134>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f1c3 0307 	rsb	r3, r3, #7
 800670e:	2b04      	cmp	r3, #4
 8006710:	d00a      	beq.n	8006728 <xPortStartScheduler+0xb8>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	60bb      	str	r3, [r7, #8]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006728:	4b1e      	ldr	r3, [pc, #120]	; (80067a4 <xPortStartScheduler+0x134>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <xPortStartScheduler+0x134>)
 8006730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006732:	4b1c      	ldr	r3, [pc, #112]	; (80067a4 <xPortStartScheduler+0x134>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800673a:	4a1a      	ldr	r2, [pc, #104]	; (80067a4 <xPortStartScheduler+0x134>)
 800673c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006746:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <xPortStartScheduler+0x138>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <xPortStartScheduler+0x138>)
 800674c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <xPortStartScheduler+0x138>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <xPortStartScheduler+0x138>)
 8006758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800675c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800675e:	f000 f8dd 	bl	800691c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006762:	4b12      	ldr	r3, [pc, #72]	; (80067ac <xPortStartScheduler+0x13c>)
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006768:	f000 f8fc 	bl	8006964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800676c:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <xPortStartScheduler+0x140>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0f      	ldr	r2, [pc, #60]	; (80067b0 <xPortStartScheduler+0x140>)
 8006772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006778:	f7ff ff66 	bl	8006648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800677c:	f7ff fd52 	bl	8006224 <vTaskSwitchContext>
	prvTaskExitError();
 8006780:	f7ff ff1c 	bl	80065bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	e000ed00 	.word	0xe000ed00
 8006794:	410fc271 	.word	0x410fc271
 8006798:	410fc270 	.word	0x410fc270
 800679c:	e000e400 	.word	0xe000e400
 80067a0:	20000414 	.word	0x20000414
 80067a4:	20000418 	.word	0x20000418
 80067a8:	e000ed20 	.word	0xe000ed20
 80067ac:	2000000c 	.word	0x2000000c
 80067b0:	e000ef34 	.word	0xe000ef34

080067b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	607b      	str	r3, [r7, #4]
}
 80067cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <vPortEnterCritical+0x58>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a0d      	ldr	r2, [pc, #52]	; (800680c <vPortEnterCritical+0x58>)
 80067d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <vPortEnterCritical+0x58>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10f      	bne.n	8006800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortEnterCritical+0x5c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <vPortEnterCritical+0x4c>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	603b      	str	r3, [r7, #0]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <vPortEnterCritical+0x4a>
	}
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	2000000c 	.word	0x2000000c
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <vPortExitCritical+0x50>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <vPortExitCritical+0x24>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	607b      	str	r3, [r7, #4]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <vPortExitCritical+0x50>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3b01      	subs	r3, #1
 800683e:	4a09      	ldr	r2, [pc, #36]	; (8006864 <vPortExitCritical+0x50>)
 8006840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006842:	4b08      	ldr	r3, [pc, #32]	; (8006864 <vPortExitCritical+0x50>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <vPortExitCritical+0x42>
 800684a:	2300      	movs	r3, #0
 800684c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000000c 	.word	0x2000000c
	...

08006870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006870:	f3ef 8009 	mrs	r0, PSP
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <pxCurrentTCBConst>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f01e 0f10 	tst.w	lr, #16
 8006880:	bf08      	it	eq
 8006882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	6010      	str	r0, [r2, #0]
 800688c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006894:	f380 8811 	msr	BASEPRI, r0
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f7ff fcc0 	bl	8006224 <vTaskSwitchContext>
 80068a4:	f04f 0000 	mov.w	r0, #0
 80068a8:	f380 8811 	msr	BASEPRI, r0
 80068ac:	bc09      	pop	{r0, r3}
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	6808      	ldr	r0, [r1, #0]
 80068b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b6:	f01e 0f10 	tst.w	lr, #16
 80068ba:	bf08      	it	eq
 80068bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068c0:	f380 8809 	msr	PSP, r0
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst>:
 80068d0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068f2:	f7ff fbdf 	bl	80060b4 <xTaskIncrementTick>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <SysTick_Handler+0x40>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f383 8811 	msr	BASEPRI, r3
}
 800690e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <vPortSetupTimerInterrupt+0x34>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <vPortSetupTimerInterrupt+0x38>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <vPortSetupTimerInterrupt+0x3c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <vPortSetupTimerInterrupt+0x40>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <vPortSetupTimerInterrupt+0x44>)
 800693a:	3b01      	subs	r3, #1
 800693c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <vPortSetupTimerInterrupt+0x34>)
 8006940:	2207      	movs	r2, #7
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	e000e010 	.word	0xe000e010
 8006954:	e000e018 	.word	0xe000e018
 8006958:	20000000 	.word	0x20000000
 800695c:	10624dd3 	.word	0x10624dd3
 8006960:	e000e014 	.word	0xe000e014

08006964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006974 <vPortEnableVFP+0x10>
 8006968:	6801      	ldr	r1, [r0, #0]
 800696a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800696e:	6001      	str	r1, [r0, #0]
 8006970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006972:	bf00      	nop
 8006974:	e000ed88 	.word	0xe000ed88

08006978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006984:	f7ff faec 	bl	8005f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006988:	4b5b      	ldr	r3, [pc, #364]	; (8006af8 <pvPortMalloc+0x180>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006990:	f000 f920 	bl	8006bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006994:	4b59      	ldr	r3, [pc, #356]	; (8006afc <pvPortMalloc+0x184>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8093 	bne.w	8006ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01d      	beq.n	80069e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069a8:	2208      	movs	r2, #8
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d014      	beq.n	80069e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f023 0307 	bic.w	r3, r3, #7
 80069c0:	3308      	adds	r3, #8
 80069c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <pvPortMalloc+0x6c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	617b      	str	r3, [r7, #20]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d06e      	beq.n	8006ac8 <pvPortMalloc+0x150>
 80069ea:	4b45      	ldr	r3, [pc, #276]	; (8006b00 <pvPortMalloc+0x188>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d869      	bhi.n	8006ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069f4:	4b43      	ldr	r3, [pc, #268]	; (8006b04 <pvPortMalloc+0x18c>)
 80069f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069f8:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <pvPortMalloc+0x18c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069fe:	e004      	b.n	8006a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d903      	bls.n	8006a1c <pvPortMalloc+0xa4>
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1f1      	bne.n	8006a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a1c:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <pvPortMalloc+0x180>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d050      	beq.n	8006ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	2308      	movs	r3, #8
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d91f      	bls.n	8006a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <pvPortMalloc+0xf8>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	613b      	str	r3, [r7, #16]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a82:	69b8      	ldr	r0, [r7, #24]
 8006a84:	f000 f908 	bl	8006c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <pvPortMalloc+0x188>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <pvPortMalloc+0x188>)
 8006a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a96:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <pvPortMalloc+0x188>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <pvPortMalloc+0x190>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d203      	bcs.n	8006aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <pvPortMalloc+0x188>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <pvPortMalloc+0x190>)
 8006aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <pvPortMalloc+0x184>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <pvPortMalloc+0x194>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <pvPortMalloc+0x194>)
 8006ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ac8:	f7ff fa58 	bl	8005f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <pvPortMalloc+0x174>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	60fb      	str	r3, [r7, #12]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <pvPortMalloc+0x172>
	return pvReturn;
 8006aec:	69fb      	ldr	r3, [r7, #28]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3728      	adds	r7, #40	; 0x28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000fdc 	.word	0x20000fdc
 8006afc:	20000ff0 	.word	0x20000ff0
 8006b00:	20000fe0 	.word	0x20000fe0
 8006b04:	20000fd4 	.word	0x20000fd4
 8006b08:	20000fe4 	.word	0x20000fe4
 8006b0c:	20000fe8 	.word	0x20000fe8

08006b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d04d      	beq.n	8006bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b22:	2308      	movs	r3, #8
 8006b24:	425b      	negs	r3, r3
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <vPortFree+0xb8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <vPortFree+0x44>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <vPortFree+0x62>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60bb      	str	r3, [r7, #8]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <vPortFree+0xb8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01e      	beq.n	8006bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11a      	bne.n	8006bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <vPortFree+0xb8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b98:	f7ff f9e2 	bl	8005f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <vPortFree+0xbc>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <vPortFree+0xbc>)
 8006ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006baa:	6938      	ldr	r0, [r7, #16]
 8006bac:	f000 f874 	bl	8006c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <vPortFree+0xc0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <vPortFree+0xc0>)
 8006bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bba:	f7ff f9df 	bl	8005f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bbe:	bf00      	nop
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000ff0 	.word	0x20000ff0
 8006bcc:	20000fe0 	.word	0x20000fe0
 8006bd0:	20000fec 	.word	0x20000fec

08006bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006be0:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <prvHeapInit+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <prvHeapInit+0xac>)
 8006c04:	4413      	add	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <prvHeapInit+0xb0>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <prvHeapInit+0xb0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c20:	2208      	movs	r2, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <prvHeapInit+0xb4>)
 8006c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <prvHeapInit+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <prvHeapInit+0xb4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c54:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <prvHeapInit+0xb4>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <prvHeapInit+0xb8>)
 8006c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <prvHeapInit+0xbc>)
 8006c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <prvHeapInit+0xc0>)
 8006c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	2000041c 	.word	0x2000041c
 8006c84:	20000fd4 	.word	0x20000fd4
 8006c88:	20000fdc 	.word	0x20000fdc
 8006c8c:	20000fe4 	.word	0x20000fe4
 8006c90:	20000fe0 	.word	0x20000fe0
 8006c94:	20000ff0 	.word	0x20000ff0

08006c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ca0:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <prvInsertBlockIntoFreeList+0xac>)
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e002      	b.n	8006cac <prvInsertBlockIntoFreeList+0x14>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d8f7      	bhi.n	8006ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d108      	bne.n	8006cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d118      	bne.n	8006d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d00d      	beq.n	8006d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e008      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e003      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d002      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000fd4 	.word	0x20000fd4
 8006d48:	20000fdc 	.word	0x20000fdc

08006d4c <__errno>:
 8006d4c:	4b01      	ldr	r3, [pc, #4]	; (8006d54 <__errno+0x8>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000010 	.word	0x20000010

08006d58 <__libc_init_array>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4d0d      	ldr	r5, [pc, #52]	; (8006d90 <__libc_init_array+0x38>)
 8006d5c:	4c0d      	ldr	r4, [pc, #52]	; (8006d94 <__libc_init_array+0x3c>)
 8006d5e:	1b64      	subs	r4, r4, r5
 8006d60:	10a4      	asrs	r4, r4, #2
 8006d62:	2600      	movs	r6, #0
 8006d64:	42a6      	cmp	r6, r4
 8006d66:	d109      	bne.n	8006d7c <__libc_init_array+0x24>
 8006d68:	4d0b      	ldr	r5, [pc, #44]	; (8006d98 <__libc_init_array+0x40>)
 8006d6a:	4c0c      	ldr	r4, [pc, #48]	; (8006d9c <__libc_init_array+0x44>)
 8006d6c:	f000 ff76 	bl	8007c5c <_init>
 8006d70:	1b64      	subs	r4, r4, r5
 8006d72:	10a4      	asrs	r4, r4, #2
 8006d74:	2600      	movs	r6, #0
 8006d76:	42a6      	cmp	r6, r4
 8006d78:	d105      	bne.n	8006d86 <__libc_init_array+0x2e>
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d80:	4798      	blx	r3
 8006d82:	3601      	adds	r6, #1
 8006d84:	e7ee      	b.n	8006d64 <__libc_init_array+0xc>
 8006d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d8a:	4798      	blx	r3
 8006d8c:	3601      	adds	r6, #1
 8006d8e:	e7f2      	b.n	8006d76 <__libc_init_array+0x1e>
 8006d90:	08007d94 	.word	0x08007d94
 8006d94:	08007d94 	.word	0x08007d94
 8006d98:	08007d94 	.word	0x08007d94
 8006d9c:	08007d98 	.word	0x08007d98

08006da0 <memset>:
 8006da0:	4402      	add	r2, r0
 8006da2:	4603      	mov	r3, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <iprintf>:
 8006db0:	b40f      	push	{r0, r1, r2, r3}
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <iprintf+0x2c>)
 8006db4:	b513      	push	{r0, r1, r4, lr}
 8006db6:	681c      	ldr	r4, [r3, #0]
 8006db8:	b124      	cbz	r4, 8006dc4 <iprintf+0x14>
 8006dba:	69a3      	ldr	r3, [r4, #24]
 8006dbc:	b913      	cbnz	r3, 8006dc4 <iprintf+0x14>
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 f866 	bl	8006e90 <__sinit>
 8006dc4:	ab05      	add	r3, sp, #20
 8006dc6:	9a04      	ldr	r2, [sp, #16]
 8006dc8:	68a1      	ldr	r1, [r4, #8]
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f983 	bl	80070d8 <_vfiprintf_r>
 8006dd2:	b002      	add	sp, #8
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	b004      	add	sp, #16
 8006dda:	4770      	bx	lr
 8006ddc:	20000010 	.word	0x20000010

08006de0 <std>:
 8006de0:	2300      	movs	r3, #0
 8006de2:	b510      	push	{r4, lr}
 8006de4:	4604      	mov	r4, r0
 8006de6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dee:	6083      	str	r3, [r0, #8]
 8006df0:	8181      	strh	r1, [r0, #12]
 8006df2:	6643      	str	r3, [r0, #100]	; 0x64
 8006df4:	81c2      	strh	r2, [r0, #14]
 8006df6:	6183      	str	r3, [r0, #24]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	305c      	adds	r0, #92	; 0x5c
 8006dfe:	f7ff ffcf 	bl	8006da0 <memset>
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <std+0x38>)
 8006e04:	6263      	str	r3, [r4, #36]	; 0x24
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <std+0x3c>)
 8006e08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <std+0x40>)
 8006e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <std+0x44>)
 8006e10:	6224      	str	r4, [r4, #32]
 8006e12:	6323      	str	r3, [r4, #48]	; 0x30
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	08007681 	.word	0x08007681
 8006e1c:	080076a3 	.word	0x080076a3
 8006e20:	080076db 	.word	0x080076db
 8006e24:	080076ff 	.word	0x080076ff

08006e28 <_cleanup_r>:
 8006e28:	4901      	ldr	r1, [pc, #4]	; (8006e30 <_cleanup_r+0x8>)
 8006e2a:	f000 b8af 	b.w	8006f8c <_fwalk_reent>
 8006e2e:	bf00      	nop
 8006e30:	080079d9 	.word	0x080079d9

08006e34 <__sfmoreglue>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	1e4a      	subs	r2, r1, #1
 8006e38:	2568      	movs	r5, #104	; 0x68
 8006e3a:	4355      	muls	r5, r2
 8006e3c:	460e      	mov	r6, r1
 8006e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e42:	f000 f8c5 	bl	8006fd0 <_malloc_r>
 8006e46:	4604      	mov	r4, r0
 8006e48:	b140      	cbz	r0, 8006e5c <__sfmoreglue+0x28>
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e50:	300c      	adds	r0, #12
 8006e52:	60a0      	str	r0, [r4, #8]
 8006e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e58:	f7ff ffa2 	bl	8006da0 <memset>
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}

08006e60 <__sfp_lock_acquire>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__sfp_lock_acquire+0x8>)
 8006e62:	f000 b8b3 	b.w	8006fcc <__retarget_lock_acquire_recursive>
 8006e66:	bf00      	nop
 8006e68:	20001154 	.word	0x20001154

08006e6c <__sfp_lock_release>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__sfp_lock_release+0x8>)
 8006e6e:	f000 b8ae 	b.w	8006fce <__retarget_lock_release_recursive>
 8006e72:	bf00      	nop
 8006e74:	20001154 	.word	0x20001154

08006e78 <__sinit_lock_acquire>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sinit_lock_acquire+0x8>)
 8006e7a:	f000 b8a7 	b.w	8006fcc <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	2000114f 	.word	0x2000114f

08006e84 <__sinit_lock_release>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__sinit_lock_release+0x8>)
 8006e86:	f000 b8a2 	b.w	8006fce <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	2000114f 	.word	0x2000114f

08006e90 <__sinit>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	f7ff fff0 	bl	8006e78 <__sinit_lock_acquire>
 8006e98:	69a3      	ldr	r3, [r4, #24]
 8006e9a:	b11b      	cbz	r3, 8006ea4 <__sinit+0x14>
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	f7ff bff0 	b.w	8006e84 <__sinit_lock_release>
 8006ea4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ea8:	6523      	str	r3, [r4, #80]	; 0x50
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <__sinit+0x68>)
 8006eac:	4a13      	ldr	r2, [pc, #76]	; (8006efc <__sinit+0x6c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	bf04      	itt	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	61a3      	streq	r3, [r4, #24]
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f820 	bl	8006f00 <__sfp>
 8006ec0:	6060      	str	r0, [r4, #4]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 f81c 	bl	8006f00 <__sfp>
 8006ec8:	60a0      	str	r0, [r4, #8]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 f818 	bl	8006f00 <__sfp>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	60e0      	str	r0, [r4, #12]
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	6860      	ldr	r0, [r4, #4]
 8006ed8:	f7ff ff82 	bl	8006de0 <std>
 8006edc:	68a0      	ldr	r0, [r4, #8]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	2109      	movs	r1, #9
 8006ee2:	f7ff ff7d 	bl	8006de0 <std>
 8006ee6:	68e0      	ldr	r0, [r4, #12]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	2112      	movs	r1, #18
 8006eec:	f7ff ff78 	bl	8006de0 <std>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	61a3      	str	r3, [r4, #24]
 8006ef4:	e7d2      	b.n	8006e9c <__sinit+0xc>
 8006ef6:	bf00      	nop
 8006ef8:	08007cfc 	.word	0x08007cfc
 8006efc:	08006e29 	.word	0x08006e29

08006f00 <__sfp>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	4607      	mov	r7, r0
 8006f04:	f7ff ffac 	bl	8006e60 <__sfp_lock_acquire>
 8006f08:	4b1e      	ldr	r3, [pc, #120]	; (8006f84 <__sfp+0x84>)
 8006f0a:	681e      	ldr	r6, [r3, #0]
 8006f0c:	69b3      	ldr	r3, [r6, #24]
 8006f0e:	b913      	cbnz	r3, 8006f16 <__sfp+0x16>
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff ffbd 	bl	8006e90 <__sinit>
 8006f16:	3648      	adds	r6, #72	; 0x48
 8006f18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	d503      	bpl.n	8006f28 <__sfp+0x28>
 8006f20:	6833      	ldr	r3, [r6, #0]
 8006f22:	b30b      	cbz	r3, 8006f68 <__sfp+0x68>
 8006f24:	6836      	ldr	r6, [r6, #0]
 8006f26:	e7f7      	b.n	8006f18 <__sfp+0x18>
 8006f28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f2c:	b9d5      	cbnz	r5, 8006f64 <__sfp+0x64>
 8006f2e:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <__sfp+0x88>)
 8006f30:	60e3      	str	r3, [r4, #12]
 8006f32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f36:	6665      	str	r5, [r4, #100]	; 0x64
 8006f38:	f000 f847 	bl	8006fca <__retarget_lock_init_recursive>
 8006f3c:	f7ff ff96 	bl	8006e6c <__sfp_lock_release>
 8006f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f48:	6025      	str	r5, [r4, #0]
 8006f4a:	61a5      	str	r5, [r4, #24]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f54:	f7ff ff24 	bl	8006da0 <memset>
 8006f58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f60:	4620      	mov	r0, r4
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	3468      	adds	r4, #104	; 0x68
 8006f66:	e7d9      	b.n	8006f1c <__sfp+0x1c>
 8006f68:	2104      	movs	r1, #4
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f7ff ff62 	bl	8006e34 <__sfmoreglue>
 8006f70:	4604      	mov	r4, r0
 8006f72:	6030      	str	r0, [r6, #0]
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d1d5      	bne.n	8006f24 <__sfp+0x24>
 8006f78:	f7ff ff78 	bl	8006e6c <__sfp_lock_release>
 8006f7c:	230c      	movs	r3, #12
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	e7ee      	b.n	8006f60 <__sfp+0x60>
 8006f82:	bf00      	nop
 8006f84:	08007cfc 	.word	0x08007cfc
 8006f88:	ffff0001 	.word	0xffff0001

08006f8c <_fwalk_reent>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4606      	mov	r6, r0
 8006f92:	4688      	mov	r8, r1
 8006f94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f98:	2700      	movs	r7, #0
 8006f9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa2:	d505      	bpl.n	8006fb0 <_fwalk_reent+0x24>
 8006fa4:	6824      	ldr	r4, [r4, #0]
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	d1f7      	bne.n	8006f9a <_fwalk_reent+0xe>
 8006faa:	4638      	mov	r0, r7
 8006fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb0:	89ab      	ldrh	r3, [r5, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d907      	bls.n	8006fc6 <_fwalk_reent+0x3a>
 8006fb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	d003      	beq.n	8006fc6 <_fwalk_reent+0x3a>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	47c0      	blx	r8
 8006fc4:	4307      	orrs	r7, r0
 8006fc6:	3568      	adds	r5, #104	; 0x68
 8006fc8:	e7e9      	b.n	8006f9e <_fwalk_reent+0x12>

08006fca <__retarget_lock_init_recursive>:
 8006fca:	4770      	bx	lr

08006fcc <__retarget_lock_acquire_recursive>:
 8006fcc:	4770      	bx	lr

08006fce <__retarget_lock_release_recursive>:
 8006fce:	4770      	bx	lr

08006fd0 <_malloc_r>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	1ccd      	adds	r5, r1, #3
 8006fd4:	f025 0503 	bic.w	r5, r5, #3
 8006fd8:	3508      	adds	r5, #8
 8006fda:	2d0c      	cmp	r5, #12
 8006fdc:	bf38      	it	cc
 8006fde:	250c      	movcc	r5, #12
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	db01      	blt.n	8006fea <_malloc_r+0x1a>
 8006fe6:	42a9      	cmp	r1, r5
 8006fe8:	d903      	bls.n	8006ff2 <_malloc_r+0x22>
 8006fea:	230c      	movs	r3, #12
 8006fec:	6033      	str	r3, [r6, #0]
 8006fee:	2000      	movs	r0, #0
 8006ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff2:	f000 fda3 	bl	8007b3c <__malloc_lock>
 8006ff6:	4921      	ldr	r1, [pc, #132]	; (800707c <_malloc_r+0xac>)
 8006ff8:	680a      	ldr	r2, [r1, #0]
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	b99c      	cbnz	r4, 8007026 <_malloc_r+0x56>
 8006ffe:	4f20      	ldr	r7, [pc, #128]	; (8007080 <_malloc_r+0xb0>)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	b923      	cbnz	r3, 800700e <_malloc_r+0x3e>
 8007004:	4621      	mov	r1, r4
 8007006:	4630      	mov	r0, r6
 8007008:	f000 fb2a 	bl	8007660 <_sbrk_r>
 800700c:	6038      	str	r0, [r7, #0]
 800700e:	4629      	mov	r1, r5
 8007010:	4630      	mov	r0, r6
 8007012:	f000 fb25 	bl	8007660 <_sbrk_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d123      	bne.n	8007062 <_malloc_r+0x92>
 800701a:	230c      	movs	r3, #12
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	4630      	mov	r0, r6
 8007020:	f000 fd92 	bl	8007b48 <__malloc_unlock>
 8007024:	e7e3      	b.n	8006fee <_malloc_r+0x1e>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	1b5b      	subs	r3, r3, r5
 800702a:	d417      	bmi.n	800705c <_malloc_r+0x8c>
 800702c:	2b0b      	cmp	r3, #11
 800702e:	d903      	bls.n	8007038 <_malloc_r+0x68>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	441c      	add	r4, r3
 8007034:	6025      	str	r5, [r4, #0]
 8007036:	e004      	b.n	8007042 <_malloc_r+0x72>
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	42a2      	cmp	r2, r4
 800703c:	bf0c      	ite	eq
 800703e:	600b      	streq	r3, [r1, #0]
 8007040:	6053      	strne	r3, [r2, #4]
 8007042:	4630      	mov	r0, r6
 8007044:	f000 fd80 	bl	8007b48 <__malloc_unlock>
 8007048:	f104 000b 	add.w	r0, r4, #11
 800704c:	1d23      	adds	r3, r4, #4
 800704e:	f020 0007 	bic.w	r0, r0, #7
 8007052:	1ac2      	subs	r2, r0, r3
 8007054:	d0cc      	beq.n	8006ff0 <_malloc_r+0x20>
 8007056:	1a1b      	subs	r3, r3, r0
 8007058:	50a3      	str	r3, [r4, r2]
 800705a:	e7c9      	b.n	8006ff0 <_malloc_r+0x20>
 800705c:	4622      	mov	r2, r4
 800705e:	6864      	ldr	r4, [r4, #4]
 8007060:	e7cc      	b.n	8006ffc <_malloc_r+0x2c>
 8007062:	1cc4      	adds	r4, r0, #3
 8007064:	f024 0403 	bic.w	r4, r4, #3
 8007068:	42a0      	cmp	r0, r4
 800706a:	d0e3      	beq.n	8007034 <_malloc_r+0x64>
 800706c:	1a21      	subs	r1, r4, r0
 800706e:	4630      	mov	r0, r6
 8007070:	f000 faf6 	bl	8007660 <_sbrk_r>
 8007074:	3001      	adds	r0, #1
 8007076:	d1dd      	bne.n	8007034 <_malloc_r+0x64>
 8007078:	e7cf      	b.n	800701a <_malloc_r+0x4a>
 800707a:	bf00      	nop
 800707c:	20000ff4 	.word	0x20000ff4
 8007080:	20000ff8 	.word	0x20000ff8

08007084 <__sfputc_r>:
 8007084:	6893      	ldr	r3, [r2, #8]
 8007086:	3b01      	subs	r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	b410      	push	{r4}
 800708c:	6093      	str	r3, [r2, #8]
 800708e:	da08      	bge.n	80070a2 <__sfputc_r+0x1e>
 8007090:	6994      	ldr	r4, [r2, #24]
 8007092:	42a3      	cmp	r3, r4
 8007094:	db01      	blt.n	800709a <__sfputc_r+0x16>
 8007096:	290a      	cmp	r1, #10
 8007098:	d103      	bne.n	80070a2 <__sfputc_r+0x1e>
 800709a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800709e:	f000 bb33 	b.w	8007708 <__swbuf_r>
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	1c58      	adds	r0, r3, #1
 80070a6:	6010      	str	r0, [r2, #0]
 80070a8:	7019      	strb	r1, [r3, #0]
 80070aa:	4608      	mov	r0, r1
 80070ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <__sfputs_r>:
 80070b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	18d5      	adds	r5, r2, r3
 80070bc:	42ac      	cmp	r4, r5
 80070be:	d101      	bne.n	80070c4 <__sfputs_r+0x12>
 80070c0:	2000      	movs	r0, #0
 80070c2:	e007      	b.n	80070d4 <__sfputs_r+0x22>
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	463a      	mov	r2, r7
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ffda 	bl	8007084 <__sfputc_r>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d1f3      	bne.n	80070bc <__sfputs_r+0xa>
 80070d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070d8 <_vfiprintf_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	460d      	mov	r5, r1
 80070de:	b09d      	sub	sp, #116	; 0x74
 80070e0:	4614      	mov	r4, r2
 80070e2:	4698      	mov	r8, r3
 80070e4:	4606      	mov	r6, r0
 80070e6:	b118      	cbz	r0, 80070f0 <_vfiprintf_r+0x18>
 80070e8:	6983      	ldr	r3, [r0, #24]
 80070ea:	b90b      	cbnz	r3, 80070f0 <_vfiprintf_r+0x18>
 80070ec:	f7ff fed0 	bl	8006e90 <__sinit>
 80070f0:	4b89      	ldr	r3, [pc, #548]	; (8007318 <_vfiprintf_r+0x240>)
 80070f2:	429d      	cmp	r5, r3
 80070f4:	d11b      	bne.n	800712e <_vfiprintf_r+0x56>
 80070f6:	6875      	ldr	r5, [r6, #4]
 80070f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070fa:	07d9      	lsls	r1, r3, #31
 80070fc:	d405      	bmi.n	800710a <_vfiprintf_r+0x32>
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	059a      	lsls	r2, r3, #22
 8007102:	d402      	bmi.n	800710a <_vfiprintf_r+0x32>
 8007104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007106:	f7ff ff61 	bl	8006fcc <__retarget_lock_acquire_recursive>
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	071b      	lsls	r3, r3, #28
 800710e:	d501      	bpl.n	8007114 <_vfiprintf_r+0x3c>
 8007110:	692b      	ldr	r3, [r5, #16]
 8007112:	b9eb      	cbnz	r3, 8007150 <_vfiprintf_r+0x78>
 8007114:	4629      	mov	r1, r5
 8007116:	4630      	mov	r0, r6
 8007118:	f000 fb5a 	bl	80077d0 <__swsetup_r>
 800711c:	b1c0      	cbz	r0, 8007150 <_vfiprintf_r+0x78>
 800711e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007120:	07dc      	lsls	r4, r3, #31
 8007122:	d50e      	bpl.n	8007142 <_vfiprintf_r+0x6a>
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	b01d      	add	sp, #116	; 0x74
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	4b7b      	ldr	r3, [pc, #492]	; (800731c <_vfiprintf_r+0x244>)
 8007130:	429d      	cmp	r5, r3
 8007132:	d101      	bne.n	8007138 <_vfiprintf_r+0x60>
 8007134:	68b5      	ldr	r5, [r6, #8]
 8007136:	e7df      	b.n	80070f8 <_vfiprintf_r+0x20>
 8007138:	4b79      	ldr	r3, [pc, #484]	; (8007320 <_vfiprintf_r+0x248>)
 800713a:	429d      	cmp	r5, r3
 800713c:	bf08      	it	eq
 800713e:	68f5      	ldreq	r5, [r6, #12]
 8007140:	e7da      	b.n	80070f8 <_vfiprintf_r+0x20>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	0598      	lsls	r0, r3, #22
 8007146:	d4ed      	bmi.n	8007124 <_vfiprintf_r+0x4c>
 8007148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714a:	f7ff ff40 	bl	8006fce <__retarget_lock_release_recursive>
 800714e:	e7e9      	b.n	8007124 <_vfiprintf_r+0x4c>
 8007150:	2300      	movs	r3, #0
 8007152:	9309      	str	r3, [sp, #36]	; 0x24
 8007154:	2320      	movs	r3, #32
 8007156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715a:	f8cd 800c 	str.w	r8, [sp, #12]
 800715e:	2330      	movs	r3, #48	; 0x30
 8007160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007324 <_vfiprintf_r+0x24c>
 8007164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007168:	f04f 0901 	mov.w	r9, #1
 800716c:	4623      	mov	r3, r4
 800716e:	469a      	mov	sl, r3
 8007170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007174:	b10a      	cbz	r2, 800717a <_vfiprintf_r+0xa2>
 8007176:	2a25      	cmp	r2, #37	; 0x25
 8007178:	d1f9      	bne.n	800716e <_vfiprintf_r+0x96>
 800717a:	ebba 0b04 	subs.w	fp, sl, r4
 800717e:	d00b      	beq.n	8007198 <_vfiprintf_r+0xc0>
 8007180:	465b      	mov	r3, fp
 8007182:	4622      	mov	r2, r4
 8007184:	4629      	mov	r1, r5
 8007186:	4630      	mov	r0, r6
 8007188:	f7ff ff93 	bl	80070b2 <__sfputs_r>
 800718c:	3001      	adds	r0, #1
 800718e:	f000 80aa 	beq.w	80072e6 <_vfiprintf_r+0x20e>
 8007192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007194:	445a      	add	r2, fp
 8007196:	9209      	str	r2, [sp, #36]	; 0x24
 8007198:	f89a 3000 	ldrb.w	r3, [sl]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80a2 	beq.w	80072e6 <_vfiprintf_r+0x20e>
 80071a2:	2300      	movs	r3, #0
 80071a4:	f04f 32ff 	mov.w	r2, #4294967295
 80071a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ac:	f10a 0a01 	add.w	sl, sl, #1
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	9307      	str	r3, [sp, #28]
 80071b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071b8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ba:	4654      	mov	r4, sl
 80071bc:	2205      	movs	r2, #5
 80071be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c2:	4858      	ldr	r0, [pc, #352]	; (8007324 <_vfiprintf_r+0x24c>)
 80071c4:	f7f9 f804 	bl	80001d0 <memchr>
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	b9d8      	cbnz	r0, 8007204 <_vfiprintf_r+0x12c>
 80071cc:	06d1      	lsls	r1, r2, #27
 80071ce:	bf44      	itt	mi
 80071d0:	2320      	movmi	r3, #32
 80071d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d6:	0713      	lsls	r3, r2, #28
 80071d8:	bf44      	itt	mi
 80071da:	232b      	movmi	r3, #43	; 0x2b
 80071dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e0:	f89a 3000 	ldrb.w	r3, [sl]
 80071e4:	2b2a      	cmp	r3, #42	; 0x2a
 80071e6:	d015      	beq.n	8007214 <_vfiprintf_r+0x13c>
 80071e8:	9a07      	ldr	r2, [sp, #28]
 80071ea:	4654      	mov	r4, sl
 80071ec:	2000      	movs	r0, #0
 80071ee:	f04f 0c0a 	mov.w	ip, #10
 80071f2:	4621      	mov	r1, r4
 80071f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071f8:	3b30      	subs	r3, #48	; 0x30
 80071fa:	2b09      	cmp	r3, #9
 80071fc:	d94e      	bls.n	800729c <_vfiprintf_r+0x1c4>
 80071fe:	b1b0      	cbz	r0, 800722e <_vfiprintf_r+0x156>
 8007200:	9207      	str	r2, [sp, #28]
 8007202:	e014      	b.n	800722e <_vfiprintf_r+0x156>
 8007204:	eba0 0308 	sub.w	r3, r0, r8
 8007208:	fa09 f303 	lsl.w	r3, r9, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	46a2      	mov	sl, r4
 8007212:	e7d2      	b.n	80071ba <_vfiprintf_r+0xe2>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	1d19      	adds	r1, r3, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	9103      	str	r1, [sp, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	bfbb      	ittet	lt
 8007220:	425b      	neglt	r3, r3
 8007222:	f042 0202 	orrlt.w	r2, r2, #2
 8007226:	9307      	strge	r3, [sp, #28]
 8007228:	9307      	strlt	r3, [sp, #28]
 800722a:	bfb8      	it	lt
 800722c:	9204      	strlt	r2, [sp, #16]
 800722e:	7823      	ldrb	r3, [r4, #0]
 8007230:	2b2e      	cmp	r3, #46	; 0x2e
 8007232:	d10c      	bne.n	800724e <_vfiprintf_r+0x176>
 8007234:	7863      	ldrb	r3, [r4, #1]
 8007236:	2b2a      	cmp	r3, #42	; 0x2a
 8007238:	d135      	bne.n	80072a6 <_vfiprintf_r+0x1ce>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	9203      	str	r2, [sp, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfb8      	it	lt
 8007246:	f04f 33ff 	movlt.w	r3, #4294967295
 800724a:	3402      	adds	r4, #2
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007334 <_vfiprintf_r+0x25c>
 8007252:	7821      	ldrb	r1, [r4, #0]
 8007254:	2203      	movs	r2, #3
 8007256:	4650      	mov	r0, sl
 8007258:	f7f8 ffba 	bl	80001d0 <memchr>
 800725c:	b140      	cbz	r0, 8007270 <_vfiprintf_r+0x198>
 800725e:	2340      	movs	r3, #64	; 0x40
 8007260:	eba0 000a 	sub.w	r0, r0, sl
 8007264:	fa03 f000 	lsl.w	r0, r3, r0
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	4303      	orrs	r3, r0
 800726c:	3401      	adds	r4, #1
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	482c      	ldr	r0, [pc, #176]	; (8007328 <_vfiprintf_r+0x250>)
 8007276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800727a:	2206      	movs	r2, #6
 800727c:	f7f8 ffa8 	bl	80001d0 <memchr>
 8007280:	2800      	cmp	r0, #0
 8007282:	d03f      	beq.n	8007304 <_vfiprintf_r+0x22c>
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <_vfiprintf_r+0x254>)
 8007286:	bb1b      	cbnz	r3, 80072d0 <_vfiprintf_r+0x1f8>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	3307      	adds	r3, #7
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	3308      	adds	r3, #8
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	443b      	add	r3, r7
 8007298:	9309      	str	r3, [sp, #36]	; 0x24
 800729a:	e767      	b.n	800716c <_vfiprintf_r+0x94>
 800729c:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a0:	460c      	mov	r4, r1
 80072a2:	2001      	movs	r0, #1
 80072a4:	e7a5      	b.n	80071f2 <_vfiprintf_r+0x11a>
 80072a6:	2300      	movs	r3, #0
 80072a8:	3401      	adds	r4, #1
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f04f 0c0a 	mov.w	ip, #10
 80072b2:	4620      	mov	r0, r4
 80072b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b8:	3a30      	subs	r2, #48	; 0x30
 80072ba:	2a09      	cmp	r2, #9
 80072bc:	d903      	bls.n	80072c6 <_vfiprintf_r+0x1ee>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0c5      	beq.n	800724e <_vfiprintf_r+0x176>
 80072c2:	9105      	str	r1, [sp, #20]
 80072c4:	e7c3      	b.n	800724e <_vfiprintf_r+0x176>
 80072c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ca:	4604      	mov	r4, r0
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7f0      	b.n	80072b2 <_vfiprintf_r+0x1da>
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	462a      	mov	r2, r5
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <_vfiprintf_r+0x258>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	4630      	mov	r0, r6
 80072dc:	f3af 8000 	nop.w
 80072e0:	4607      	mov	r7, r0
 80072e2:	1c78      	adds	r0, r7, #1
 80072e4:	d1d6      	bne.n	8007294 <_vfiprintf_r+0x1bc>
 80072e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e8:	07d9      	lsls	r1, r3, #31
 80072ea:	d405      	bmi.n	80072f8 <_vfiprintf_r+0x220>
 80072ec:	89ab      	ldrh	r3, [r5, #12]
 80072ee:	059a      	lsls	r2, r3, #22
 80072f0:	d402      	bmi.n	80072f8 <_vfiprintf_r+0x220>
 80072f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072f4:	f7ff fe6b 	bl	8006fce <__retarget_lock_release_recursive>
 80072f8:	89ab      	ldrh	r3, [r5, #12]
 80072fa:	065b      	lsls	r3, r3, #25
 80072fc:	f53f af12 	bmi.w	8007124 <_vfiprintf_r+0x4c>
 8007300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007302:	e711      	b.n	8007128 <_vfiprintf_r+0x50>
 8007304:	ab03      	add	r3, sp, #12
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462a      	mov	r2, r5
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <_vfiprintf_r+0x258>)
 800730c:	a904      	add	r1, sp, #16
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f880 	bl	8007414 <_printf_i>
 8007314:	e7e4      	b.n	80072e0 <_vfiprintf_r+0x208>
 8007316:	bf00      	nop
 8007318:	08007d20 	.word	0x08007d20
 800731c:	08007d40 	.word	0x08007d40
 8007320:	08007d00 	.word	0x08007d00
 8007324:	08007d60 	.word	0x08007d60
 8007328:	08007d6a 	.word	0x08007d6a
 800732c:	00000000 	.word	0x00000000
 8007330:	080070b3 	.word	0x080070b3
 8007334:	08007d66 	.word	0x08007d66

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4699      	mov	r9, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007384:	1e13      	subs	r3, r2, #0
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	68e5      	ldr	r5, [r4, #12]
 80073a2:	6832      	ldr	r2, [r6, #0]
 80073a4:	f003 0306 	and.w	r3, r3, #6
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	bf08      	it	eq
 80073ac:	1aad      	subeq	r5, r5, r2
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4649      	mov	r1, r9
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	; 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4649      	mov	r1, r9
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	4691      	mov	r9, r2
 800741c:	7e27      	ldrb	r7, [r4, #24]
 800741e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007420:	2f78      	cmp	r7, #120	; 0x78
 8007422:	4680      	mov	r8, r0
 8007424:	469a      	mov	sl, r3
 8007426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	; 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d8 	beq.w	80075e6 <_printf_i+0x1d2>
 8007436:	2f58      	cmp	r7, #88	; 0x58
 8007438:	f000 80a3 	beq.w	8007582 <_printf_i+0x16e>
 800743c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a001      	add	r0, pc, #4	; (adr r0, 8007454 <_printf_i+0x40>)
 8007450:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075cd 	.word	0x080075cd
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080075af 	.word	0x080075af
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075ef 	.word	0x080075ef
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	080075b7 	.word	0x080075b7
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	600a      	str	r2, [r1, #0]
 80074b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e0a3      	b.n	8007608 <_printf_i+0x1f4>
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	6808      	ldr	r0, [r1, #0]
 80074c4:	062e      	lsls	r6, r5, #24
 80074c6:	f100 0304 	add.w	r3, r0, #4
 80074ca:	d50a      	bpl.n	80074e2 <_printf_i+0xce>
 80074cc:	6805      	ldr	r5, [r0, #0]
 80074ce:	600b      	str	r3, [r1, #0]
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	da03      	bge.n	80074dc <_printf_i+0xc8>
 80074d4:	232d      	movs	r3, #45	; 0x2d
 80074d6:	426d      	negs	r5, r5
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074dc:	485e      	ldr	r0, [pc, #376]	; (8007658 <_printf_i+0x244>)
 80074de:	230a      	movs	r3, #10
 80074e0:	e019      	b.n	8007516 <_printf_i+0x102>
 80074e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074e6:	6805      	ldr	r5, [r0, #0]
 80074e8:	600b      	str	r3, [r1, #0]
 80074ea:	bf18      	it	ne
 80074ec:	b22d      	sxthne	r5, r5
 80074ee:	e7ef      	b.n	80074d0 <_printf_i+0xbc>
 80074f0:	680b      	ldr	r3, [r1, #0]
 80074f2:	6825      	ldr	r5, [r4, #0]
 80074f4:	1d18      	adds	r0, r3, #4
 80074f6:	6008      	str	r0, [r1, #0]
 80074f8:	0628      	lsls	r0, r5, #24
 80074fa:	d501      	bpl.n	8007500 <_printf_i+0xec>
 80074fc:	681d      	ldr	r5, [r3, #0]
 80074fe:	e002      	b.n	8007506 <_printf_i+0xf2>
 8007500:	0669      	lsls	r1, r5, #25
 8007502:	d5fb      	bpl.n	80074fc <_printf_i+0xe8>
 8007504:	881d      	ldrh	r5, [r3, #0]
 8007506:	4854      	ldr	r0, [pc, #336]	; (8007658 <_printf_i+0x244>)
 8007508:	2f6f      	cmp	r7, #111	; 0x6f
 800750a:	bf0c      	ite	eq
 800750c:	2308      	moveq	r3, #8
 800750e:	230a      	movne	r3, #10
 8007510:	2100      	movs	r1, #0
 8007512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007516:	6866      	ldr	r6, [r4, #4]
 8007518:	60a6      	str	r6, [r4, #8]
 800751a:	2e00      	cmp	r6, #0
 800751c:	bfa2      	ittt	ge
 800751e:	6821      	ldrge	r1, [r4, #0]
 8007520:	f021 0104 	bicge.w	r1, r1, #4
 8007524:	6021      	strge	r1, [r4, #0]
 8007526:	b90d      	cbnz	r5, 800752c <_printf_i+0x118>
 8007528:	2e00      	cmp	r6, #0
 800752a:	d04d      	beq.n	80075c8 <_printf_i+0x1b4>
 800752c:	4616      	mov	r6, r2
 800752e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007532:	fb03 5711 	mls	r7, r3, r1, r5
 8007536:	5dc7      	ldrb	r7, [r0, r7]
 8007538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800753c:	462f      	mov	r7, r5
 800753e:	42bb      	cmp	r3, r7
 8007540:	460d      	mov	r5, r1
 8007542:	d9f4      	bls.n	800752e <_printf_i+0x11a>
 8007544:	2b08      	cmp	r3, #8
 8007546:	d10b      	bne.n	8007560 <_printf_i+0x14c>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	07df      	lsls	r7, r3, #31
 800754c:	d508      	bpl.n	8007560 <_printf_i+0x14c>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	6861      	ldr	r1, [r4, #4]
 8007552:	4299      	cmp	r1, r3
 8007554:	bfde      	ittt	le
 8007556:	2330      	movle	r3, #48	; 0x30
 8007558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800755c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007560:	1b92      	subs	r2, r2, r6
 8007562:	6122      	str	r2, [r4, #16]
 8007564:	f8cd a000 	str.w	sl, [sp]
 8007568:	464b      	mov	r3, r9
 800756a:	aa03      	add	r2, sp, #12
 800756c:	4621      	mov	r1, r4
 800756e:	4640      	mov	r0, r8
 8007570:	f7ff fee2 	bl	8007338 <_printf_common>
 8007574:	3001      	adds	r0, #1
 8007576:	d14c      	bne.n	8007612 <_printf_i+0x1fe>
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	b004      	add	sp, #16
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	4835      	ldr	r0, [pc, #212]	; (8007658 <_printf_i+0x244>)
 8007584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	680e      	ldr	r6, [r1, #0]
 800758c:	061f      	lsls	r7, r3, #24
 800758e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007592:	600e      	str	r6, [r1, #0]
 8007594:	d514      	bpl.n	80075c0 <_printf_i+0x1ac>
 8007596:	07d9      	lsls	r1, r3, #31
 8007598:	bf44      	itt	mi
 800759a:	f043 0320 	orrmi.w	r3, r3, #32
 800759e:	6023      	strmi	r3, [r4, #0]
 80075a0:	b91d      	cbnz	r5, 80075aa <_printf_i+0x196>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f023 0320 	bic.w	r3, r3, #32
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2310      	movs	r3, #16
 80075ac:	e7b0      	b.n	8007510 <_printf_i+0xfc>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	f043 0320 	orr.w	r3, r3, #32
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	2378      	movs	r3, #120	; 0x78
 80075b8:	4828      	ldr	r0, [pc, #160]	; (800765c <_printf_i+0x248>)
 80075ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075be:	e7e3      	b.n	8007588 <_printf_i+0x174>
 80075c0:	065e      	lsls	r6, r3, #25
 80075c2:	bf48      	it	mi
 80075c4:	b2ad      	uxthmi	r5, r5
 80075c6:	e7e6      	b.n	8007596 <_printf_i+0x182>
 80075c8:	4616      	mov	r6, r2
 80075ca:	e7bb      	b.n	8007544 <_printf_i+0x130>
 80075cc:	680b      	ldr	r3, [r1, #0]
 80075ce:	6826      	ldr	r6, [r4, #0]
 80075d0:	6960      	ldr	r0, [r4, #20]
 80075d2:	1d1d      	adds	r5, r3, #4
 80075d4:	600d      	str	r5, [r1, #0]
 80075d6:	0635      	lsls	r5, r6, #24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	d501      	bpl.n	80075e0 <_printf_i+0x1cc>
 80075dc:	6018      	str	r0, [r3, #0]
 80075de:	e002      	b.n	80075e6 <_printf_i+0x1d2>
 80075e0:	0671      	lsls	r1, r6, #25
 80075e2:	d5fb      	bpl.n	80075dc <_printf_i+0x1c8>
 80075e4:	8018      	strh	r0, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	4616      	mov	r6, r2
 80075ec:	e7ba      	b.n	8007564 <_printf_i+0x150>
 80075ee:	680b      	ldr	r3, [r1, #0]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	600a      	str	r2, [r1, #0]
 80075f4:	681e      	ldr	r6, [r3, #0]
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 fde8 	bl	80001d0 <memchr>
 8007600:	b108      	cbz	r0, 8007606 <_printf_i+0x1f2>
 8007602:	1b80      	subs	r0, r0, r6
 8007604:	6060      	str	r0, [r4, #4]
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007610:	e7a8      	b.n	8007564 <_printf_i+0x150>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	4632      	mov	r2, r6
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	47d0      	blx	sl
 800761c:	3001      	adds	r0, #1
 800761e:	d0ab      	beq.n	8007578 <_printf_i+0x164>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	d413      	bmi.n	800764e <_printf_i+0x23a>
 8007626:	68e0      	ldr	r0, [r4, #12]
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	4298      	cmp	r0, r3
 800762c:	bfb8      	it	lt
 800762e:	4618      	movlt	r0, r3
 8007630:	e7a4      	b.n	800757c <_printf_i+0x168>
 8007632:	2301      	movs	r3, #1
 8007634:	4632      	mov	r2, r6
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	47d0      	blx	sl
 800763c:	3001      	adds	r0, #1
 800763e:	d09b      	beq.n	8007578 <_printf_i+0x164>
 8007640:	3501      	adds	r5, #1
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	9903      	ldr	r1, [sp, #12]
 8007646:	1a5b      	subs	r3, r3, r1
 8007648:	42ab      	cmp	r3, r5
 800764a:	dcf2      	bgt.n	8007632 <_printf_i+0x21e>
 800764c:	e7eb      	b.n	8007626 <_printf_i+0x212>
 800764e:	2500      	movs	r5, #0
 8007650:	f104 0619 	add.w	r6, r4, #25
 8007654:	e7f5      	b.n	8007642 <_printf_i+0x22e>
 8007656:	bf00      	nop
 8007658:	08007d71 	.word	0x08007d71
 800765c:	08007d82 	.word	0x08007d82

08007660 <_sbrk_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d06      	ldr	r5, [pc, #24]	; (800767c <_sbrk_r+0x1c>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7f9 fb80 	bl	8000d70 <_sbrk>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_sbrk_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_sbrk_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20001158 	.word	0x20001158

08007680 <__sread>:
 8007680:	b510      	push	{r4, lr}
 8007682:	460c      	mov	r4, r1
 8007684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007688:	f000 fab4 	bl	8007bf4 <_read_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	bfab      	itete	ge
 8007690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007692:	89a3      	ldrhlt	r3, [r4, #12]
 8007694:	181b      	addge	r3, r3, r0
 8007696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800769a:	bfac      	ite	ge
 800769c:	6563      	strge	r3, [r4, #84]	; 0x54
 800769e:	81a3      	strhlt	r3, [r4, #12]
 80076a0:	bd10      	pop	{r4, pc}

080076a2 <__swrite>:
 80076a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a6:	461f      	mov	r7, r3
 80076a8:	898b      	ldrh	r3, [r1, #12]
 80076aa:	05db      	lsls	r3, r3, #23
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	4616      	mov	r6, r2
 80076b2:	d505      	bpl.n	80076c0 <__swrite+0x1e>
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	2302      	movs	r3, #2
 80076ba:	2200      	movs	r2, #0
 80076bc:	f000 f9c8 	bl	8007a50 <_lseek_r>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	4632      	mov	r2, r6
 80076ce:	463b      	mov	r3, r7
 80076d0:	4628      	mov	r0, r5
 80076d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	f000 b869 	b.w	80077ac <_write_r>

080076da <__sseek>:
 80076da:	b510      	push	{r4, lr}
 80076dc:	460c      	mov	r4, r1
 80076de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e2:	f000 f9b5 	bl	8007a50 <_lseek_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	bf15      	itete	ne
 80076ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076f6:	81a3      	strheq	r3, [r4, #12]
 80076f8:	bf18      	it	ne
 80076fa:	81a3      	strhne	r3, [r4, #12]
 80076fc:	bd10      	pop	{r4, pc}

080076fe <__sclose>:
 80076fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007702:	f000 b8d3 	b.w	80078ac <_close_r>
	...

08007708 <__swbuf_r>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	460e      	mov	r6, r1
 800770c:	4614      	mov	r4, r2
 800770e:	4605      	mov	r5, r0
 8007710:	b118      	cbz	r0, 800771a <__swbuf_r+0x12>
 8007712:	6983      	ldr	r3, [r0, #24]
 8007714:	b90b      	cbnz	r3, 800771a <__swbuf_r+0x12>
 8007716:	f7ff fbbb 	bl	8006e90 <__sinit>
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <__swbuf_r+0x98>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d12b      	bne.n	8007778 <__swbuf_r+0x70>
 8007720:	686c      	ldr	r4, [r5, #4]
 8007722:	69a3      	ldr	r3, [r4, #24]
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	071a      	lsls	r2, r3, #28
 800772a:	d52f      	bpl.n	800778c <__swbuf_r+0x84>
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	b36b      	cbz	r3, 800778c <__swbuf_r+0x84>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	1ac0      	subs	r0, r0, r3
 8007736:	6963      	ldr	r3, [r4, #20]
 8007738:	b2f6      	uxtb	r6, r6
 800773a:	4283      	cmp	r3, r0
 800773c:	4637      	mov	r7, r6
 800773e:	dc04      	bgt.n	800774a <__swbuf_r+0x42>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f948 	bl	80079d8 <_fflush_r>
 8007748:	bb30      	cbnz	r0, 8007798 <__swbuf_r+0x90>
 800774a:	68a3      	ldr	r3, [r4, #8]
 800774c:	3b01      	subs	r3, #1
 800774e:	60a3      	str	r3, [r4, #8]
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	6022      	str	r2, [r4, #0]
 8007756:	701e      	strb	r6, [r3, #0]
 8007758:	6963      	ldr	r3, [r4, #20]
 800775a:	3001      	adds	r0, #1
 800775c:	4283      	cmp	r3, r0
 800775e:	d004      	beq.n	800776a <__swbuf_r+0x62>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	07db      	lsls	r3, r3, #31
 8007764:	d506      	bpl.n	8007774 <__swbuf_r+0x6c>
 8007766:	2e0a      	cmp	r6, #10
 8007768:	d104      	bne.n	8007774 <__swbuf_r+0x6c>
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f933 	bl	80079d8 <_fflush_r>
 8007772:	b988      	cbnz	r0, 8007798 <__swbuf_r+0x90>
 8007774:	4638      	mov	r0, r7
 8007776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <__swbuf_r+0x9c>)
 800777a:	429c      	cmp	r4, r3
 800777c:	d101      	bne.n	8007782 <__swbuf_r+0x7a>
 800777e:	68ac      	ldr	r4, [r5, #8]
 8007780:	e7cf      	b.n	8007722 <__swbuf_r+0x1a>
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <__swbuf_r+0xa0>)
 8007784:	429c      	cmp	r4, r3
 8007786:	bf08      	it	eq
 8007788:	68ec      	ldreq	r4, [r5, #12]
 800778a:	e7ca      	b.n	8007722 <__swbuf_r+0x1a>
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f81e 	bl	80077d0 <__swsetup_r>
 8007794:	2800      	cmp	r0, #0
 8007796:	d0cb      	beq.n	8007730 <__swbuf_r+0x28>
 8007798:	f04f 37ff 	mov.w	r7, #4294967295
 800779c:	e7ea      	b.n	8007774 <__swbuf_r+0x6c>
 800779e:	bf00      	nop
 80077a0:	08007d20 	.word	0x08007d20
 80077a4:	08007d40 	.word	0x08007d40
 80077a8:	08007d00 	.word	0x08007d00

080077ac <_write_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_write_r+0x20>)
 80077b0:	4604      	mov	r4, r0
 80077b2:	4608      	mov	r0, r1
 80077b4:	4611      	mov	r1, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7f9 fa88 	bl	8000cd0 <_write>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_write_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_write_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20001158 	.word	0x20001158

080077d0 <__swsetup_r>:
 80077d0:	4b32      	ldr	r3, [pc, #200]	; (800789c <__swsetup_r+0xcc>)
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	681d      	ldr	r5, [r3, #0]
 80077d6:	4606      	mov	r6, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	b125      	cbz	r5, 80077e6 <__swsetup_r+0x16>
 80077dc:	69ab      	ldr	r3, [r5, #24]
 80077de:	b913      	cbnz	r3, 80077e6 <__swsetup_r+0x16>
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7ff fb55 	bl	8006e90 <__sinit>
 80077e6:	4b2e      	ldr	r3, [pc, #184]	; (80078a0 <__swsetup_r+0xd0>)
 80077e8:	429c      	cmp	r4, r3
 80077ea:	d10f      	bne.n	800780c <__swsetup_r+0x3c>
 80077ec:	686c      	ldr	r4, [r5, #4]
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077f4:	0719      	lsls	r1, r3, #28
 80077f6:	d42c      	bmi.n	8007852 <__swsetup_r+0x82>
 80077f8:	06dd      	lsls	r5, r3, #27
 80077fa:	d411      	bmi.n	8007820 <__swsetup_r+0x50>
 80077fc:	2309      	movs	r3, #9
 80077fe:	6033      	str	r3, [r6, #0]
 8007800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	e03e      	b.n	800788a <__swsetup_r+0xba>
 800780c:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <__swsetup_r+0xd4>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <__swsetup_r+0x46>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7eb      	b.n	80077ee <__swsetup_r+0x1e>
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <__swsetup_r+0xd8>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7e6      	b.n	80077ee <__swsetup_r+0x1e>
 8007820:	0758      	lsls	r0, r3, #29
 8007822:	d512      	bpl.n	800784a <__swsetup_r+0x7a>
 8007824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007826:	b141      	cbz	r1, 800783a <__swsetup_r+0x6a>
 8007828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800782c:	4299      	cmp	r1, r3
 800782e:	d002      	beq.n	8007836 <__swsetup_r+0x66>
 8007830:	4630      	mov	r0, r6
 8007832:	f000 f98f 	bl	8007b54 <_free_r>
 8007836:	2300      	movs	r3, #0
 8007838:	6363      	str	r3, [r4, #52]	; 0x34
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	2300      	movs	r3, #0
 8007844:	6063      	str	r3, [r4, #4]
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	f043 0308 	orr.w	r3, r3, #8
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	b94b      	cbnz	r3, 800786a <__swsetup_r+0x9a>
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d003      	beq.n	800786a <__swsetup_r+0x9a>
 8007862:	4621      	mov	r1, r4
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f929 	bl	8007abc <__smakebuf_r>
 800786a:	89a0      	ldrh	r0, [r4, #12]
 800786c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007870:	f010 0301 	ands.w	r3, r0, #1
 8007874:	d00a      	beq.n	800788c <__swsetup_r+0xbc>
 8007876:	2300      	movs	r3, #0
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	6963      	ldr	r3, [r4, #20]
 800787c:	425b      	negs	r3, r3
 800787e:	61a3      	str	r3, [r4, #24]
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b943      	cbnz	r3, 8007896 <__swsetup_r+0xc6>
 8007884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007888:	d1ba      	bne.n	8007800 <__swsetup_r+0x30>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	0781      	lsls	r1, r0, #30
 800788e:	bf58      	it	pl
 8007890:	6963      	ldrpl	r3, [r4, #20]
 8007892:	60a3      	str	r3, [r4, #8]
 8007894:	e7f4      	b.n	8007880 <__swsetup_r+0xb0>
 8007896:	2000      	movs	r0, #0
 8007898:	e7f7      	b.n	800788a <__swsetup_r+0xba>
 800789a:	bf00      	nop
 800789c:	20000010 	.word	0x20000010
 80078a0:	08007d20 	.word	0x08007d20
 80078a4:	08007d40 	.word	0x08007d40
 80078a8:	08007d00 	.word	0x08007d00

080078ac <_close_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	; (80078c8 <_close_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7f9 fa26 	bl	8000d08 <_close>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_close_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_close_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20001158 	.word	0x20001158

080078cc <__sflush_r>:
 80078cc:	898a      	ldrh	r2, [r1, #12]
 80078ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d2:	4605      	mov	r5, r0
 80078d4:	0710      	lsls	r0, r2, #28
 80078d6:	460c      	mov	r4, r1
 80078d8:	d458      	bmi.n	800798c <__sflush_r+0xc0>
 80078da:	684b      	ldr	r3, [r1, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dc05      	bgt.n	80078ec <__sflush_r+0x20>
 80078e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	dc02      	bgt.n	80078ec <__sflush_r+0x20>
 80078e6:	2000      	movs	r0, #0
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ee:	2e00      	cmp	r6, #0
 80078f0:	d0f9      	beq.n	80078e6 <__sflush_r+0x1a>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078f8:	682f      	ldr	r7, [r5, #0]
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	d032      	beq.n	8007964 <__sflush_r+0x98>
 80078fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	075a      	lsls	r2, r3, #29
 8007904:	d505      	bpl.n	8007912 <__sflush_r+0x46>
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	1ac0      	subs	r0, r0, r3
 800790a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800790c:	b10b      	cbz	r3, 8007912 <__sflush_r+0x46>
 800790e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007910:	1ac0      	subs	r0, r0, r3
 8007912:	2300      	movs	r3, #0
 8007914:	4602      	mov	r2, r0
 8007916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007918:	6a21      	ldr	r1, [r4, #32]
 800791a:	4628      	mov	r0, r5
 800791c:	47b0      	blx	r6
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	d106      	bne.n	8007932 <__sflush_r+0x66>
 8007924:	6829      	ldr	r1, [r5, #0]
 8007926:	291d      	cmp	r1, #29
 8007928:	d82c      	bhi.n	8007984 <__sflush_r+0xb8>
 800792a:	4a2a      	ldr	r2, [pc, #168]	; (80079d4 <__sflush_r+0x108>)
 800792c:	40ca      	lsrs	r2, r1
 800792e:	07d6      	lsls	r6, r2, #31
 8007930:	d528      	bpl.n	8007984 <__sflush_r+0xb8>
 8007932:	2200      	movs	r2, #0
 8007934:	6062      	str	r2, [r4, #4]
 8007936:	04d9      	lsls	r1, r3, #19
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	6022      	str	r2, [r4, #0]
 800793c:	d504      	bpl.n	8007948 <__sflush_r+0x7c>
 800793e:	1c42      	adds	r2, r0, #1
 8007940:	d101      	bne.n	8007946 <__sflush_r+0x7a>
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	b903      	cbnz	r3, 8007948 <__sflush_r+0x7c>
 8007946:	6560      	str	r0, [r4, #84]	; 0x54
 8007948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794a:	602f      	str	r7, [r5, #0]
 800794c:	2900      	cmp	r1, #0
 800794e:	d0ca      	beq.n	80078e6 <__sflush_r+0x1a>
 8007950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007954:	4299      	cmp	r1, r3
 8007956:	d002      	beq.n	800795e <__sflush_r+0x92>
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f8fb 	bl	8007b54 <_free_r>
 800795e:	2000      	movs	r0, #0
 8007960:	6360      	str	r0, [r4, #52]	; 0x34
 8007962:	e7c1      	b.n	80078e8 <__sflush_r+0x1c>
 8007964:	6a21      	ldr	r1, [r4, #32]
 8007966:	2301      	movs	r3, #1
 8007968:	4628      	mov	r0, r5
 800796a:	47b0      	blx	r6
 800796c:	1c41      	adds	r1, r0, #1
 800796e:	d1c7      	bne.n	8007900 <__sflush_r+0x34>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0c4      	beq.n	8007900 <__sflush_r+0x34>
 8007976:	2b1d      	cmp	r3, #29
 8007978:	d001      	beq.n	800797e <__sflush_r+0xb2>
 800797a:	2b16      	cmp	r3, #22
 800797c:	d101      	bne.n	8007982 <__sflush_r+0xb6>
 800797e:	602f      	str	r7, [r5, #0]
 8007980:	e7b1      	b.n	80078e6 <__sflush_r+0x1a>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	e7ad      	b.n	80078e8 <__sflush_r+0x1c>
 800798c:	690f      	ldr	r7, [r1, #16]
 800798e:	2f00      	cmp	r7, #0
 8007990:	d0a9      	beq.n	80078e6 <__sflush_r+0x1a>
 8007992:	0793      	lsls	r3, r2, #30
 8007994:	680e      	ldr	r6, [r1, #0]
 8007996:	bf08      	it	eq
 8007998:	694b      	ldreq	r3, [r1, #20]
 800799a:	600f      	str	r7, [r1, #0]
 800799c:	bf18      	it	ne
 800799e:	2300      	movne	r3, #0
 80079a0:	eba6 0807 	sub.w	r8, r6, r7
 80079a4:	608b      	str	r3, [r1, #8]
 80079a6:	f1b8 0f00 	cmp.w	r8, #0
 80079aa:	dd9c      	ble.n	80078e6 <__sflush_r+0x1a>
 80079ac:	6a21      	ldr	r1, [r4, #32]
 80079ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079b0:	4643      	mov	r3, r8
 80079b2:	463a      	mov	r2, r7
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b0      	blx	r6
 80079b8:	2800      	cmp	r0, #0
 80079ba:	dc06      	bgt.n	80079ca <__sflush_r+0xfe>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	e78e      	b.n	80078e8 <__sflush_r+0x1c>
 80079ca:	4407      	add	r7, r0
 80079cc:	eba8 0800 	sub.w	r8, r8, r0
 80079d0:	e7e9      	b.n	80079a6 <__sflush_r+0xda>
 80079d2:	bf00      	nop
 80079d4:	20400001 	.word	0x20400001

080079d8 <_fflush_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	690b      	ldr	r3, [r1, #16]
 80079dc:	4605      	mov	r5, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	b913      	cbnz	r3, 80079e8 <_fflush_r+0x10>
 80079e2:	2500      	movs	r5, #0
 80079e4:	4628      	mov	r0, r5
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	b118      	cbz	r0, 80079f2 <_fflush_r+0x1a>
 80079ea:	6983      	ldr	r3, [r0, #24]
 80079ec:	b90b      	cbnz	r3, 80079f2 <_fflush_r+0x1a>
 80079ee:	f7ff fa4f 	bl	8006e90 <__sinit>
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <_fflush_r+0x6c>)
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d11b      	bne.n	8007a30 <_fflush_r+0x58>
 80079f8:	686c      	ldr	r4, [r5, #4]
 80079fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0ef      	beq.n	80079e2 <_fflush_r+0xa>
 8007a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a04:	07d0      	lsls	r0, r2, #31
 8007a06:	d404      	bmi.n	8007a12 <_fflush_r+0x3a>
 8007a08:	0599      	lsls	r1, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_fflush_r+0x3a>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0e:	f7ff fadd 	bl	8006fcc <__retarget_lock_acquire_recursive>
 8007a12:	4628      	mov	r0, r5
 8007a14:	4621      	mov	r1, r4
 8007a16:	f7ff ff59 	bl	80078cc <__sflush_r>
 8007a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a1c:	07da      	lsls	r2, r3, #31
 8007a1e:	4605      	mov	r5, r0
 8007a20:	d4e0      	bmi.n	80079e4 <_fflush_r+0xc>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	059b      	lsls	r3, r3, #22
 8007a26:	d4dd      	bmi.n	80079e4 <_fflush_r+0xc>
 8007a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2a:	f7ff fad0 	bl	8006fce <__retarget_lock_release_recursive>
 8007a2e:	e7d9      	b.n	80079e4 <_fflush_r+0xc>
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <_fflush_r+0x70>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d101      	bne.n	8007a3a <_fflush_r+0x62>
 8007a36:	68ac      	ldr	r4, [r5, #8]
 8007a38:	e7df      	b.n	80079fa <_fflush_r+0x22>
 8007a3a:	4b04      	ldr	r3, [pc, #16]	; (8007a4c <_fflush_r+0x74>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	bf08      	it	eq
 8007a40:	68ec      	ldreq	r4, [r5, #12]
 8007a42:	e7da      	b.n	80079fa <_fflush_r+0x22>
 8007a44:	08007d20 	.word	0x08007d20
 8007a48:	08007d40 	.word	0x08007d40
 8007a4c:	08007d00 	.word	0x08007d00

08007a50 <_lseek_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4d07      	ldr	r5, [pc, #28]	; (8007a70 <_lseek_r+0x20>)
 8007a54:	4604      	mov	r4, r0
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	602a      	str	r2, [r5, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f7f9 f979 	bl	8000d56 <_lseek>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_lseek_r+0x1e>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_lseek_r+0x1e>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20001158 	.word	0x20001158

08007a74 <__swhatbuf_r>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	460e      	mov	r6, r1
 8007a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	b096      	sub	sp, #88	; 0x58
 8007a80:	4614      	mov	r4, r2
 8007a82:	461d      	mov	r5, r3
 8007a84:	da07      	bge.n	8007a96 <__swhatbuf_r+0x22>
 8007a86:	2300      	movs	r3, #0
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	89b3      	ldrh	r3, [r6, #12]
 8007a8c:	061a      	lsls	r2, r3, #24
 8007a8e:	d410      	bmi.n	8007ab2 <__swhatbuf_r+0x3e>
 8007a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a94:	e00e      	b.n	8007ab4 <__swhatbuf_r+0x40>
 8007a96:	466a      	mov	r2, sp
 8007a98:	f000 f8be 	bl	8007c18 <_fstat_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	dbf2      	blt.n	8007a86 <__swhatbuf_r+0x12>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007aaa:	425a      	negs	r2, r3
 8007aac:	415a      	adcs	r2, r3
 8007aae:	602a      	str	r2, [r5, #0]
 8007ab0:	e7ee      	b.n	8007a90 <__swhatbuf_r+0x1c>
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	b016      	add	sp, #88	; 0x58
 8007aba:	bd70      	pop	{r4, r5, r6, pc}

08007abc <__smakebuf_r>:
 8007abc:	898b      	ldrh	r3, [r1, #12]
 8007abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ac0:	079d      	lsls	r5, r3, #30
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	d507      	bpl.n	8007ad8 <__smakebuf_r+0x1c>
 8007ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	6163      	str	r3, [r4, #20]
 8007ad4:	b002      	add	sp, #8
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	ab01      	add	r3, sp, #4
 8007ada:	466a      	mov	r2, sp
 8007adc:	f7ff ffca 	bl	8007a74 <__swhatbuf_r>
 8007ae0:	9900      	ldr	r1, [sp, #0]
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff fa73 	bl	8006fd0 <_malloc_r>
 8007aea:	b948      	cbnz	r0, 8007b00 <__smakebuf_r+0x44>
 8007aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af0:	059a      	lsls	r2, r3, #22
 8007af2:	d4ef      	bmi.n	8007ad4 <__smakebuf_r+0x18>
 8007af4:	f023 0303 	bic.w	r3, r3, #3
 8007af8:	f043 0302 	orr.w	r3, r3, #2
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	e7e3      	b.n	8007ac8 <__smakebuf_r+0xc>
 8007b00:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <__smakebuf_r+0x7c>)
 8007b02:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	6020      	str	r0, [r4, #0]
 8007b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	6163      	str	r3, [r4, #20]
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	6120      	str	r0, [r4, #16]
 8007b16:	b15b      	cbz	r3, 8007b30 <__smakebuf_r+0x74>
 8007b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 f88d 	bl	8007c3c <_isatty_r>
 8007b22:	b128      	cbz	r0, 8007b30 <__smakebuf_r+0x74>
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	f043 0301 	orr.w	r3, r3, #1
 8007b2e:	81a3      	strh	r3, [r4, #12]
 8007b30:	89a0      	ldrh	r0, [r4, #12]
 8007b32:	4305      	orrs	r5, r0
 8007b34:	81a5      	strh	r5, [r4, #12]
 8007b36:	e7cd      	b.n	8007ad4 <__smakebuf_r+0x18>
 8007b38:	08006e29 	.word	0x08006e29

08007b3c <__malloc_lock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__malloc_lock+0x8>)
 8007b3e:	f7ff ba45 	b.w	8006fcc <__retarget_lock_acquire_recursive>
 8007b42:	bf00      	nop
 8007b44:	20001150 	.word	0x20001150

08007b48 <__malloc_unlock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__malloc_unlock+0x8>)
 8007b4a:	f7ff ba40 	b.w	8006fce <__retarget_lock_release_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20001150 	.word	0x20001150

08007b54 <_free_r>:
 8007b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d048      	beq.n	8007bec <_free_r+0x98>
 8007b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5e:	9001      	str	r0, [sp, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f1a1 0404 	sub.w	r4, r1, #4
 8007b66:	bfb8      	it	lt
 8007b68:	18e4      	addlt	r4, r4, r3
 8007b6a:	f7ff ffe7 	bl	8007b3c <__malloc_lock>
 8007b6e:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <_free_r+0x9c>)
 8007b70:	9801      	ldr	r0, [sp, #4]
 8007b72:	6813      	ldr	r3, [r2, #0]
 8007b74:	4615      	mov	r5, r2
 8007b76:	b933      	cbnz	r3, 8007b86 <_free_r+0x32>
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	6014      	str	r4, [r2, #0]
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b82:	f7ff bfe1 	b.w	8007b48 <__malloc_unlock>
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	d90b      	bls.n	8007ba2 <_free_r+0x4e>
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	1862      	adds	r2, r4, r1
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bf04      	itt	eq
 8007b92:	681a      	ldreq	r2, [r3, #0]
 8007b94:	685b      	ldreq	r3, [r3, #4]
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	bf04      	itt	eq
 8007b9a:	1852      	addeq	r2, r2, r1
 8007b9c:	6022      	streq	r2, [r4, #0]
 8007b9e:	602c      	str	r4, [r5, #0]
 8007ba0:	e7ec      	b.n	8007b7c <_free_r+0x28>
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b10b      	cbz	r3, 8007bac <_free_r+0x58>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x4e>
 8007bac:	6811      	ldr	r1, [r2, #0]
 8007bae:	1855      	adds	r5, r2, r1
 8007bb0:	42a5      	cmp	r5, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x78>
 8007bb4:	6824      	ldr	r4, [r4, #0]
 8007bb6:	4421      	add	r1, r4
 8007bb8:	1854      	adds	r4, r2, r1
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	d1dd      	bne.n	8007b7c <_free_r+0x28>
 8007bc0:	681c      	ldr	r4, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	6053      	str	r3, [r2, #4]
 8007bc6:	4421      	add	r1, r4
 8007bc8:	6011      	str	r1, [r2, #0]
 8007bca:	e7d7      	b.n	8007b7c <_free_r+0x28>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x80>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	e7d3      	b.n	8007b7c <_free_r+0x28>
 8007bd4:	6825      	ldr	r5, [r4, #0]
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1949      	addeq	r1, r1, r5
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	6054      	str	r4, [r2, #4]
 8007bea:	e7c7      	b.n	8007b7c <_free_r+0x28>
 8007bec:	b003      	add	sp, #12
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	20000ff4 	.word	0x20000ff4

08007bf4 <_read_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	; (8007c14 <_read_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7f9 f847 	bl	8000c96 <_read>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_read_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_read_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20001158 	.word	0x20001158

08007c18 <_fstat_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_fstat_r+0x20>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7f9 f87b 	bl	8000d20 <_fstat>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_fstat_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_fstat_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	20001158 	.word	0x20001158

08007c3c <_isatty_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_isatty_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7f9 f87a 	bl	8000d40 <_isatty>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_isatty_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_isatty_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20001158 	.word	0x20001158

08007c5c <_init>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr

08007c68 <_fini>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr
